
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model CropFeed
 * 
 */
export type CropFeed = $Result.DefaultSelection<Prisma.$CropFeedPayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model SoilTestRequest
 * 
 */
export type SoilTestRequest = $Result.DefaultSelection<Prisma.$SoilTestRequestPayload>
/**
 * Model SoilTestReport
 * 
 */
export type SoilTestReport = $Result.DefaultSelection<Prisma.$SoilTestReportPayload>
/**
 * Model Feedback
 * 
 */
export type Feedback = $Result.DefaultSelection<Prisma.$FeedbackPayload>
/**
 * Model MarketPrice
 * 
 */
export type MarketPrice = $Result.DefaultSelection<Prisma.$MarketPricePayload>
/**
 * Model Bidding
 * 
 */
export type Bidding = $Result.DefaultSelection<Prisma.$BiddingPayload>
/**
 * Model Bid
 * 
 */
export type Bid = $Result.DefaultSelection<Prisma.$BidPayload>
/**
 * Model Solution
 * 
 */
export type Solution = $Result.DefaultSelection<Prisma.$SolutionPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  FARMER: 'FARMER',
  SOIL_TEST_COMPANY: 'SOIL_TEST_COMPANY',
  SEED_PROVIDER: 'SEED_PROVIDER',
  MARKET_AGENT: 'MARKET_AGENT',
  BUYER: 'BUYER'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const BiddingStatus: {
  ACTIVE: 'ACTIVE',
  CLOSED: 'CLOSED',
  SOLD: 'SOLD'
};

export type BiddingStatus = (typeof BiddingStatus)[keyof typeof BiddingStatus]


export const BidStatus: {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED'
};

export type BidStatus = (typeof BidStatus)[keyof typeof BidStatus]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type BiddingStatus = $Enums.BiddingStatus

export const BiddingStatus: typeof $Enums.BiddingStatus

export type BidStatus = $Enums.BidStatus

export const BidStatus: typeof $Enums.BidStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cropFeed`: Exposes CRUD operations for the **CropFeed** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CropFeeds
    * const cropFeeds = await prisma.cropFeed.findMany()
    * ```
    */
  get cropFeed(): Prisma.CropFeedDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.soilTestRequest`: Exposes CRUD operations for the **SoilTestRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SoilTestRequests
    * const soilTestRequests = await prisma.soilTestRequest.findMany()
    * ```
    */
  get soilTestRequest(): Prisma.SoilTestRequestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.soilTestReport`: Exposes CRUD operations for the **SoilTestReport** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SoilTestReports
    * const soilTestReports = await prisma.soilTestReport.findMany()
    * ```
    */
  get soilTestReport(): Prisma.SoilTestReportDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.feedback`: Exposes CRUD operations for the **Feedback** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Feedbacks
    * const feedbacks = await prisma.feedback.findMany()
    * ```
    */
  get feedback(): Prisma.FeedbackDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.marketPrice`: Exposes CRUD operations for the **MarketPrice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MarketPrices
    * const marketPrices = await prisma.marketPrice.findMany()
    * ```
    */
  get marketPrice(): Prisma.MarketPriceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bidding`: Exposes CRUD operations for the **Bidding** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Biddings
    * const biddings = await prisma.bidding.findMany()
    * ```
    */
  get bidding(): Prisma.BiddingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bid`: Exposes CRUD operations for the **Bid** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bids
    * const bids = await prisma.bid.findMany()
    * ```
    */
  get bid(): Prisma.BidDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.solution`: Exposes CRUD operations for the **Solution** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Solutions
    * const solutions = await prisma.solution.findMany()
    * ```
    */
  get solution(): Prisma.SolutionDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    CropFeed: 'CropFeed',
    Comment: 'Comment',
    SoilTestRequest: 'SoilTestRequest',
    SoilTestReport: 'SoilTestReport',
    Feedback: 'Feedback',
    MarketPrice: 'MarketPrice',
    Bidding: 'Bidding',
    Bid: 'Bid',
    Solution: 'Solution'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "cropFeed" | "comment" | "soilTestRequest" | "soilTestReport" | "feedback" | "marketPrice" | "bidding" | "bid" | "solution"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      CropFeed: {
        payload: Prisma.$CropFeedPayload<ExtArgs>
        fields: Prisma.CropFeedFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CropFeedFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CropFeedPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CropFeedFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CropFeedPayload>
          }
          findFirst: {
            args: Prisma.CropFeedFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CropFeedPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CropFeedFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CropFeedPayload>
          }
          findMany: {
            args: Prisma.CropFeedFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CropFeedPayload>[]
          }
          create: {
            args: Prisma.CropFeedCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CropFeedPayload>
          }
          createMany: {
            args: Prisma.CropFeedCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CropFeedCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CropFeedPayload>[]
          }
          delete: {
            args: Prisma.CropFeedDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CropFeedPayload>
          }
          update: {
            args: Prisma.CropFeedUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CropFeedPayload>
          }
          deleteMany: {
            args: Prisma.CropFeedDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CropFeedUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CropFeedUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CropFeedPayload>[]
          }
          upsert: {
            args: Prisma.CropFeedUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CropFeedPayload>
          }
          aggregate: {
            args: Prisma.CropFeedAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCropFeed>
          }
          groupBy: {
            args: Prisma.CropFeedGroupByArgs<ExtArgs>
            result: $Utils.Optional<CropFeedGroupByOutputType>[]
          }
          count: {
            args: Prisma.CropFeedCountArgs<ExtArgs>
            result: $Utils.Optional<CropFeedCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CommentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      SoilTestRequest: {
        payload: Prisma.$SoilTestRequestPayload<ExtArgs>
        fields: Prisma.SoilTestRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SoilTestRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoilTestRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SoilTestRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoilTestRequestPayload>
          }
          findFirst: {
            args: Prisma.SoilTestRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoilTestRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SoilTestRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoilTestRequestPayload>
          }
          findMany: {
            args: Prisma.SoilTestRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoilTestRequestPayload>[]
          }
          create: {
            args: Prisma.SoilTestRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoilTestRequestPayload>
          }
          createMany: {
            args: Prisma.SoilTestRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SoilTestRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoilTestRequestPayload>[]
          }
          delete: {
            args: Prisma.SoilTestRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoilTestRequestPayload>
          }
          update: {
            args: Prisma.SoilTestRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoilTestRequestPayload>
          }
          deleteMany: {
            args: Prisma.SoilTestRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SoilTestRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SoilTestRequestUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoilTestRequestPayload>[]
          }
          upsert: {
            args: Prisma.SoilTestRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoilTestRequestPayload>
          }
          aggregate: {
            args: Prisma.SoilTestRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSoilTestRequest>
          }
          groupBy: {
            args: Prisma.SoilTestRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<SoilTestRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.SoilTestRequestCountArgs<ExtArgs>
            result: $Utils.Optional<SoilTestRequestCountAggregateOutputType> | number
          }
        }
      }
      SoilTestReport: {
        payload: Prisma.$SoilTestReportPayload<ExtArgs>
        fields: Prisma.SoilTestReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SoilTestReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoilTestReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SoilTestReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoilTestReportPayload>
          }
          findFirst: {
            args: Prisma.SoilTestReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoilTestReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SoilTestReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoilTestReportPayload>
          }
          findMany: {
            args: Prisma.SoilTestReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoilTestReportPayload>[]
          }
          create: {
            args: Prisma.SoilTestReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoilTestReportPayload>
          }
          createMany: {
            args: Prisma.SoilTestReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SoilTestReportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoilTestReportPayload>[]
          }
          delete: {
            args: Prisma.SoilTestReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoilTestReportPayload>
          }
          update: {
            args: Prisma.SoilTestReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoilTestReportPayload>
          }
          deleteMany: {
            args: Prisma.SoilTestReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SoilTestReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SoilTestReportUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoilTestReportPayload>[]
          }
          upsert: {
            args: Prisma.SoilTestReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SoilTestReportPayload>
          }
          aggregate: {
            args: Prisma.SoilTestReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSoilTestReport>
          }
          groupBy: {
            args: Prisma.SoilTestReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<SoilTestReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.SoilTestReportCountArgs<ExtArgs>
            result: $Utils.Optional<SoilTestReportCountAggregateOutputType> | number
          }
        }
      }
      Feedback: {
        payload: Prisma.$FeedbackPayload<ExtArgs>
        fields: Prisma.FeedbackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeedbackFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeedbackFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findFirst: {
            args: Prisma.FeedbackFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeedbackFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findMany: {
            args: Prisma.FeedbackFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          create: {
            args: Prisma.FeedbackCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          createMany: {
            args: Prisma.FeedbackCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FeedbackCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          delete: {
            args: Prisma.FeedbackDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          update: {
            args: Prisma.FeedbackUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          deleteMany: {
            args: Prisma.FeedbackDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeedbackUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FeedbackUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          upsert: {
            args: Prisma.FeedbackUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          aggregate: {
            args: Prisma.FeedbackAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeedback>
          }
          groupBy: {
            args: Prisma.FeedbackGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeedbackGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeedbackCountArgs<ExtArgs>
            result: $Utils.Optional<FeedbackCountAggregateOutputType> | number
          }
        }
      }
      MarketPrice: {
        payload: Prisma.$MarketPricePayload<ExtArgs>
        fields: Prisma.MarketPriceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MarketPriceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketPricePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MarketPriceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketPricePayload>
          }
          findFirst: {
            args: Prisma.MarketPriceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketPricePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MarketPriceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketPricePayload>
          }
          findMany: {
            args: Prisma.MarketPriceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketPricePayload>[]
          }
          create: {
            args: Prisma.MarketPriceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketPricePayload>
          }
          createMany: {
            args: Prisma.MarketPriceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MarketPriceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketPricePayload>[]
          }
          delete: {
            args: Prisma.MarketPriceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketPricePayload>
          }
          update: {
            args: Prisma.MarketPriceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketPricePayload>
          }
          deleteMany: {
            args: Prisma.MarketPriceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MarketPriceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MarketPriceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketPricePayload>[]
          }
          upsert: {
            args: Prisma.MarketPriceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketPricePayload>
          }
          aggregate: {
            args: Prisma.MarketPriceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMarketPrice>
          }
          groupBy: {
            args: Prisma.MarketPriceGroupByArgs<ExtArgs>
            result: $Utils.Optional<MarketPriceGroupByOutputType>[]
          }
          count: {
            args: Prisma.MarketPriceCountArgs<ExtArgs>
            result: $Utils.Optional<MarketPriceCountAggregateOutputType> | number
          }
        }
      }
      Bidding: {
        payload: Prisma.$BiddingPayload<ExtArgs>
        fields: Prisma.BiddingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BiddingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiddingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BiddingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiddingPayload>
          }
          findFirst: {
            args: Prisma.BiddingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiddingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BiddingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiddingPayload>
          }
          findMany: {
            args: Prisma.BiddingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiddingPayload>[]
          }
          create: {
            args: Prisma.BiddingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiddingPayload>
          }
          createMany: {
            args: Prisma.BiddingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BiddingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiddingPayload>[]
          }
          delete: {
            args: Prisma.BiddingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiddingPayload>
          }
          update: {
            args: Prisma.BiddingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiddingPayload>
          }
          deleteMany: {
            args: Prisma.BiddingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BiddingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BiddingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiddingPayload>[]
          }
          upsert: {
            args: Prisma.BiddingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BiddingPayload>
          }
          aggregate: {
            args: Prisma.BiddingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBidding>
          }
          groupBy: {
            args: Prisma.BiddingGroupByArgs<ExtArgs>
            result: $Utils.Optional<BiddingGroupByOutputType>[]
          }
          count: {
            args: Prisma.BiddingCountArgs<ExtArgs>
            result: $Utils.Optional<BiddingCountAggregateOutputType> | number
          }
        }
      }
      Bid: {
        payload: Prisma.$BidPayload<ExtArgs>
        fields: Prisma.BidFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BidFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BidPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BidFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BidPayload>
          }
          findFirst: {
            args: Prisma.BidFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BidPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BidFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BidPayload>
          }
          findMany: {
            args: Prisma.BidFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BidPayload>[]
          }
          create: {
            args: Prisma.BidCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BidPayload>
          }
          createMany: {
            args: Prisma.BidCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BidCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BidPayload>[]
          }
          delete: {
            args: Prisma.BidDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BidPayload>
          }
          update: {
            args: Prisma.BidUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BidPayload>
          }
          deleteMany: {
            args: Prisma.BidDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BidUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BidUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BidPayload>[]
          }
          upsert: {
            args: Prisma.BidUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BidPayload>
          }
          aggregate: {
            args: Prisma.BidAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBid>
          }
          groupBy: {
            args: Prisma.BidGroupByArgs<ExtArgs>
            result: $Utils.Optional<BidGroupByOutputType>[]
          }
          count: {
            args: Prisma.BidCountArgs<ExtArgs>
            result: $Utils.Optional<BidCountAggregateOutputType> | number
          }
        }
      }
      Solution: {
        payload: Prisma.$SolutionPayload<ExtArgs>
        fields: Prisma.SolutionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SolutionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SolutionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SolutionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SolutionPayload>
          }
          findFirst: {
            args: Prisma.SolutionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SolutionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SolutionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SolutionPayload>
          }
          findMany: {
            args: Prisma.SolutionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SolutionPayload>[]
          }
          create: {
            args: Prisma.SolutionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SolutionPayload>
          }
          createMany: {
            args: Prisma.SolutionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SolutionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SolutionPayload>[]
          }
          delete: {
            args: Prisma.SolutionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SolutionPayload>
          }
          update: {
            args: Prisma.SolutionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SolutionPayload>
          }
          deleteMany: {
            args: Prisma.SolutionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SolutionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SolutionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SolutionPayload>[]
          }
          upsert: {
            args: Prisma.SolutionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SolutionPayload>
          }
          aggregate: {
            args: Prisma.SolutionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSolution>
          }
          groupBy: {
            args: Prisma.SolutionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SolutionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SolutionCountArgs<ExtArgs>
            result: $Utils.Optional<SolutionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    cropFeed?: CropFeedOmit
    comment?: CommentOmit
    soilTestRequest?: SoilTestRequestOmit
    soilTestReport?: SoilTestReportOmit
    feedback?: FeedbackOmit
    marketPrice?: MarketPriceOmit
    bidding?: BiddingOmit
    bid?: BidOmit
    solution?: SolutionOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    cropFeeds: number
    soilTestRequests: number
    soilTestReports: number
    feedbacks: number
    givenFeedbacks: number
    marketPrices: number
    biddings: number
    bids: number
    solutions: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cropFeeds?: boolean | UserCountOutputTypeCountCropFeedsArgs
    soilTestRequests?: boolean | UserCountOutputTypeCountSoilTestRequestsArgs
    soilTestReports?: boolean | UserCountOutputTypeCountSoilTestReportsArgs
    feedbacks?: boolean | UserCountOutputTypeCountFeedbacksArgs
    givenFeedbacks?: boolean | UserCountOutputTypeCountGivenFeedbacksArgs
    marketPrices?: boolean | UserCountOutputTypeCountMarketPricesArgs
    biddings?: boolean | UserCountOutputTypeCountBiddingsArgs
    bids?: boolean | UserCountOutputTypeCountBidsArgs
    solutions?: boolean | UserCountOutputTypeCountSolutionsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCropFeedsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CropFeedWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSoilTestRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SoilTestRequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSoilTestReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SoilTestReportWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGivenFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMarketPricesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MarketPriceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBiddingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BiddingWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBidsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BidWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSolutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SolutionWhereInput
  }


  /**
   * Count Type CropFeedCountOutputType
   */

  export type CropFeedCountOutputType = {
    comments: number
    solutions: number
  }

  export type CropFeedCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comments?: boolean | CropFeedCountOutputTypeCountCommentsArgs
    solutions?: boolean | CropFeedCountOutputTypeCountSolutionsArgs
  }

  // Custom InputTypes
  /**
   * CropFeedCountOutputType without action
   */
  export type CropFeedCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CropFeedCountOutputType
     */
    select?: CropFeedCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CropFeedCountOutputType without action
   */
  export type CropFeedCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * CropFeedCountOutputType without action
   */
  export type CropFeedCountOutputTypeCountSolutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SolutionWhereInput
  }


  /**
   * Count Type SoilTestRequestCountOutputType
   */

  export type SoilTestRequestCountOutputType = {
    reports: number
  }

  export type SoilTestRequestCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reports?: boolean | SoilTestRequestCountOutputTypeCountReportsArgs
  }

  // Custom InputTypes
  /**
   * SoilTestRequestCountOutputType without action
   */
  export type SoilTestRequestCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoilTestRequestCountOutputType
     */
    select?: SoilTestRequestCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SoilTestRequestCountOutputType without action
   */
  export type SoilTestRequestCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SoilTestReportWhereInput
  }


  /**
   * Count Type BiddingCountOutputType
   */

  export type BiddingCountOutputType = {
    bids: number
  }

  export type BiddingCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bids?: boolean | BiddingCountOutputTypeCountBidsArgs
  }

  // Custom InputTypes
  /**
   * BiddingCountOutputType without action
   */
  export type BiddingCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BiddingCountOutputType
     */
    select?: BiddingCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BiddingCountOutputType without action
   */
  export type BiddingCountOutputTypeCountBidsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BidWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    krishiStars: number | null
  }

  export type UserSumAggregateOutputType = {
    krishiStars: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    password: string | null
    role: $Enums.UserRole | null
    farmerCardNumber: string | null
    companyName: string | null
    address: string | null
    contactNumber: string | null
    krishiStars: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    password: string | null
    role: $Enums.UserRole | null
    farmerCardNumber: string | null
    companyName: string | null
    address: string | null
    contactNumber: string | null
    krishiStars: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    emailVerified: number
    image: number
    password: number
    role: number
    farmerCardNumber: number
    companyName: number
    address: number
    contactNumber: number
    krishiStars: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    krishiStars?: true
  }

  export type UserSumAggregateInputType = {
    krishiStars?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    password?: true
    role?: true
    farmerCardNumber?: true
    companyName?: true
    address?: true
    contactNumber?: true
    krishiStars?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    password?: true
    role?: true
    farmerCardNumber?: true
    companyName?: true
    address?: true
    contactNumber?: true
    krishiStars?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    password?: true
    role?: true
    farmerCardNumber?: true
    companyName?: true
    address?: true
    contactNumber?: true
    krishiStars?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string | null
    email: string
    emailVerified: Date | null
    image: string | null
    password: string | null
    role: $Enums.UserRole
    farmerCardNumber: string | null
    companyName: string | null
    address: string | null
    contactNumber: string | null
    krishiStars: number
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    password?: boolean
    role?: boolean
    farmerCardNumber?: boolean
    companyName?: boolean
    address?: boolean
    contactNumber?: boolean
    krishiStars?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    cropFeeds?: boolean | User$cropFeedsArgs<ExtArgs>
    soilTestRequests?: boolean | User$soilTestRequestsArgs<ExtArgs>
    soilTestReports?: boolean | User$soilTestReportsArgs<ExtArgs>
    feedbacks?: boolean | User$feedbacksArgs<ExtArgs>
    givenFeedbacks?: boolean | User$givenFeedbacksArgs<ExtArgs>
    marketPrices?: boolean | User$marketPricesArgs<ExtArgs>
    biddings?: boolean | User$biddingsArgs<ExtArgs>
    bids?: boolean | User$bidsArgs<ExtArgs>
    solutions?: boolean | User$solutionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    password?: boolean
    role?: boolean
    farmerCardNumber?: boolean
    companyName?: boolean
    address?: boolean
    contactNumber?: boolean
    krishiStars?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    password?: boolean
    role?: boolean
    farmerCardNumber?: boolean
    companyName?: boolean
    address?: boolean
    contactNumber?: boolean
    krishiStars?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    password?: boolean
    role?: boolean
    farmerCardNumber?: boolean
    companyName?: boolean
    address?: boolean
    contactNumber?: boolean
    krishiStars?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "emailVerified" | "image" | "password" | "role" | "farmerCardNumber" | "companyName" | "address" | "contactNumber" | "krishiStars" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cropFeeds?: boolean | User$cropFeedsArgs<ExtArgs>
    soilTestRequests?: boolean | User$soilTestRequestsArgs<ExtArgs>
    soilTestReports?: boolean | User$soilTestReportsArgs<ExtArgs>
    feedbacks?: boolean | User$feedbacksArgs<ExtArgs>
    givenFeedbacks?: boolean | User$givenFeedbacksArgs<ExtArgs>
    marketPrices?: boolean | User$marketPricesArgs<ExtArgs>
    biddings?: boolean | User$biddingsArgs<ExtArgs>
    bids?: boolean | User$bidsArgs<ExtArgs>
    solutions?: boolean | User$solutionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      cropFeeds: Prisma.$CropFeedPayload<ExtArgs>[]
      soilTestRequests: Prisma.$SoilTestRequestPayload<ExtArgs>[]
      soilTestReports: Prisma.$SoilTestReportPayload<ExtArgs>[]
      feedbacks: Prisma.$FeedbackPayload<ExtArgs>[]
      givenFeedbacks: Prisma.$FeedbackPayload<ExtArgs>[]
      marketPrices: Prisma.$MarketPricePayload<ExtArgs>[]
      biddings: Prisma.$BiddingPayload<ExtArgs>[]
      bids: Prisma.$BidPayload<ExtArgs>[]
      solutions: Prisma.$SolutionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      email: string
      emailVerified: Date | null
      image: string | null
      password: string | null
      role: $Enums.UserRole
      farmerCardNumber: string | null
      companyName: string | null
      address: string | null
      contactNumber: string | null
      krishiStars: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cropFeeds<T extends User$cropFeedsArgs<ExtArgs> = {}>(args?: Subset<T, User$cropFeedsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CropFeedPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    soilTestRequests<T extends User$soilTestRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$soilTestRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SoilTestRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    soilTestReports<T extends User$soilTestReportsArgs<ExtArgs> = {}>(args?: Subset<T, User$soilTestReportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SoilTestReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    feedbacks<T extends User$feedbacksArgs<ExtArgs> = {}>(args?: Subset<T, User$feedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    givenFeedbacks<T extends User$givenFeedbacksArgs<ExtArgs> = {}>(args?: Subset<T, User$givenFeedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    marketPrices<T extends User$marketPricesArgs<ExtArgs> = {}>(args?: Subset<T, User$marketPricesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarketPricePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    biddings<T extends User$biddingsArgs<ExtArgs> = {}>(args?: Subset<T, User$biddingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BiddingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    bids<T extends User$bidsArgs<ExtArgs> = {}>(args?: Subset<T, User$bidsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BidPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    solutions<T extends User$solutionsArgs<ExtArgs> = {}>(args?: Subset<T, User$solutionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SolutionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'DateTime'>
    readonly image: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly farmerCardNumber: FieldRef<"User", 'String'>
    readonly companyName: FieldRef<"User", 'String'>
    readonly address: FieldRef<"User", 'String'>
    readonly contactNumber: FieldRef<"User", 'String'>
    readonly krishiStars: FieldRef<"User", 'Int'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.cropFeeds
   */
  export type User$cropFeedsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CropFeed
     */
    select?: CropFeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CropFeed
     */
    omit?: CropFeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CropFeedInclude<ExtArgs> | null
    where?: CropFeedWhereInput
    orderBy?: CropFeedOrderByWithRelationInput | CropFeedOrderByWithRelationInput[]
    cursor?: CropFeedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CropFeedScalarFieldEnum | CropFeedScalarFieldEnum[]
  }

  /**
   * User.soilTestRequests
   */
  export type User$soilTestRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoilTestRequest
     */
    select?: SoilTestRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SoilTestRequest
     */
    omit?: SoilTestRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoilTestRequestInclude<ExtArgs> | null
    where?: SoilTestRequestWhereInput
    orderBy?: SoilTestRequestOrderByWithRelationInput | SoilTestRequestOrderByWithRelationInput[]
    cursor?: SoilTestRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SoilTestRequestScalarFieldEnum | SoilTestRequestScalarFieldEnum[]
  }

  /**
   * User.soilTestReports
   */
  export type User$soilTestReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoilTestReport
     */
    select?: SoilTestReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SoilTestReport
     */
    omit?: SoilTestReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoilTestReportInclude<ExtArgs> | null
    where?: SoilTestReportWhereInput
    orderBy?: SoilTestReportOrderByWithRelationInput | SoilTestReportOrderByWithRelationInput[]
    cursor?: SoilTestReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SoilTestReportScalarFieldEnum | SoilTestReportScalarFieldEnum[]
  }

  /**
   * User.feedbacks
   */
  export type User$feedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    cursor?: FeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * User.givenFeedbacks
   */
  export type User$givenFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    cursor?: FeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * User.marketPrices
   */
  export type User$marketPricesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketPrice
     */
    select?: MarketPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketPrice
     */
    omit?: MarketPriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketPriceInclude<ExtArgs> | null
    where?: MarketPriceWhereInput
    orderBy?: MarketPriceOrderByWithRelationInput | MarketPriceOrderByWithRelationInput[]
    cursor?: MarketPriceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MarketPriceScalarFieldEnum | MarketPriceScalarFieldEnum[]
  }

  /**
   * User.biddings
   */
  export type User$biddingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bidding
     */
    select?: BiddingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bidding
     */
    omit?: BiddingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingInclude<ExtArgs> | null
    where?: BiddingWhereInput
    orderBy?: BiddingOrderByWithRelationInput | BiddingOrderByWithRelationInput[]
    cursor?: BiddingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BiddingScalarFieldEnum | BiddingScalarFieldEnum[]
  }

  /**
   * User.bids
   */
  export type User$bidsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bid
     */
    select?: BidSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bid
     */
    omit?: BidOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BidInclude<ExtArgs> | null
    where?: BidWhereInput
    orderBy?: BidOrderByWithRelationInput | BidOrderByWithRelationInput[]
    cursor?: BidWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BidScalarFieldEnum | BidScalarFieldEnum[]
  }

  /**
   * User.solutions
   */
  export type User$solutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solution
     */
    select?: SolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Solution
     */
    omit?: SolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SolutionInclude<ExtArgs> | null
    where?: SolutionWhereInput
    orderBy?: SolutionOrderByWithRelationInput | SolutionOrderByWithRelationInput[]
    cursor?: SolutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SolutionScalarFieldEnum | SolutionScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model CropFeed
   */

  export type AggregateCropFeed = {
    _count: CropFeedCountAggregateOutputType | null
    _min: CropFeedMinAggregateOutputType | null
    _max: CropFeedMaxAggregateOutputType | null
  }

  export type CropFeedMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    imageUrl: string | null
    isAiQuery: boolean | null
    aiResponse: string | null
    wasHelpful: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type CropFeedMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    imageUrl: string | null
    isAiQuery: boolean | null
    aiResponse: string | null
    wasHelpful: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type CropFeedCountAggregateOutputType = {
    id: number
    title: number
    description: number
    imageUrl: number
    isAiQuery: number
    aiResponse: number
    wasHelpful: number
    createdAt: number
    updatedAt: number
    userId: number
    _all: number
  }


  export type CropFeedMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    imageUrl?: true
    isAiQuery?: true
    aiResponse?: true
    wasHelpful?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type CropFeedMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    imageUrl?: true
    isAiQuery?: true
    aiResponse?: true
    wasHelpful?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type CropFeedCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    imageUrl?: true
    isAiQuery?: true
    aiResponse?: true
    wasHelpful?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    _all?: true
  }

  export type CropFeedAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CropFeed to aggregate.
     */
    where?: CropFeedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CropFeeds to fetch.
     */
    orderBy?: CropFeedOrderByWithRelationInput | CropFeedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CropFeedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CropFeeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CropFeeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CropFeeds
    **/
    _count?: true | CropFeedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CropFeedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CropFeedMaxAggregateInputType
  }

  export type GetCropFeedAggregateType<T extends CropFeedAggregateArgs> = {
        [P in keyof T & keyof AggregateCropFeed]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCropFeed[P]>
      : GetScalarType<T[P], AggregateCropFeed[P]>
  }




  export type CropFeedGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CropFeedWhereInput
    orderBy?: CropFeedOrderByWithAggregationInput | CropFeedOrderByWithAggregationInput[]
    by: CropFeedScalarFieldEnum[] | CropFeedScalarFieldEnum
    having?: CropFeedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CropFeedCountAggregateInputType | true
    _min?: CropFeedMinAggregateInputType
    _max?: CropFeedMaxAggregateInputType
  }

  export type CropFeedGroupByOutputType = {
    id: string
    title: string
    description: string
    imageUrl: string | null
    isAiQuery: boolean
    aiResponse: string | null
    wasHelpful: boolean | null
    createdAt: Date
    updatedAt: Date
    userId: string
    _count: CropFeedCountAggregateOutputType | null
    _min: CropFeedMinAggregateOutputType | null
    _max: CropFeedMaxAggregateOutputType | null
  }

  type GetCropFeedGroupByPayload<T extends CropFeedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CropFeedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CropFeedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CropFeedGroupByOutputType[P]>
            : GetScalarType<T[P], CropFeedGroupByOutputType[P]>
        }
      >
    >


  export type CropFeedSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    imageUrl?: boolean
    isAiQuery?: boolean
    aiResponse?: boolean
    wasHelpful?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    comments?: boolean | CropFeed$commentsArgs<ExtArgs>
    solutions?: boolean | CropFeed$solutionsArgs<ExtArgs>
    _count?: boolean | CropFeedCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cropFeed"]>

  export type CropFeedSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    imageUrl?: boolean
    isAiQuery?: boolean
    aiResponse?: boolean
    wasHelpful?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cropFeed"]>

  export type CropFeedSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    imageUrl?: boolean
    isAiQuery?: boolean
    aiResponse?: boolean
    wasHelpful?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cropFeed"]>

  export type CropFeedSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    imageUrl?: boolean
    isAiQuery?: boolean
    aiResponse?: boolean
    wasHelpful?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
  }

  export type CropFeedOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "imageUrl" | "isAiQuery" | "aiResponse" | "wasHelpful" | "createdAt" | "updatedAt" | "userId", ExtArgs["result"]["cropFeed"]>
  export type CropFeedInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    comments?: boolean | CropFeed$commentsArgs<ExtArgs>
    solutions?: boolean | CropFeed$solutionsArgs<ExtArgs>
    _count?: boolean | CropFeedCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CropFeedIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CropFeedIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CropFeedPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CropFeed"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      comments: Prisma.$CommentPayload<ExtArgs>[]
      solutions: Prisma.$SolutionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      imageUrl: string | null
      isAiQuery: boolean
      aiResponse: string | null
      wasHelpful: boolean | null
      createdAt: Date
      updatedAt: Date
      userId: string
    }, ExtArgs["result"]["cropFeed"]>
    composites: {}
  }

  type CropFeedGetPayload<S extends boolean | null | undefined | CropFeedDefaultArgs> = $Result.GetResult<Prisma.$CropFeedPayload, S>

  type CropFeedCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CropFeedFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CropFeedCountAggregateInputType | true
    }

  export interface CropFeedDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CropFeed'], meta: { name: 'CropFeed' } }
    /**
     * Find zero or one CropFeed that matches the filter.
     * @param {CropFeedFindUniqueArgs} args - Arguments to find a CropFeed
     * @example
     * // Get one CropFeed
     * const cropFeed = await prisma.cropFeed.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CropFeedFindUniqueArgs>(args: SelectSubset<T, CropFeedFindUniqueArgs<ExtArgs>>): Prisma__CropFeedClient<$Result.GetResult<Prisma.$CropFeedPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CropFeed that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CropFeedFindUniqueOrThrowArgs} args - Arguments to find a CropFeed
     * @example
     * // Get one CropFeed
     * const cropFeed = await prisma.cropFeed.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CropFeedFindUniqueOrThrowArgs>(args: SelectSubset<T, CropFeedFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CropFeedClient<$Result.GetResult<Prisma.$CropFeedPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CropFeed that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CropFeedFindFirstArgs} args - Arguments to find a CropFeed
     * @example
     * // Get one CropFeed
     * const cropFeed = await prisma.cropFeed.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CropFeedFindFirstArgs>(args?: SelectSubset<T, CropFeedFindFirstArgs<ExtArgs>>): Prisma__CropFeedClient<$Result.GetResult<Prisma.$CropFeedPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CropFeed that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CropFeedFindFirstOrThrowArgs} args - Arguments to find a CropFeed
     * @example
     * // Get one CropFeed
     * const cropFeed = await prisma.cropFeed.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CropFeedFindFirstOrThrowArgs>(args?: SelectSubset<T, CropFeedFindFirstOrThrowArgs<ExtArgs>>): Prisma__CropFeedClient<$Result.GetResult<Prisma.$CropFeedPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CropFeeds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CropFeedFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CropFeeds
     * const cropFeeds = await prisma.cropFeed.findMany()
     * 
     * // Get first 10 CropFeeds
     * const cropFeeds = await prisma.cropFeed.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cropFeedWithIdOnly = await prisma.cropFeed.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CropFeedFindManyArgs>(args?: SelectSubset<T, CropFeedFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CropFeedPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CropFeed.
     * @param {CropFeedCreateArgs} args - Arguments to create a CropFeed.
     * @example
     * // Create one CropFeed
     * const CropFeed = await prisma.cropFeed.create({
     *   data: {
     *     // ... data to create a CropFeed
     *   }
     * })
     * 
     */
    create<T extends CropFeedCreateArgs>(args: SelectSubset<T, CropFeedCreateArgs<ExtArgs>>): Prisma__CropFeedClient<$Result.GetResult<Prisma.$CropFeedPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CropFeeds.
     * @param {CropFeedCreateManyArgs} args - Arguments to create many CropFeeds.
     * @example
     * // Create many CropFeeds
     * const cropFeed = await prisma.cropFeed.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CropFeedCreateManyArgs>(args?: SelectSubset<T, CropFeedCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CropFeeds and returns the data saved in the database.
     * @param {CropFeedCreateManyAndReturnArgs} args - Arguments to create many CropFeeds.
     * @example
     * // Create many CropFeeds
     * const cropFeed = await prisma.cropFeed.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CropFeeds and only return the `id`
     * const cropFeedWithIdOnly = await prisma.cropFeed.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CropFeedCreateManyAndReturnArgs>(args?: SelectSubset<T, CropFeedCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CropFeedPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CropFeed.
     * @param {CropFeedDeleteArgs} args - Arguments to delete one CropFeed.
     * @example
     * // Delete one CropFeed
     * const CropFeed = await prisma.cropFeed.delete({
     *   where: {
     *     // ... filter to delete one CropFeed
     *   }
     * })
     * 
     */
    delete<T extends CropFeedDeleteArgs>(args: SelectSubset<T, CropFeedDeleteArgs<ExtArgs>>): Prisma__CropFeedClient<$Result.GetResult<Prisma.$CropFeedPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CropFeed.
     * @param {CropFeedUpdateArgs} args - Arguments to update one CropFeed.
     * @example
     * // Update one CropFeed
     * const cropFeed = await prisma.cropFeed.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CropFeedUpdateArgs>(args: SelectSubset<T, CropFeedUpdateArgs<ExtArgs>>): Prisma__CropFeedClient<$Result.GetResult<Prisma.$CropFeedPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CropFeeds.
     * @param {CropFeedDeleteManyArgs} args - Arguments to filter CropFeeds to delete.
     * @example
     * // Delete a few CropFeeds
     * const { count } = await prisma.cropFeed.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CropFeedDeleteManyArgs>(args?: SelectSubset<T, CropFeedDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CropFeeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CropFeedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CropFeeds
     * const cropFeed = await prisma.cropFeed.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CropFeedUpdateManyArgs>(args: SelectSubset<T, CropFeedUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CropFeeds and returns the data updated in the database.
     * @param {CropFeedUpdateManyAndReturnArgs} args - Arguments to update many CropFeeds.
     * @example
     * // Update many CropFeeds
     * const cropFeed = await prisma.cropFeed.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CropFeeds and only return the `id`
     * const cropFeedWithIdOnly = await prisma.cropFeed.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CropFeedUpdateManyAndReturnArgs>(args: SelectSubset<T, CropFeedUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CropFeedPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CropFeed.
     * @param {CropFeedUpsertArgs} args - Arguments to update or create a CropFeed.
     * @example
     * // Update or create a CropFeed
     * const cropFeed = await prisma.cropFeed.upsert({
     *   create: {
     *     // ... data to create a CropFeed
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CropFeed we want to update
     *   }
     * })
     */
    upsert<T extends CropFeedUpsertArgs>(args: SelectSubset<T, CropFeedUpsertArgs<ExtArgs>>): Prisma__CropFeedClient<$Result.GetResult<Prisma.$CropFeedPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CropFeeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CropFeedCountArgs} args - Arguments to filter CropFeeds to count.
     * @example
     * // Count the number of CropFeeds
     * const count = await prisma.cropFeed.count({
     *   where: {
     *     // ... the filter for the CropFeeds we want to count
     *   }
     * })
    **/
    count<T extends CropFeedCountArgs>(
      args?: Subset<T, CropFeedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CropFeedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CropFeed.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CropFeedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CropFeedAggregateArgs>(args: Subset<T, CropFeedAggregateArgs>): Prisma.PrismaPromise<GetCropFeedAggregateType<T>>

    /**
     * Group by CropFeed.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CropFeedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CropFeedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CropFeedGroupByArgs['orderBy'] }
        : { orderBy?: CropFeedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CropFeedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCropFeedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CropFeed model
   */
  readonly fields: CropFeedFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CropFeed.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CropFeedClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    comments<T extends CropFeed$commentsArgs<ExtArgs> = {}>(args?: Subset<T, CropFeed$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    solutions<T extends CropFeed$solutionsArgs<ExtArgs> = {}>(args?: Subset<T, CropFeed$solutionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SolutionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CropFeed model
   */
  interface CropFeedFieldRefs {
    readonly id: FieldRef<"CropFeed", 'String'>
    readonly title: FieldRef<"CropFeed", 'String'>
    readonly description: FieldRef<"CropFeed", 'String'>
    readonly imageUrl: FieldRef<"CropFeed", 'String'>
    readonly isAiQuery: FieldRef<"CropFeed", 'Boolean'>
    readonly aiResponse: FieldRef<"CropFeed", 'String'>
    readonly wasHelpful: FieldRef<"CropFeed", 'Boolean'>
    readonly createdAt: FieldRef<"CropFeed", 'DateTime'>
    readonly updatedAt: FieldRef<"CropFeed", 'DateTime'>
    readonly userId: FieldRef<"CropFeed", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CropFeed findUnique
   */
  export type CropFeedFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CropFeed
     */
    select?: CropFeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CropFeed
     */
    omit?: CropFeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CropFeedInclude<ExtArgs> | null
    /**
     * Filter, which CropFeed to fetch.
     */
    where: CropFeedWhereUniqueInput
  }

  /**
   * CropFeed findUniqueOrThrow
   */
  export type CropFeedFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CropFeed
     */
    select?: CropFeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CropFeed
     */
    omit?: CropFeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CropFeedInclude<ExtArgs> | null
    /**
     * Filter, which CropFeed to fetch.
     */
    where: CropFeedWhereUniqueInput
  }

  /**
   * CropFeed findFirst
   */
  export type CropFeedFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CropFeed
     */
    select?: CropFeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CropFeed
     */
    omit?: CropFeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CropFeedInclude<ExtArgs> | null
    /**
     * Filter, which CropFeed to fetch.
     */
    where?: CropFeedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CropFeeds to fetch.
     */
    orderBy?: CropFeedOrderByWithRelationInput | CropFeedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CropFeeds.
     */
    cursor?: CropFeedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CropFeeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CropFeeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CropFeeds.
     */
    distinct?: CropFeedScalarFieldEnum | CropFeedScalarFieldEnum[]
  }

  /**
   * CropFeed findFirstOrThrow
   */
  export type CropFeedFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CropFeed
     */
    select?: CropFeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CropFeed
     */
    omit?: CropFeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CropFeedInclude<ExtArgs> | null
    /**
     * Filter, which CropFeed to fetch.
     */
    where?: CropFeedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CropFeeds to fetch.
     */
    orderBy?: CropFeedOrderByWithRelationInput | CropFeedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CropFeeds.
     */
    cursor?: CropFeedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CropFeeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CropFeeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CropFeeds.
     */
    distinct?: CropFeedScalarFieldEnum | CropFeedScalarFieldEnum[]
  }

  /**
   * CropFeed findMany
   */
  export type CropFeedFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CropFeed
     */
    select?: CropFeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CropFeed
     */
    omit?: CropFeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CropFeedInclude<ExtArgs> | null
    /**
     * Filter, which CropFeeds to fetch.
     */
    where?: CropFeedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CropFeeds to fetch.
     */
    orderBy?: CropFeedOrderByWithRelationInput | CropFeedOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CropFeeds.
     */
    cursor?: CropFeedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CropFeeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CropFeeds.
     */
    skip?: number
    distinct?: CropFeedScalarFieldEnum | CropFeedScalarFieldEnum[]
  }

  /**
   * CropFeed create
   */
  export type CropFeedCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CropFeed
     */
    select?: CropFeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CropFeed
     */
    omit?: CropFeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CropFeedInclude<ExtArgs> | null
    /**
     * The data needed to create a CropFeed.
     */
    data: XOR<CropFeedCreateInput, CropFeedUncheckedCreateInput>
  }

  /**
   * CropFeed createMany
   */
  export type CropFeedCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CropFeeds.
     */
    data: CropFeedCreateManyInput | CropFeedCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CropFeed createManyAndReturn
   */
  export type CropFeedCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CropFeed
     */
    select?: CropFeedSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CropFeed
     */
    omit?: CropFeedOmit<ExtArgs> | null
    /**
     * The data used to create many CropFeeds.
     */
    data: CropFeedCreateManyInput | CropFeedCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CropFeedIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CropFeed update
   */
  export type CropFeedUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CropFeed
     */
    select?: CropFeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CropFeed
     */
    omit?: CropFeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CropFeedInclude<ExtArgs> | null
    /**
     * The data needed to update a CropFeed.
     */
    data: XOR<CropFeedUpdateInput, CropFeedUncheckedUpdateInput>
    /**
     * Choose, which CropFeed to update.
     */
    where: CropFeedWhereUniqueInput
  }

  /**
   * CropFeed updateMany
   */
  export type CropFeedUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CropFeeds.
     */
    data: XOR<CropFeedUpdateManyMutationInput, CropFeedUncheckedUpdateManyInput>
    /**
     * Filter which CropFeeds to update
     */
    where?: CropFeedWhereInput
    /**
     * Limit how many CropFeeds to update.
     */
    limit?: number
  }

  /**
   * CropFeed updateManyAndReturn
   */
  export type CropFeedUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CropFeed
     */
    select?: CropFeedSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CropFeed
     */
    omit?: CropFeedOmit<ExtArgs> | null
    /**
     * The data used to update CropFeeds.
     */
    data: XOR<CropFeedUpdateManyMutationInput, CropFeedUncheckedUpdateManyInput>
    /**
     * Filter which CropFeeds to update
     */
    where?: CropFeedWhereInput
    /**
     * Limit how many CropFeeds to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CropFeedIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CropFeed upsert
   */
  export type CropFeedUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CropFeed
     */
    select?: CropFeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CropFeed
     */
    omit?: CropFeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CropFeedInclude<ExtArgs> | null
    /**
     * The filter to search for the CropFeed to update in case it exists.
     */
    where: CropFeedWhereUniqueInput
    /**
     * In case the CropFeed found by the `where` argument doesn't exist, create a new CropFeed with this data.
     */
    create: XOR<CropFeedCreateInput, CropFeedUncheckedCreateInput>
    /**
     * In case the CropFeed was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CropFeedUpdateInput, CropFeedUncheckedUpdateInput>
  }

  /**
   * CropFeed delete
   */
  export type CropFeedDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CropFeed
     */
    select?: CropFeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CropFeed
     */
    omit?: CropFeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CropFeedInclude<ExtArgs> | null
    /**
     * Filter which CropFeed to delete.
     */
    where: CropFeedWhereUniqueInput
  }

  /**
   * CropFeed deleteMany
   */
  export type CropFeedDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CropFeeds to delete
     */
    where?: CropFeedWhereInput
    /**
     * Limit how many CropFeeds to delete.
     */
    limit?: number
  }

  /**
   * CropFeed.comments
   */
  export type CropFeed$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * CropFeed.solutions
   */
  export type CropFeed$solutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solution
     */
    select?: SolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Solution
     */
    omit?: SolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SolutionInclude<ExtArgs> | null
    where?: SolutionWhereInput
    orderBy?: SolutionOrderByWithRelationInput | SolutionOrderByWithRelationInput[]
    cursor?: SolutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SolutionScalarFieldEnum | SolutionScalarFieldEnum[]
  }

  /**
   * CropFeed without action
   */
  export type CropFeedDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CropFeed
     */
    select?: CropFeedSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CropFeed
     */
    omit?: CropFeedOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CropFeedInclude<ExtArgs> | null
  }


  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentMinAggregateOutputType = {
    id: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
    cropFeedId: string | null
    userId: string | null
  }

  export type CommentMaxAggregateOutputType = {
    id: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
    cropFeedId: string | null
    userId: string | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    content: number
    createdAt: number
    updatedAt: number
    cropFeedId: number
    userId: number
    _all: number
  }


  export type CommentMinAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    cropFeedId?: true
    userId?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    cropFeedId?: true
    userId?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    cropFeedId?: true
    userId?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: string
    content: string
    createdAt: Date
    updatedAt: Date
    cropFeedId: string
    userId: string
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    cropFeedId?: boolean
    userId?: boolean
    cropFeed?: boolean | CropFeedDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    cropFeedId?: boolean
    userId?: boolean
    cropFeed?: boolean | CropFeedDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    cropFeedId?: boolean
    userId?: boolean
    cropFeed?: boolean | CropFeedDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectScalar = {
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    cropFeedId?: boolean
    userId?: boolean
  }

  export type CommentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "content" | "createdAt" | "updatedAt" | "cropFeedId" | "userId", ExtArgs["result"]["comment"]>
  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cropFeed?: boolean | CropFeedDefaultArgs<ExtArgs>
  }
  export type CommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cropFeed?: boolean | CropFeedDefaultArgs<ExtArgs>
  }
  export type CommentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cropFeed?: boolean | CropFeedDefaultArgs<ExtArgs>
  }

  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      cropFeed: Prisma.$CropFeedPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      createdAt: Date
      updatedAt: Date
      cropFeedId: string
      userId: string
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentFindUniqueArgs>(args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentFindFirstArgs>(args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommentFindManyArgs>(args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
     */
    create<T extends CommentCreateArgs>(args: SelectSubset<T, CommentCreateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Comments.
     * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentCreateManyArgs>(args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Comments and returns the data saved in the database.
     * @param {CommentCreateManyAndReturnArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommentCreateManyAndReturnArgs>(args?: SelectSubset<T, CommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
     */
    delete<T extends CommentDeleteArgs>(args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentUpdateArgs>(args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentDeleteManyArgs>(args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentUpdateManyArgs>(args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments and returns the data updated in the database.
     * @param {CommentUpdateManyAndReturnArgs} args - Arguments to update many Comments.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CommentUpdateManyAndReturnArgs>(args: SelectSubset<T, CommentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends CommentUpsertArgs>(args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cropFeed<T extends CropFeedDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CropFeedDefaultArgs<ExtArgs>>): Prisma__CropFeedClient<$Result.GetResult<Prisma.$CropFeedPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comment model
   */
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'String'>
    readonly content: FieldRef<"Comment", 'String'>
    readonly createdAt: FieldRef<"Comment", 'DateTime'>
    readonly updatedAt: FieldRef<"Comment", 'DateTime'>
    readonly cropFeedId: FieldRef<"Comment", 'String'>
    readonly userId: FieldRef<"Comment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comment createManyAndReturn
   */
  export type CommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
  }

  /**
   * Comment updateManyAndReturn
   */
  export type CommentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
    /**
     * Limit how many Comments to delete.
     */
    limit?: number
  }

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Comment
     */
    omit?: CommentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
  }


  /**
   * Model SoilTestRequest
   */

  export type AggregateSoilTestRequest = {
    _count: SoilTestRequestCountAggregateOutputType | null
    _min: SoilTestRequestMinAggregateOutputType | null
    _max: SoilTestRequestMaxAggregateOutputType | null
  }

  export type SoilTestRequestMinAggregateOutputType = {
    id: string | null
    location: string | null
    contactNumber: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    farmerId: string | null
  }

  export type SoilTestRequestMaxAggregateOutputType = {
    id: string | null
    location: string | null
    contactNumber: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    farmerId: string | null
  }

  export type SoilTestRequestCountAggregateOutputType = {
    id: number
    location: number
    contactNumber: number
    status: number
    createdAt: number
    updatedAt: number
    farmerId: number
    _all: number
  }


  export type SoilTestRequestMinAggregateInputType = {
    id?: true
    location?: true
    contactNumber?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    farmerId?: true
  }

  export type SoilTestRequestMaxAggregateInputType = {
    id?: true
    location?: true
    contactNumber?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    farmerId?: true
  }

  export type SoilTestRequestCountAggregateInputType = {
    id?: true
    location?: true
    contactNumber?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    farmerId?: true
    _all?: true
  }

  export type SoilTestRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SoilTestRequest to aggregate.
     */
    where?: SoilTestRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SoilTestRequests to fetch.
     */
    orderBy?: SoilTestRequestOrderByWithRelationInput | SoilTestRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SoilTestRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SoilTestRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SoilTestRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SoilTestRequests
    **/
    _count?: true | SoilTestRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SoilTestRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SoilTestRequestMaxAggregateInputType
  }

  export type GetSoilTestRequestAggregateType<T extends SoilTestRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateSoilTestRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSoilTestRequest[P]>
      : GetScalarType<T[P], AggregateSoilTestRequest[P]>
  }




  export type SoilTestRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SoilTestRequestWhereInput
    orderBy?: SoilTestRequestOrderByWithAggregationInput | SoilTestRequestOrderByWithAggregationInput[]
    by: SoilTestRequestScalarFieldEnum[] | SoilTestRequestScalarFieldEnum
    having?: SoilTestRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SoilTestRequestCountAggregateInputType | true
    _min?: SoilTestRequestMinAggregateInputType
    _max?: SoilTestRequestMaxAggregateInputType
  }

  export type SoilTestRequestGroupByOutputType = {
    id: string
    location: string
    contactNumber: string
    status: string
    createdAt: Date
    updatedAt: Date
    farmerId: string
    _count: SoilTestRequestCountAggregateOutputType | null
    _min: SoilTestRequestMinAggregateOutputType | null
    _max: SoilTestRequestMaxAggregateOutputType | null
  }

  type GetSoilTestRequestGroupByPayload<T extends SoilTestRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SoilTestRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SoilTestRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SoilTestRequestGroupByOutputType[P]>
            : GetScalarType<T[P], SoilTestRequestGroupByOutputType[P]>
        }
      >
    >


  export type SoilTestRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    location?: boolean
    contactNumber?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    farmerId?: boolean
    farmer?: boolean | UserDefaultArgs<ExtArgs>
    reports?: boolean | SoilTestRequest$reportsArgs<ExtArgs>
    _count?: boolean | SoilTestRequestCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["soilTestRequest"]>

  export type SoilTestRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    location?: boolean
    contactNumber?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    farmerId?: boolean
    farmer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["soilTestRequest"]>

  export type SoilTestRequestSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    location?: boolean
    contactNumber?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    farmerId?: boolean
    farmer?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["soilTestRequest"]>

  export type SoilTestRequestSelectScalar = {
    id?: boolean
    location?: boolean
    contactNumber?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    farmerId?: boolean
  }

  export type SoilTestRequestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "location" | "contactNumber" | "status" | "createdAt" | "updatedAt" | "farmerId", ExtArgs["result"]["soilTestRequest"]>
  export type SoilTestRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    farmer?: boolean | UserDefaultArgs<ExtArgs>
    reports?: boolean | SoilTestRequest$reportsArgs<ExtArgs>
    _count?: boolean | SoilTestRequestCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SoilTestRequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    farmer?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SoilTestRequestIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    farmer?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SoilTestRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SoilTestRequest"
    objects: {
      farmer: Prisma.$UserPayload<ExtArgs>
      reports: Prisma.$SoilTestReportPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      location: string
      contactNumber: string
      status: string
      createdAt: Date
      updatedAt: Date
      farmerId: string
    }, ExtArgs["result"]["soilTestRequest"]>
    composites: {}
  }

  type SoilTestRequestGetPayload<S extends boolean | null | undefined | SoilTestRequestDefaultArgs> = $Result.GetResult<Prisma.$SoilTestRequestPayload, S>

  type SoilTestRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SoilTestRequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SoilTestRequestCountAggregateInputType | true
    }

  export interface SoilTestRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SoilTestRequest'], meta: { name: 'SoilTestRequest' } }
    /**
     * Find zero or one SoilTestRequest that matches the filter.
     * @param {SoilTestRequestFindUniqueArgs} args - Arguments to find a SoilTestRequest
     * @example
     * // Get one SoilTestRequest
     * const soilTestRequest = await prisma.soilTestRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SoilTestRequestFindUniqueArgs>(args: SelectSubset<T, SoilTestRequestFindUniqueArgs<ExtArgs>>): Prisma__SoilTestRequestClient<$Result.GetResult<Prisma.$SoilTestRequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SoilTestRequest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SoilTestRequestFindUniqueOrThrowArgs} args - Arguments to find a SoilTestRequest
     * @example
     * // Get one SoilTestRequest
     * const soilTestRequest = await prisma.soilTestRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SoilTestRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, SoilTestRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SoilTestRequestClient<$Result.GetResult<Prisma.$SoilTestRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SoilTestRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoilTestRequestFindFirstArgs} args - Arguments to find a SoilTestRequest
     * @example
     * // Get one SoilTestRequest
     * const soilTestRequest = await prisma.soilTestRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SoilTestRequestFindFirstArgs>(args?: SelectSubset<T, SoilTestRequestFindFirstArgs<ExtArgs>>): Prisma__SoilTestRequestClient<$Result.GetResult<Prisma.$SoilTestRequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SoilTestRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoilTestRequestFindFirstOrThrowArgs} args - Arguments to find a SoilTestRequest
     * @example
     * // Get one SoilTestRequest
     * const soilTestRequest = await prisma.soilTestRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SoilTestRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, SoilTestRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__SoilTestRequestClient<$Result.GetResult<Prisma.$SoilTestRequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SoilTestRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoilTestRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SoilTestRequests
     * const soilTestRequests = await prisma.soilTestRequest.findMany()
     * 
     * // Get first 10 SoilTestRequests
     * const soilTestRequests = await prisma.soilTestRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const soilTestRequestWithIdOnly = await prisma.soilTestRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SoilTestRequestFindManyArgs>(args?: SelectSubset<T, SoilTestRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SoilTestRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SoilTestRequest.
     * @param {SoilTestRequestCreateArgs} args - Arguments to create a SoilTestRequest.
     * @example
     * // Create one SoilTestRequest
     * const SoilTestRequest = await prisma.soilTestRequest.create({
     *   data: {
     *     // ... data to create a SoilTestRequest
     *   }
     * })
     * 
     */
    create<T extends SoilTestRequestCreateArgs>(args: SelectSubset<T, SoilTestRequestCreateArgs<ExtArgs>>): Prisma__SoilTestRequestClient<$Result.GetResult<Prisma.$SoilTestRequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SoilTestRequests.
     * @param {SoilTestRequestCreateManyArgs} args - Arguments to create many SoilTestRequests.
     * @example
     * // Create many SoilTestRequests
     * const soilTestRequest = await prisma.soilTestRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SoilTestRequestCreateManyArgs>(args?: SelectSubset<T, SoilTestRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SoilTestRequests and returns the data saved in the database.
     * @param {SoilTestRequestCreateManyAndReturnArgs} args - Arguments to create many SoilTestRequests.
     * @example
     * // Create many SoilTestRequests
     * const soilTestRequest = await prisma.soilTestRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SoilTestRequests and only return the `id`
     * const soilTestRequestWithIdOnly = await prisma.soilTestRequest.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SoilTestRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, SoilTestRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SoilTestRequestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SoilTestRequest.
     * @param {SoilTestRequestDeleteArgs} args - Arguments to delete one SoilTestRequest.
     * @example
     * // Delete one SoilTestRequest
     * const SoilTestRequest = await prisma.soilTestRequest.delete({
     *   where: {
     *     // ... filter to delete one SoilTestRequest
     *   }
     * })
     * 
     */
    delete<T extends SoilTestRequestDeleteArgs>(args: SelectSubset<T, SoilTestRequestDeleteArgs<ExtArgs>>): Prisma__SoilTestRequestClient<$Result.GetResult<Prisma.$SoilTestRequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SoilTestRequest.
     * @param {SoilTestRequestUpdateArgs} args - Arguments to update one SoilTestRequest.
     * @example
     * // Update one SoilTestRequest
     * const soilTestRequest = await prisma.soilTestRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SoilTestRequestUpdateArgs>(args: SelectSubset<T, SoilTestRequestUpdateArgs<ExtArgs>>): Prisma__SoilTestRequestClient<$Result.GetResult<Prisma.$SoilTestRequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SoilTestRequests.
     * @param {SoilTestRequestDeleteManyArgs} args - Arguments to filter SoilTestRequests to delete.
     * @example
     * // Delete a few SoilTestRequests
     * const { count } = await prisma.soilTestRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SoilTestRequestDeleteManyArgs>(args?: SelectSubset<T, SoilTestRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SoilTestRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoilTestRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SoilTestRequests
     * const soilTestRequest = await prisma.soilTestRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SoilTestRequestUpdateManyArgs>(args: SelectSubset<T, SoilTestRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SoilTestRequests and returns the data updated in the database.
     * @param {SoilTestRequestUpdateManyAndReturnArgs} args - Arguments to update many SoilTestRequests.
     * @example
     * // Update many SoilTestRequests
     * const soilTestRequest = await prisma.soilTestRequest.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SoilTestRequests and only return the `id`
     * const soilTestRequestWithIdOnly = await prisma.soilTestRequest.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SoilTestRequestUpdateManyAndReturnArgs>(args: SelectSubset<T, SoilTestRequestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SoilTestRequestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SoilTestRequest.
     * @param {SoilTestRequestUpsertArgs} args - Arguments to update or create a SoilTestRequest.
     * @example
     * // Update or create a SoilTestRequest
     * const soilTestRequest = await prisma.soilTestRequest.upsert({
     *   create: {
     *     // ... data to create a SoilTestRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SoilTestRequest we want to update
     *   }
     * })
     */
    upsert<T extends SoilTestRequestUpsertArgs>(args: SelectSubset<T, SoilTestRequestUpsertArgs<ExtArgs>>): Prisma__SoilTestRequestClient<$Result.GetResult<Prisma.$SoilTestRequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SoilTestRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoilTestRequestCountArgs} args - Arguments to filter SoilTestRequests to count.
     * @example
     * // Count the number of SoilTestRequests
     * const count = await prisma.soilTestRequest.count({
     *   where: {
     *     // ... the filter for the SoilTestRequests we want to count
     *   }
     * })
    **/
    count<T extends SoilTestRequestCountArgs>(
      args?: Subset<T, SoilTestRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SoilTestRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SoilTestRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoilTestRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SoilTestRequestAggregateArgs>(args: Subset<T, SoilTestRequestAggregateArgs>): Prisma.PrismaPromise<GetSoilTestRequestAggregateType<T>>

    /**
     * Group by SoilTestRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoilTestRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SoilTestRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SoilTestRequestGroupByArgs['orderBy'] }
        : { orderBy?: SoilTestRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SoilTestRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSoilTestRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SoilTestRequest model
   */
  readonly fields: SoilTestRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SoilTestRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SoilTestRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    farmer<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    reports<T extends SoilTestRequest$reportsArgs<ExtArgs> = {}>(args?: Subset<T, SoilTestRequest$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SoilTestReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SoilTestRequest model
   */
  interface SoilTestRequestFieldRefs {
    readonly id: FieldRef<"SoilTestRequest", 'String'>
    readonly location: FieldRef<"SoilTestRequest", 'String'>
    readonly contactNumber: FieldRef<"SoilTestRequest", 'String'>
    readonly status: FieldRef<"SoilTestRequest", 'String'>
    readonly createdAt: FieldRef<"SoilTestRequest", 'DateTime'>
    readonly updatedAt: FieldRef<"SoilTestRequest", 'DateTime'>
    readonly farmerId: FieldRef<"SoilTestRequest", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SoilTestRequest findUnique
   */
  export type SoilTestRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoilTestRequest
     */
    select?: SoilTestRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SoilTestRequest
     */
    omit?: SoilTestRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoilTestRequestInclude<ExtArgs> | null
    /**
     * Filter, which SoilTestRequest to fetch.
     */
    where: SoilTestRequestWhereUniqueInput
  }

  /**
   * SoilTestRequest findUniqueOrThrow
   */
  export type SoilTestRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoilTestRequest
     */
    select?: SoilTestRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SoilTestRequest
     */
    omit?: SoilTestRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoilTestRequestInclude<ExtArgs> | null
    /**
     * Filter, which SoilTestRequest to fetch.
     */
    where: SoilTestRequestWhereUniqueInput
  }

  /**
   * SoilTestRequest findFirst
   */
  export type SoilTestRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoilTestRequest
     */
    select?: SoilTestRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SoilTestRequest
     */
    omit?: SoilTestRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoilTestRequestInclude<ExtArgs> | null
    /**
     * Filter, which SoilTestRequest to fetch.
     */
    where?: SoilTestRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SoilTestRequests to fetch.
     */
    orderBy?: SoilTestRequestOrderByWithRelationInput | SoilTestRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SoilTestRequests.
     */
    cursor?: SoilTestRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SoilTestRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SoilTestRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SoilTestRequests.
     */
    distinct?: SoilTestRequestScalarFieldEnum | SoilTestRequestScalarFieldEnum[]
  }

  /**
   * SoilTestRequest findFirstOrThrow
   */
  export type SoilTestRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoilTestRequest
     */
    select?: SoilTestRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SoilTestRequest
     */
    omit?: SoilTestRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoilTestRequestInclude<ExtArgs> | null
    /**
     * Filter, which SoilTestRequest to fetch.
     */
    where?: SoilTestRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SoilTestRequests to fetch.
     */
    orderBy?: SoilTestRequestOrderByWithRelationInput | SoilTestRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SoilTestRequests.
     */
    cursor?: SoilTestRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SoilTestRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SoilTestRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SoilTestRequests.
     */
    distinct?: SoilTestRequestScalarFieldEnum | SoilTestRequestScalarFieldEnum[]
  }

  /**
   * SoilTestRequest findMany
   */
  export type SoilTestRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoilTestRequest
     */
    select?: SoilTestRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SoilTestRequest
     */
    omit?: SoilTestRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoilTestRequestInclude<ExtArgs> | null
    /**
     * Filter, which SoilTestRequests to fetch.
     */
    where?: SoilTestRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SoilTestRequests to fetch.
     */
    orderBy?: SoilTestRequestOrderByWithRelationInput | SoilTestRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SoilTestRequests.
     */
    cursor?: SoilTestRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SoilTestRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SoilTestRequests.
     */
    skip?: number
    distinct?: SoilTestRequestScalarFieldEnum | SoilTestRequestScalarFieldEnum[]
  }

  /**
   * SoilTestRequest create
   */
  export type SoilTestRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoilTestRequest
     */
    select?: SoilTestRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SoilTestRequest
     */
    omit?: SoilTestRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoilTestRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a SoilTestRequest.
     */
    data: XOR<SoilTestRequestCreateInput, SoilTestRequestUncheckedCreateInput>
  }

  /**
   * SoilTestRequest createMany
   */
  export type SoilTestRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SoilTestRequests.
     */
    data: SoilTestRequestCreateManyInput | SoilTestRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SoilTestRequest createManyAndReturn
   */
  export type SoilTestRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoilTestRequest
     */
    select?: SoilTestRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SoilTestRequest
     */
    omit?: SoilTestRequestOmit<ExtArgs> | null
    /**
     * The data used to create many SoilTestRequests.
     */
    data: SoilTestRequestCreateManyInput | SoilTestRequestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoilTestRequestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SoilTestRequest update
   */
  export type SoilTestRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoilTestRequest
     */
    select?: SoilTestRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SoilTestRequest
     */
    omit?: SoilTestRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoilTestRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a SoilTestRequest.
     */
    data: XOR<SoilTestRequestUpdateInput, SoilTestRequestUncheckedUpdateInput>
    /**
     * Choose, which SoilTestRequest to update.
     */
    where: SoilTestRequestWhereUniqueInput
  }

  /**
   * SoilTestRequest updateMany
   */
  export type SoilTestRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SoilTestRequests.
     */
    data: XOR<SoilTestRequestUpdateManyMutationInput, SoilTestRequestUncheckedUpdateManyInput>
    /**
     * Filter which SoilTestRequests to update
     */
    where?: SoilTestRequestWhereInput
    /**
     * Limit how many SoilTestRequests to update.
     */
    limit?: number
  }

  /**
   * SoilTestRequest updateManyAndReturn
   */
  export type SoilTestRequestUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoilTestRequest
     */
    select?: SoilTestRequestSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SoilTestRequest
     */
    omit?: SoilTestRequestOmit<ExtArgs> | null
    /**
     * The data used to update SoilTestRequests.
     */
    data: XOR<SoilTestRequestUpdateManyMutationInput, SoilTestRequestUncheckedUpdateManyInput>
    /**
     * Filter which SoilTestRequests to update
     */
    where?: SoilTestRequestWhereInput
    /**
     * Limit how many SoilTestRequests to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoilTestRequestIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SoilTestRequest upsert
   */
  export type SoilTestRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoilTestRequest
     */
    select?: SoilTestRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SoilTestRequest
     */
    omit?: SoilTestRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoilTestRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the SoilTestRequest to update in case it exists.
     */
    where: SoilTestRequestWhereUniqueInput
    /**
     * In case the SoilTestRequest found by the `where` argument doesn't exist, create a new SoilTestRequest with this data.
     */
    create: XOR<SoilTestRequestCreateInput, SoilTestRequestUncheckedCreateInput>
    /**
     * In case the SoilTestRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SoilTestRequestUpdateInput, SoilTestRequestUncheckedUpdateInput>
  }

  /**
   * SoilTestRequest delete
   */
  export type SoilTestRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoilTestRequest
     */
    select?: SoilTestRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SoilTestRequest
     */
    omit?: SoilTestRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoilTestRequestInclude<ExtArgs> | null
    /**
     * Filter which SoilTestRequest to delete.
     */
    where: SoilTestRequestWhereUniqueInput
  }

  /**
   * SoilTestRequest deleteMany
   */
  export type SoilTestRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SoilTestRequests to delete
     */
    where?: SoilTestRequestWhereInput
    /**
     * Limit how many SoilTestRequests to delete.
     */
    limit?: number
  }

  /**
   * SoilTestRequest.reports
   */
  export type SoilTestRequest$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoilTestReport
     */
    select?: SoilTestReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SoilTestReport
     */
    omit?: SoilTestReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoilTestReportInclude<ExtArgs> | null
    where?: SoilTestReportWhereInput
    orderBy?: SoilTestReportOrderByWithRelationInput | SoilTestReportOrderByWithRelationInput[]
    cursor?: SoilTestReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SoilTestReportScalarFieldEnum | SoilTestReportScalarFieldEnum[]
  }

  /**
   * SoilTestRequest without action
   */
  export type SoilTestRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoilTestRequest
     */
    select?: SoilTestRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SoilTestRequest
     */
    omit?: SoilTestRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoilTestRequestInclude<ExtArgs> | null
  }


  /**
   * Model SoilTestReport
   */

  export type AggregateSoilTestReport = {
    _count: SoilTestReportCountAggregateOutputType | null
    _min: SoilTestReportMinAggregateOutputType | null
    _max: SoilTestReportMaxAggregateOutputType | null
  }

  export type SoilTestReportMinAggregateOutputType = {
    id: string | null
    reportUrl: string | null
    soilCollectionUrl: string | null
    farmerPhotoUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
    requestId: string | null
    soilTesterId: string | null
  }

  export type SoilTestReportMaxAggregateOutputType = {
    id: string | null
    reportUrl: string | null
    soilCollectionUrl: string | null
    farmerPhotoUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
    requestId: string | null
    soilTesterId: string | null
  }

  export type SoilTestReportCountAggregateOutputType = {
    id: number
    reportUrl: number
    soilCollectionUrl: number
    farmerPhotoUrl: number
    createdAt: number
    updatedAt: number
    requestId: number
    soilTesterId: number
    _all: number
  }


  export type SoilTestReportMinAggregateInputType = {
    id?: true
    reportUrl?: true
    soilCollectionUrl?: true
    farmerPhotoUrl?: true
    createdAt?: true
    updatedAt?: true
    requestId?: true
    soilTesterId?: true
  }

  export type SoilTestReportMaxAggregateInputType = {
    id?: true
    reportUrl?: true
    soilCollectionUrl?: true
    farmerPhotoUrl?: true
    createdAt?: true
    updatedAt?: true
    requestId?: true
    soilTesterId?: true
  }

  export type SoilTestReportCountAggregateInputType = {
    id?: true
    reportUrl?: true
    soilCollectionUrl?: true
    farmerPhotoUrl?: true
    createdAt?: true
    updatedAt?: true
    requestId?: true
    soilTesterId?: true
    _all?: true
  }

  export type SoilTestReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SoilTestReport to aggregate.
     */
    where?: SoilTestReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SoilTestReports to fetch.
     */
    orderBy?: SoilTestReportOrderByWithRelationInput | SoilTestReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SoilTestReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SoilTestReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SoilTestReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SoilTestReports
    **/
    _count?: true | SoilTestReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SoilTestReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SoilTestReportMaxAggregateInputType
  }

  export type GetSoilTestReportAggregateType<T extends SoilTestReportAggregateArgs> = {
        [P in keyof T & keyof AggregateSoilTestReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSoilTestReport[P]>
      : GetScalarType<T[P], AggregateSoilTestReport[P]>
  }




  export type SoilTestReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SoilTestReportWhereInput
    orderBy?: SoilTestReportOrderByWithAggregationInput | SoilTestReportOrderByWithAggregationInput[]
    by: SoilTestReportScalarFieldEnum[] | SoilTestReportScalarFieldEnum
    having?: SoilTestReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SoilTestReportCountAggregateInputType | true
    _min?: SoilTestReportMinAggregateInputType
    _max?: SoilTestReportMaxAggregateInputType
  }

  export type SoilTestReportGroupByOutputType = {
    id: string
    reportUrl: string
    soilCollectionUrl: string
    farmerPhotoUrl: string
    createdAt: Date
    updatedAt: Date
    requestId: string
    soilTesterId: string
    _count: SoilTestReportCountAggregateOutputType | null
    _min: SoilTestReportMinAggregateOutputType | null
    _max: SoilTestReportMaxAggregateOutputType | null
  }

  type GetSoilTestReportGroupByPayload<T extends SoilTestReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SoilTestReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SoilTestReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SoilTestReportGroupByOutputType[P]>
            : GetScalarType<T[P], SoilTestReportGroupByOutputType[P]>
        }
      >
    >


  export type SoilTestReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportUrl?: boolean
    soilCollectionUrl?: boolean
    farmerPhotoUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    requestId?: boolean
    soilTesterId?: boolean
    request?: boolean | SoilTestRequestDefaultArgs<ExtArgs>
    soilTester?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["soilTestReport"]>

  export type SoilTestReportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportUrl?: boolean
    soilCollectionUrl?: boolean
    farmerPhotoUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    requestId?: boolean
    soilTesterId?: boolean
    request?: boolean | SoilTestRequestDefaultArgs<ExtArgs>
    soilTester?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["soilTestReport"]>

  export type SoilTestReportSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reportUrl?: boolean
    soilCollectionUrl?: boolean
    farmerPhotoUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    requestId?: boolean
    soilTesterId?: boolean
    request?: boolean | SoilTestRequestDefaultArgs<ExtArgs>
    soilTester?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["soilTestReport"]>

  export type SoilTestReportSelectScalar = {
    id?: boolean
    reportUrl?: boolean
    soilCollectionUrl?: boolean
    farmerPhotoUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    requestId?: boolean
    soilTesterId?: boolean
  }

  export type SoilTestReportOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "reportUrl" | "soilCollectionUrl" | "farmerPhotoUrl" | "createdAt" | "updatedAt" | "requestId" | "soilTesterId", ExtArgs["result"]["soilTestReport"]>
  export type SoilTestReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    request?: boolean | SoilTestRequestDefaultArgs<ExtArgs>
    soilTester?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SoilTestReportIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    request?: boolean | SoilTestRequestDefaultArgs<ExtArgs>
    soilTester?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SoilTestReportIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    request?: boolean | SoilTestRequestDefaultArgs<ExtArgs>
    soilTester?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SoilTestReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SoilTestReport"
    objects: {
      request: Prisma.$SoilTestRequestPayload<ExtArgs>
      soilTester: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      reportUrl: string
      soilCollectionUrl: string
      farmerPhotoUrl: string
      createdAt: Date
      updatedAt: Date
      requestId: string
      soilTesterId: string
    }, ExtArgs["result"]["soilTestReport"]>
    composites: {}
  }

  type SoilTestReportGetPayload<S extends boolean | null | undefined | SoilTestReportDefaultArgs> = $Result.GetResult<Prisma.$SoilTestReportPayload, S>

  type SoilTestReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SoilTestReportFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SoilTestReportCountAggregateInputType | true
    }

  export interface SoilTestReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SoilTestReport'], meta: { name: 'SoilTestReport' } }
    /**
     * Find zero or one SoilTestReport that matches the filter.
     * @param {SoilTestReportFindUniqueArgs} args - Arguments to find a SoilTestReport
     * @example
     * // Get one SoilTestReport
     * const soilTestReport = await prisma.soilTestReport.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SoilTestReportFindUniqueArgs>(args: SelectSubset<T, SoilTestReportFindUniqueArgs<ExtArgs>>): Prisma__SoilTestReportClient<$Result.GetResult<Prisma.$SoilTestReportPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SoilTestReport that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SoilTestReportFindUniqueOrThrowArgs} args - Arguments to find a SoilTestReport
     * @example
     * // Get one SoilTestReport
     * const soilTestReport = await prisma.soilTestReport.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SoilTestReportFindUniqueOrThrowArgs>(args: SelectSubset<T, SoilTestReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SoilTestReportClient<$Result.GetResult<Prisma.$SoilTestReportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SoilTestReport that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoilTestReportFindFirstArgs} args - Arguments to find a SoilTestReport
     * @example
     * // Get one SoilTestReport
     * const soilTestReport = await prisma.soilTestReport.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SoilTestReportFindFirstArgs>(args?: SelectSubset<T, SoilTestReportFindFirstArgs<ExtArgs>>): Prisma__SoilTestReportClient<$Result.GetResult<Prisma.$SoilTestReportPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SoilTestReport that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoilTestReportFindFirstOrThrowArgs} args - Arguments to find a SoilTestReport
     * @example
     * // Get one SoilTestReport
     * const soilTestReport = await prisma.soilTestReport.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SoilTestReportFindFirstOrThrowArgs>(args?: SelectSubset<T, SoilTestReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__SoilTestReportClient<$Result.GetResult<Prisma.$SoilTestReportPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SoilTestReports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoilTestReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SoilTestReports
     * const soilTestReports = await prisma.soilTestReport.findMany()
     * 
     * // Get first 10 SoilTestReports
     * const soilTestReports = await prisma.soilTestReport.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const soilTestReportWithIdOnly = await prisma.soilTestReport.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SoilTestReportFindManyArgs>(args?: SelectSubset<T, SoilTestReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SoilTestReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SoilTestReport.
     * @param {SoilTestReportCreateArgs} args - Arguments to create a SoilTestReport.
     * @example
     * // Create one SoilTestReport
     * const SoilTestReport = await prisma.soilTestReport.create({
     *   data: {
     *     // ... data to create a SoilTestReport
     *   }
     * })
     * 
     */
    create<T extends SoilTestReportCreateArgs>(args: SelectSubset<T, SoilTestReportCreateArgs<ExtArgs>>): Prisma__SoilTestReportClient<$Result.GetResult<Prisma.$SoilTestReportPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SoilTestReports.
     * @param {SoilTestReportCreateManyArgs} args - Arguments to create many SoilTestReports.
     * @example
     * // Create many SoilTestReports
     * const soilTestReport = await prisma.soilTestReport.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SoilTestReportCreateManyArgs>(args?: SelectSubset<T, SoilTestReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SoilTestReports and returns the data saved in the database.
     * @param {SoilTestReportCreateManyAndReturnArgs} args - Arguments to create many SoilTestReports.
     * @example
     * // Create many SoilTestReports
     * const soilTestReport = await prisma.soilTestReport.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SoilTestReports and only return the `id`
     * const soilTestReportWithIdOnly = await prisma.soilTestReport.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SoilTestReportCreateManyAndReturnArgs>(args?: SelectSubset<T, SoilTestReportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SoilTestReportPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SoilTestReport.
     * @param {SoilTestReportDeleteArgs} args - Arguments to delete one SoilTestReport.
     * @example
     * // Delete one SoilTestReport
     * const SoilTestReport = await prisma.soilTestReport.delete({
     *   where: {
     *     // ... filter to delete one SoilTestReport
     *   }
     * })
     * 
     */
    delete<T extends SoilTestReportDeleteArgs>(args: SelectSubset<T, SoilTestReportDeleteArgs<ExtArgs>>): Prisma__SoilTestReportClient<$Result.GetResult<Prisma.$SoilTestReportPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SoilTestReport.
     * @param {SoilTestReportUpdateArgs} args - Arguments to update one SoilTestReport.
     * @example
     * // Update one SoilTestReport
     * const soilTestReport = await prisma.soilTestReport.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SoilTestReportUpdateArgs>(args: SelectSubset<T, SoilTestReportUpdateArgs<ExtArgs>>): Prisma__SoilTestReportClient<$Result.GetResult<Prisma.$SoilTestReportPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SoilTestReports.
     * @param {SoilTestReportDeleteManyArgs} args - Arguments to filter SoilTestReports to delete.
     * @example
     * // Delete a few SoilTestReports
     * const { count } = await prisma.soilTestReport.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SoilTestReportDeleteManyArgs>(args?: SelectSubset<T, SoilTestReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SoilTestReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoilTestReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SoilTestReports
     * const soilTestReport = await prisma.soilTestReport.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SoilTestReportUpdateManyArgs>(args: SelectSubset<T, SoilTestReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SoilTestReports and returns the data updated in the database.
     * @param {SoilTestReportUpdateManyAndReturnArgs} args - Arguments to update many SoilTestReports.
     * @example
     * // Update many SoilTestReports
     * const soilTestReport = await prisma.soilTestReport.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SoilTestReports and only return the `id`
     * const soilTestReportWithIdOnly = await prisma.soilTestReport.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SoilTestReportUpdateManyAndReturnArgs>(args: SelectSubset<T, SoilTestReportUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SoilTestReportPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SoilTestReport.
     * @param {SoilTestReportUpsertArgs} args - Arguments to update or create a SoilTestReport.
     * @example
     * // Update or create a SoilTestReport
     * const soilTestReport = await prisma.soilTestReport.upsert({
     *   create: {
     *     // ... data to create a SoilTestReport
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SoilTestReport we want to update
     *   }
     * })
     */
    upsert<T extends SoilTestReportUpsertArgs>(args: SelectSubset<T, SoilTestReportUpsertArgs<ExtArgs>>): Prisma__SoilTestReportClient<$Result.GetResult<Prisma.$SoilTestReportPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SoilTestReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoilTestReportCountArgs} args - Arguments to filter SoilTestReports to count.
     * @example
     * // Count the number of SoilTestReports
     * const count = await prisma.soilTestReport.count({
     *   where: {
     *     // ... the filter for the SoilTestReports we want to count
     *   }
     * })
    **/
    count<T extends SoilTestReportCountArgs>(
      args?: Subset<T, SoilTestReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SoilTestReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SoilTestReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoilTestReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SoilTestReportAggregateArgs>(args: Subset<T, SoilTestReportAggregateArgs>): Prisma.PrismaPromise<GetSoilTestReportAggregateType<T>>

    /**
     * Group by SoilTestReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SoilTestReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SoilTestReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SoilTestReportGroupByArgs['orderBy'] }
        : { orderBy?: SoilTestReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SoilTestReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSoilTestReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SoilTestReport model
   */
  readonly fields: SoilTestReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SoilTestReport.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SoilTestReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    request<T extends SoilTestRequestDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SoilTestRequestDefaultArgs<ExtArgs>>): Prisma__SoilTestRequestClient<$Result.GetResult<Prisma.$SoilTestRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    soilTester<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SoilTestReport model
   */
  interface SoilTestReportFieldRefs {
    readonly id: FieldRef<"SoilTestReport", 'String'>
    readonly reportUrl: FieldRef<"SoilTestReport", 'String'>
    readonly soilCollectionUrl: FieldRef<"SoilTestReport", 'String'>
    readonly farmerPhotoUrl: FieldRef<"SoilTestReport", 'String'>
    readonly createdAt: FieldRef<"SoilTestReport", 'DateTime'>
    readonly updatedAt: FieldRef<"SoilTestReport", 'DateTime'>
    readonly requestId: FieldRef<"SoilTestReport", 'String'>
    readonly soilTesterId: FieldRef<"SoilTestReport", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SoilTestReport findUnique
   */
  export type SoilTestReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoilTestReport
     */
    select?: SoilTestReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SoilTestReport
     */
    omit?: SoilTestReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoilTestReportInclude<ExtArgs> | null
    /**
     * Filter, which SoilTestReport to fetch.
     */
    where: SoilTestReportWhereUniqueInput
  }

  /**
   * SoilTestReport findUniqueOrThrow
   */
  export type SoilTestReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoilTestReport
     */
    select?: SoilTestReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SoilTestReport
     */
    omit?: SoilTestReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoilTestReportInclude<ExtArgs> | null
    /**
     * Filter, which SoilTestReport to fetch.
     */
    where: SoilTestReportWhereUniqueInput
  }

  /**
   * SoilTestReport findFirst
   */
  export type SoilTestReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoilTestReport
     */
    select?: SoilTestReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SoilTestReport
     */
    omit?: SoilTestReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoilTestReportInclude<ExtArgs> | null
    /**
     * Filter, which SoilTestReport to fetch.
     */
    where?: SoilTestReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SoilTestReports to fetch.
     */
    orderBy?: SoilTestReportOrderByWithRelationInput | SoilTestReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SoilTestReports.
     */
    cursor?: SoilTestReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SoilTestReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SoilTestReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SoilTestReports.
     */
    distinct?: SoilTestReportScalarFieldEnum | SoilTestReportScalarFieldEnum[]
  }

  /**
   * SoilTestReport findFirstOrThrow
   */
  export type SoilTestReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoilTestReport
     */
    select?: SoilTestReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SoilTestReport
     */
    omit?: SoilTestReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoilTestReportInclude<ExtArgs> | null
    /**
     * Filter, which SoilTestReport to fetch.
     */
    where?: SoilTestReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SoilTestReports to fetch.
     */
    orderBy?: SoilTestReportOrderByWithRelationInput | SoilTestReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SoilTestReports.
     */
    cursor?: SoilTestReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SoilTestReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SoilTestReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SoilTestReports.
     */
    distinct?: SoilTestReportScalarFieldEnum | SoilTestReportScalarFieldEnum[]
  }

  /**
   * SoilTestReport findMany
   */
  export type SoilTestReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoilTestReport
     */
    select?: SoilTestReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SoilTestReport
     */
    omit?: SoilTestReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoilTestReportInclude<ExtArgs> | null
    /**
     * Filter, which SoilTestReports to fetch.
     */
    where?: SoilTestReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SoilTestReports to fetch.
     */
    orderBy?: SoilTestReportOrderByWithRelationInput | SoilTestReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SoilTestReports.
     */
    cursor?: SoilTestReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SoilTestReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SoilTestReports.
     */
    skip?: number
    distinct?: SoilTestReportScalarFieldEnum | SoilTestReportScalarFieldEnum[]
  }

  /**
   * SoilTestReport create
   */
  export type SoilTestReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoilTestReport
     */
    select?: SoilTestReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SoilTestReport
     */
    omit?: SoilTestReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoilTestReportInclude<ExtArgs> | null
    /**
     * The data needed to create a SoilTestReport.
     */
    data: XOR<SoilTestReportCreateInput, SoilTestReportUncheckedCreateInput>
  }

  /**
   * SoilTestReport createMany
   */
  export type SoilTestReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SoilTestReports.
     */
    data: SoilTestReportCreateManyInput | SoilTestReportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SoilTestReport createManyAndReturn
   */
  export type SoilTestReportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoilTestReport
     */
    select?: SoilTestReportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SoilTestReport
     */
    omit?: SoilTestReportOmit<ExtArgs> | null
    /**
     * The data used to create many SoilTestReports.
     */
    data: SoilTestReportCreateManyInput | SoilTestReportCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoilTestReportIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SoilTestReport update
   */
  export type SoilTestReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoilTestReport
     */
    select?: SoilTestReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SoilTestReport
     */
    omit?: SoilTestReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoilTestReportInclude<ExtArgs> | null
    /**
     * The data needed to update a SoilTestReport.
     */
    data: XOR<SoilTestReportUpdateInput, SoilTestReportUncheckedUpdateInput>
    /**
     * Choose, which SoilTestReport to update.
     */
    where: SoilTestReportWhereUniqueInput
  }

  /**
   * SoilTestReport updateMany
   */
  export type SoilTestReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SoilTestReports.
     */
    data: XOR<SoilTestReportUpdateManyMutationInput, SoilTestReportUncheckedUpdateManyInput>
    /**
     * Filter which SoilTestReports to update
     */
    where?: SoilTestReportWhereInput
    /**
     * Limit how many SoilTestReports to update.
     */
    limit?: number
  }

  /**
   * SoilTestReport updateManyAndReturn
   */
  export type SoilTestReportUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoilTestReport
     */
    select?: SoilTestReportSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SoilTestReport
     */
    omit?: SoilTestReportOmit<ExtArgs> | null
    /**
     * The data used to update SoilTestReports.
     */
    data: XOR<SoilTestReportUpdateManyMutationInput, SoilTestReportUncheckedUpdateManyInput>
    /**
     * Filter which SoilTestReports to update
     */
    where?: SoilTestReportWhereInput
    /**
     * Limit how many SoilTestReports to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoilTestReportIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SoilTestReport upsert
   */
  export type SoilTestReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoilTestReport
     */
    select?: SoilTestReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SoilTestReport
     */
    omit?: SoilTestReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoilTestReportInclude<ExtArgs> | null
    /**
     * The filter to search for the SoilTestReport to update in case it exists.
     */
    where: SoilTestReportWhereUniqueInput
    /**
     * In case the SoilTestReport found by the `where` argument doesn't exist, create a new SoilTestReport with this data.
     */
    create: XOR<SoilTestReportCreateInput, SoilTestReportUncheckedCreateInput>
    /**
     * In case the SoilTestReport was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SoilTestReportUpdateInput, SoilTestReportUncheckedUpdateInput>
  }

  /**
   * SoilTestReport delete
   */
  export type SoilTestReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoilTestReport
     */
    select?: SoilTestReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SoilTestReport
     */
    omit?: SoilTestReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoilTestReportInclude<ExtArgs> | null
    /**
     * Filter which SoilTestReport to delete.
     */
    where: SoilTestReportWhereUniqueInput
  }

  /**
   * SoilTestReport deleteMany
   */
  export type SoilTestReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SoilTestReports to delete
     */
    where?: SoilTestReportWhereInput
    /**
     * Limit how many SoilTestReports to delete.
     */
    limit?: number
  }

  /**
   * SoilTestReport without action
   */
  export type SoilTestReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SoilTestReport
     */
    select?: SoilTestReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SoilTestReport
     */
    omit?: SoilTestReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SoilTestReportInclude<ExtArgs> | null
  }


  /**
   * Model Feedback
   */

  export type AggregateFeedback = {
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  export type FeedbackAvgAggregateOutputType = {
    rating: number | null
  }

  export type FeedbackSumAggregateOutputType = {
    rating: number | null
  }

  export type FeedbackMinAggregateOutputType = {
    id: string | null
    rating: number | null
    comment: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    giverId: string | null
  }

  export type FeedbackMaxAggregateOutputType = {
    id: string | null
    rating: number | null
    comment: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    giverId: string | null
  }

  export type FeedbackCountAggregateOutputType = {
    id: number
    rating: number
    comment: number
    createdAt: number
    updatedAt: number
    userId: number
    giverId: number
    _all: number
  }


  export type FeedbackAvgAggregateInputType = {
    rating?: true
  }

  export type FeedbackSumAggregateInputType = {
    rating?: true
  }

  export type FeedbackMinAggregateInputType = {
    id?: true
    rating?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    giverId?: true
  }

  export type FeedbackMaxAggregateInputType = {
    id?: true
    rating?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    giverId?: true
  }

  export type FeedbackCountAggregateInputType = {
    id?: true
    rating?: true
    comment?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    giverId?: true
    _all?: true
  }

  export type FeedbackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedback to aggregate.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Feedbacks
    **/
    _count?: true | FeedbackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeedbackAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeedbackSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedbackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedbackMaxAggregateInputType
  }

  export type GetFeedbackAggregateType<T extends FeedbackAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedback]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedback[P]>
      : GetScalarType<T[P], AggregateFeedback[P]>
  }




  export type FeedbackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithAggregationInput | FeedbackOrderByWithAggregationInput[]
    by: FeedbackScalarFieldEnum[] | FeedbackScalarFieldEnum
    having?: FeedbackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedbackCountAggregateInputType | true
    _avg?: FeedbackAvgAggregateInputType
    _sum?: FeedbackSumAggregateInputType
    _min?: FeedbackMinAggregateInputType
    _max?: FeedbackMaxAggregateInputType
  }

  export type FeedbackGroupByOutputType = {
    id: string
    rating: number
    comment: string | null
    createdAt: Date
    updatedAt: Date
    userId: string
    giverId: string
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  type GetFeedbackGroupByPayload<T extends FeedbackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedbackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedbackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
            : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
        }
      >
    >


  export type FeedbackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    giverId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    giver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    giverId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    giver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    giverId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    giver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectScalar = {
    id?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    giverId?: boolean
  }

  export type FeedbackOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "rating" | "comment" | "createdAt" | "updatedAt" | "userId" | "giverId", ExtArgs["result"]["feedback"]>
  export type FeedbackInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    giver?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FeedbackIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    giver?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FeedbackIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    giver?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FeedbackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Feedback"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      giver: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      rating: number
      comment: string | null
      createdAt: Date
      updatedAt: Date
      userId: string
      giverId: string
    }, ExtArgs["result"]["feedback"]>
    composites: {}
  }

  type FeedbackGetPayload<S extends boolean | null | undefined | FeedbackDefaultArgs> = $Result.GetResult<Prisma.$FeedbackPayload, S>

  type FeedbackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FeedbackFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FeedbackCountAggregateInputType | true
    }

  export interface FeedbackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Feedback'], meta: { name: 'Feedback' } }
    /**
     * Find zero or one Feedback that matches the filter.
     * @param {FeedbackFindUniqueArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeedbackFindUniqueArgs>(args: SelectSubset<T, FeedbackFindUniqueArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Feedback that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FeedbackFindUniqueOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeedbackFindUniqueOrThrowArgs>(args: SelectSubset<T, FeedbackFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Feedback that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeedbackFindFirstArgs>(args?: SelectSubset<T, FeedbackFindFirstArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Feedback that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeedbackFindFirstOrThrowArgs>(args?: SelectSubset<T, FeedbackFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Feedbacks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Feedbacks
     * const feedbacks = await prisma.feedback.findMany()
     * 
     * // Get first 10 Feedbacks
     * const feedbacks = await prisma.feedback.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feedbackWithIdOnly = await prisma.feedback.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FeedbackFindManyArgs>(args?: SelectSubset<T, FeedbackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Feedback.
     * @param {FeedbackCreateArgs} args - Arguments to create a Feedback.
     * @example
     * // Create one Feedback
     * const Feedback = await prisma.feedback.create({
     *   data: {
     *     // ... data to create a Feedback
     *   }
     * })
     * 
     */
    create<T extends FeedbackCreateArgs>(args: SelectSubset<T, FeedbackCreateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Feedbacks.
     * @param {FeedbackCreateManyArgs} args - Arguments to create many Feedbacks.
     * @example
     * // Create many Feedbacks
     * const feedback = await prisma.feedback.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeedbackCreateManyArgs>(args?: SelectSubset<T, FeedbackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Feedbacks and returns the data saved in the database.
     * @param {FeedbackCreateManyAndReturnArgs} args - Arguments to create many Feedbacks.
     * @example
     * // Create many Feedbacks
     * const feedback = await prisma.feedback.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Feedbacks and only return the `id`
     * const feedbackWithIdOnly = await prisma.feedback.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FeedbackCreateManyAndReturnArgs>(args?: SelectSubset<T, FeedbackCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Feedback.
     * @param {FeedbackDeleteArgs} args - Arguments to delete one Feedback.
     * @example
     * // Delete one Feedback
     * const Feedback = await prisma.feedback.delete({
     *   where: {
     *     // ... filter to delete one Feedback
     *   }
     * })
     * 
     */
    delete<T extends FeedbackDeleteArgs>(args: SelectSubset<T, FeedbackDeleteArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Feedback.
     * @param {FeedbackUpdateArgs} args - Arguments to update one Feedback.
     * @example
     * // Update one Feedback
     * const feedback = await prisma.feedback.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeedbackUpdateArgs>(args: SelectSubset<T, FeedbackUpdateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Feedbacks.
     * @param {FeedbackDeleteManyArgs} args - Arguments to filter Feedbacks to delete.
     * @example
     * // Delete a few Feedbacks
     * const { count } = await prisma.feedback.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeedbackDeleteManyArgs>(args?: SelectSubset<T, FeedbackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Feedbacks
     * const feedback = await prisma.feedback.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeedbackUpdateManyArgs>(args: SelectSubset<T, FeedbackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedbacks and returns the data updated in the database.
     * @param {FeedbackUpdateManyAndReturnArgs} args - Arguments to update many Feedbacks.
     * @example
     * // Update many Feedbacks
     * const feedback = await prisma.feedback.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Feedbacks and only return the `id`
     * const feedbackWithIdOnly = await prisma.feedback.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FeedbackUpdateManyAndReturnArgs>(args: SelectSubset<T, FeedbackUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Feedback.
     * @param {FeedbackUpsertArgs} args - Arguments to update or create a Feedback.
     * @example
     * // Update or create a Feedback
     * const feedback = await prisma.feedback.upsert({
     *   create: {
     *     // ... data to create a Feedback
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Feedback we want to update
     *   }
     * })
     */
    upsert<T extends FeedbackUpsertArgs>(args: SelectSubset<T, FeedbackUpsertArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackCountArgs} args - Arguments to filter Feedbacks to count.
     * @example
     * // Count the number of Feedbacks
     * const count = await prisma.feedback.count({
     *   where: {
     *     // ... the filter for the Feedbacks we want to count
     *   }
     * })
    **/
    count<T extends FeedbackCountArgs>(
      args?: Subset<T, FeedbackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedbackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedbackAggregateArgs>(args: Subset<T, FeedbackAggregateArgs>): Prisma.PrismaPromise<GetFeedbackAggregateType<T>>

    /**
     * Group by Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeedbackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedbackGroupByArgs['orderBy'] }
        : { orderBy?: FeedbackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeedbackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedbackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Feedback model
   */
  readonly fields: FeedbackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Feedback.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeedbackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    giver<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Feedback model
   */
  interface FeedbackFieldRefs {
    readonly id: FieldRef<"Feedback", 'String'>
    readonly rating: FieldRef<"Feedback", 'Int'>
    readonly comment: FieldRef<"Feedback", 'String'>
    readonly createdAt: FieldRef<"Feedback", 'DateTime'>
    readonly updatedAt: FieldRef<"Feedback", 'DateTime'>
    readonly userId: FieldRef<"Feedback", 'String'>
    readonly giverId: FieldRef<"Feedback", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Feedback findUnique
   */
  export type FeedbackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findUniqueOrThrow
   */
  export type FeedbackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findFirst
   */
  export type FeedbackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findFirstOrThrow
   */
  export type FeedbackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findMany
   */
  export type FeedbackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedbacks to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback create
   */
  export type FeedbackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to create a Feedback.
     */
    data: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
  }

  /**
   * Feedback createMany
   */
  export type FeedbackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Feedback createManyAndReturn
   */
  export type FeedbackCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Feedback update
   */
  export type FeedbackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to update a Feedback.
     */
    data: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
    /**
     * Choose, which Feedback to update.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback updateMany
   */
  export type FeedbackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Feedbacks.
     */
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyInput>
    /**
     * Filter which Feedbacks to update
     */
    where?: FeedbackWhereInput
    /**
     * Limit how many Feedbacks to update.
     */
    limit?: number
  }

  /**
   * Feedback updateManyAndReturn
   */
  export type FeedbackUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * The data used to update Feedbacks.
     */
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyInput>
    /**
     * Filter which Feedbacks to update
     */
    where?: FeedbackWhereInput
    /**
     * Limit how many Feedbacks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Feedback upsert
   */
  export type FeedbackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The filter to search for the Feedback to update in case it exists.
     */
    where: FeedbackWhereUniqueInput
    /**
     * In case the Feedback found by the `where` argument doesn't exist, create a new Feedback with this data.
     */
    create: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
    /**
     * In case the Feedback was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
  }

  /**
   * Feedback delete
   */
  export type FeedbackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter which Feedback to delete.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback deleteMany
   */
  export type FeedbackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedbacks to delete
     */
    where?: FeedbackWhereInput
    /**
     * Limit how many Feedbacks to delete.
     */
    limit?: number
  }

  /**
   * Feedback without action
   */
  export type FeedbackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
  }


  /**
   * Model MarketPrice
   */

  export type AggregateMarketPrice = {
    _count: MarketPriceCountAggregateOutputType | null
    _avg: MarketPriceAvgAggregateOutputType | null
    _sum: MarketPriceSumAggregateOutputType | null
    _min: MarketPriceMinAggregateOutputType | null
    _max: MarketPriceMaxAggregateOutputType | null
  }

  export type MarketPriceAvgAggregateOutputType = {
    price: number | null
  }

  export type MarketPriceSumAggregateOutputType = {
    price: number | null
  }

  export type MarketPriceMinAggregateOutputType = {
    id: string | null
    cropName: string | null
    marketName: string | null
    price: number | null
    date: Date | null
    cropType: string | null
    imageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
    agentId: string | null
  }

  export type MarketPriceMaxAggregateOutputType = {
    id: string | null
    cropName: string | null
    marketName: string | null
    price: number | null
    date: Date | null
    cropType: string | null
    imageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
    agentId: string | null
  }

  export type MarketPriceCountAggregateOutputType = {
    id: number
    cropName: number
    marketName: number
    price: number
    date: number
    cropType: number
    imageUrl: number
    createdAt: number
    updatedAt: number
    agentId: number
    _all: number
  }


  export type MarketPriceAvgAggregateInputType = {
    price?: true
  }

  export type MarketPriceSumAggregateInputType = {
    price?: true
  }

  export type MarketPriceMinAggregateInputType = {
    id?: true
    cropName?: true
    marketName?: true
    price?: true
    date?: true
    cropType?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
    agentId?: true
  }

  export type MarketPriceMaxAggregateInputType = {
    id?: true
    cropName?: true
    marketName?: true
    price?: true
    date?: true
    cropType?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
    agentId?: true
  }

  export type MarketPriceCountAggregateInputType = {
    id?: true
    cropName?: true
    marketName?: true
    price?: true
    date?: true
    cropType?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
    agentId?: true
    _all?: true
  }

  export type MarketPriceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MarketPrice to aggregate.
     */
    where?: MarketPriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarketPrices to fetch.
     */
    orderBy?: MarketPriceOrderByWithRelationInput | MarketPriceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MarketPriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarketPrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarketPrices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MarketPrices
    **/
    _count?: true | MarketPriceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MarketPriceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MarketPriceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MarketPriceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MarketPriceMaxAggregateInputType
  }

  export type GetMarketPriceAggregateType<T extends MarketPriceAggregateArgs> = {
        [P in keyof T & keyof AggregateMarketPrice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMarketPrice[P]>
      : GetScalarType<T[P], AggregateMarketPrice[P]>
  }




  export type MarketPriceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MarketPriceWhereInput
    orderBy?: MarketPriceOrderByWithAggregationInput | MarketPriceOrderByWithAggregationInput[]
    by: MarketPriceScalarFieldEnum[] | MarketPriceScalarFieldEnum
    having?: MarketPriceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MarketPriceCountAggregateInputType | true
    _avg?: MarketPriceAvgAggregateInputType
    _sum?: MarketPriceSumAggregateInputType
    _min?: MarketPriceMinAggregateInputType
    _max?: MarketPriceMaxAggregateInputType
  }

  export type MarketPriceGroupByOutputType = {
    id: string
    cropName: string
    marketName: string
    price: number
    date: Date
    cropType: string
    imageUrl: string | null
    createdAt: Date
    updatedAt: Date
    agentId: string
    _count: MarketPriceCountAggregateOutputType | null
    _avg: MarketPriceAvgAggregateOutputType | null
    _sum: MarketPriceSumAggregateOutputType | null
    _min: MarketPriceMinAggregateOutputType | null
    _max: MarketPriceMaxAggregateOutputType | null
  }

  type GetMarketPriceGroupByPayload<T extends MarketPriceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MarketPriceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MarketPriceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MarketPriceGroupByOutputType[P]>
            : GetScalarType<T[P], MarketPriceGroupByOutputType[P]>
        }
      >
    >


  export type MarketPriceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cropName?: boolean
    marketName?: boolean
    price?: boolean
    date?: boolean
    cropType?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    agentId?: boolean
    agent?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["marketPrice"]>

  export type MarketPriceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cropName?: boolean
    marketName?: boolean
    price?: boolean
    date?: boolean
    cropType?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    agentId?: boolean
    agent?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["marketPrice"]>

  export type MarketPriceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cropName?: boolean
    marketName?: boolean
    price?: boolean
    date?: boolean
    cropType?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    agentId?: boolean
    agent?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["marketPrice"]>

  export type MarketPriceSelectScalar = {
    id?: boolean
    cropName?: boolean
    marketName?: boolean
    price?: boolean
    date?: boolean
    cropType?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    agentId?: boolean
  }

  export type MarketPriceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "cropName" | "marketName" | "price" | "date" | "cropType" | "imageUrl" | "createdAt" | "updatedAt" | "agentId", ExtArgs["result"]["marketPrice"]>
  export type MarketPriceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MarketPriceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MarketPriceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    agent?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MarketPricePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MarketPrice"
    objects: {
      agent: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      cropName: string
      marketName: string
      price: number
      date: Date
      cropType: string
      imageUrl: string | null
      createdAt: Date
      updatedAt: Date
      agentId: string
    }, ExtArgs["result"]["marketPrice"]>
    composites: {}
  }

  type MarketPriceGetPayload<S extends boolean | null | undefined | MarketPriceDefaultArgs> = $Result.GetResult<Prisma.$MarketPricePayload, S>

  type MarketPriceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MarketPriceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MarketPriceCountAggregateInputType | true
    }

  export interface MarketPriceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MarketPrice'], meta: { name: 'MarketPrice' } }
    /**
     * Find zero or one MarketPrice that matches the filter.
     * @param {MarketPriceFindUniqueArgs} args - Arguments to find a MarketPrice
     * @example
     * // Get one MarketPrice
     * const marketPrice = await prisma.marketPrice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MarketPriceFindUniqueArgs>(args: SelectSubset<T, MarketPriceFindUniqueArgs<ExtArgs>>): Prisma__MarketPriceClient<$Result.GetResult<Prisma.$MarketPricePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MarketPrice that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MarketPriceFindUniqueOrThrowArgs} args - Arguments to find a MarketPrice
     * @example
     * // Get one MarketPrice
     * const marketPrice = await prisma.marketPrice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MarketPriceFindUniqueOrThrowArgs>(args: SelectSubset<T, MarketPriceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MarketPriceClient<$Result.GetResult<Prisma.$MarketPricePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MarketPrice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketPriceFindFirstArgs} args - Arguments to find a MarketPrice
     * @example
     * // Get one MarketPrice
     * const marketPrice = await prisma.marketPrice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MarketPriceFindFirstArgs>(args?: SelectSubset<T, MarketPriceFindFirstArgs<ExtArgs>>): Prisma__MarketPriceClient<$Result.GetResult<Prisma.$MarketPricePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MarketPrice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketPriceFindFirstOrThrowArgs} args - Arguments to find a MarketPrice
     * @example
     * // Get one MarketPrice
     * const marketPrice = await prisma.marketPrice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MarketPriceFindFirstOrThrowArgs>(args?: SelectSubset<T, MarketPriceFindFirstOrThrowArgs<ExtArgs>>): Prisma__MarketPriceClient<$Result.GetResult<Prisma.$MarketPricePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MarketPrices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketPriceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MarketPrices
     * const marketPrices = await prisma.marketPrice.findMany()
     * 
     * // Get first 10 MarketPrices
     * const marketPrices = await prisma.marketPrice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const marketPriceWithIdOnly = await prisma.marketPrice.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MarketPriceFindManyArgs>(args?: SelectSubset<T, MarketPriceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarketPricePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MarketPrice.
     * @param {MarketPriceCreateArgs} args - Arguments to create a MarketPrice.
     * @example
     * // Create one MarketPrice
     * const MarketPrice = await prisma.marketPrice.create({
     *   data: {
     *     // ... data to create a MarketPrice
     *   }
     * })
     * 
     */
    create<T extends MarketPriceCreateArgs>(args: SelectSubset<T, MarketPriceCreateArgs<ExtArgs>>): Prisma__MarketPriceClient<$Result.GetResult<Prisma.$MarketPricePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MarketPrices.
     * @param {MarketPriceCreateManyArgs} args - Arguments to create many MarketPrices.
     * @example
     * // Create many MarketPrices
     * const marketPrice = await prisma.marketPrice.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MarketPriceCreateManyArgs>(args?: SelectSubset<T, MarketPriceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MarketPrices and returns the data saved in the database.
     * @param {MarketPriceCreateManyAndReturnArgs} args - Arguments to create many MarketPrices.
     * @example
     * // Create many MarketPrices
     * const marketPrice = await prisma.marketPrice.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MarketPrices and only return the `id`
     * const marketPriceWithIdOnly = await prisma.marketPrice.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MarketPriceCreateManyAndReturnArgs>(args?: SelectSubset<T, MarketPriceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarketPricePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MarketPrice.
     * @param {MarketPriceDeleteArgs} args - Arguments to delete one MarketPrice.
     * @example
     * // Delete one MarketPrice
     * const MarketPrice = await prisma.marketPrice.delete({
     *   where: {
     *     // ... filter to delete one MarketPrice
     *   }
     * })
     * 
     */
    delete<T extends MarketPriceDeleteArgs>(args: SelectSubset<T, MarketPriceDeleteArgs<ExtArgs>>): Prisma__MarketPriceClient<$Result.GetResult<Prisma.$MarketPricePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MarketPrice.
     * @param {MarketPriceUpdateArgs} args - Arguments to update one MarketPrice.
     * @example
     * // Update one MarketPrice
     * const marketPrice = await prisma.marketPrice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MarketPriceUpdateArgs>(args: SelectSubset<T, MarketPriceUpdateArgs<ExtArgs>>): Prisma__MarketPriceClient<$Result.GetResult<Prisma.$MarketPricePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MarketPrices.
     * @param {MarketPriceDeleteManyArgs} args - Arguments to filter MarketPrices to delete.
     * @example
     * // Delete a few MarketPrices
     * const { count } = await prisma.marketPrice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MarketPriceDeleteManyArgs>(args?: SelectSubset<T, MarketPriceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MarketPrices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketPriceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MarketPrices
     * const marketPrice = await prisma.marketPrice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MarketPriceUpdateManyArgs>(args: SelectSubset<T, MarketPriceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MarketPrices and returns the data updated in the database.
     * @param {MarketPriceUpdateManyAndReturnArgs} args - Arguments to update many MarketPrices.
     * @example
     * // Update many MarketPrices
     * const marketPrice = await prisma.marketPrice.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MarketPrices and only return the `id`
     * const marketPriceWithIdOnly = await prisma.marketPrice.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MarketPriceUpdateManyAndReturnArgs>(args: SelectSubset<T, MarketPriceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarketPricePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MarketPrice.
     * @param {MarketPriceUpsertArgs} args - Arguments to update or create a MarketPrice.
     * @example
     * // Update or create a MarketPrice
     * const marketPrice = await prisma.marketPrice.upsert({
     *   create: {
     *     // ... data to create a MarketPrice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MarketPrice we want to update
     *   }
     * })
     */
    upsert<T extends MarketPriceUpsertArgs>(args: SelectSubset<T, MarketPriceUpsertArgs<ExtArgs>>): Prisma__MarketPriceClient<$Result.GetResult<Prisma.$MarketPricePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MarketPrices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketPriceCountArgs} args - Arguments to filter MarketPrices to count.
     * @example
     * // Count the number of MarketPrices
     * const count = await prisma.marketPrice.count({
     *   where: {
     *     // ... the filter for the MarketPrices we want to count
     *   }
     * })
    **/
    count<T extends MarketPriceCountArgs>(
      args?: Subset<T, MarketPriceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MarketPriceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MarketPrice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketPriceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MarketPriceAggregateArgs>(args: Subset<T, MarketPriceAggregateArgs>): Prisma.PrismaPromise<GetMarketPriceAggregateType<T>>

    /**
     * Group by MarketPrice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketPriceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MarketPriceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MarketPriceGroupByArgs['orderBy'] }
        : { orderBy?: MarketPriceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MarketPriceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMarketPriceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MarketPrice model
   */
  readonly fields: MarketPriceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MarketPrice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MarketPriceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    agent<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MarketPrice model
   */
  interface MarketPriceFieldRefs {
    readonly id: FieldRef<"MarketPrice", 'String'>
    readonly cropName: FieldRef<"MarketPrice", 'String'>
    readonly marketName: FieldRef<"MarketPrice", 'String'>
    readonly price: FieldRef<"MarketPrice", 'Float'>
    readonly date: FieldRef<"MarketPrice", 'DateTime'>
    readonly cropType: FieldRef<"MarketPrice", 'String'>
    readonly imageUrl: FieldRef<"MarketPrice", 'String'>
    readonly createdAt: FieldRef<"MarketPrice", 'DateTime'>
    readonly updatedAt: FieldRef<"MarketPrice", 'DateTime'>
    readonly agentId: FieldRef<"MarketPrice", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MarketPrice findUnique
   */
  export type MarketPriceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketPrice
     */
    select?: MarketPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketPrice
     */
    omit?: MarketPriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketPriceInclude<ExtArgs> | null
    /**
     * Filter, which MarketPrice to fetch.
     */
    where: MarketPriceWhereUniqueInput
  }

  /**
   * MarketPrice findUniqueOrThrow
   */
  export type MarketPriceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketPrice
     */
    select?: MarketPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketPrice
     */
    omit?: MarketPriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketPriceInclude<ExtArgs> | null
    /**
     * Filter, which MarketPrice to fetch.
     */
    where: MarketPriceWhereUniqueInput
  }

  /**
   * MarketPrice findFirst
   */
  export type MarketPriceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketPrice
     */
    select?: MarketPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketPrice
     */
    omit?: MarketPriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketPriceInclude<ExtArgs> | null
    /**
     * Filter, which MarketPrice to fetch.
     */
    where?: MarketPriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarketPrices to fetch.
     */
    orderBy?: MarketPriceOrderByWithRelationInput | MarketPriceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MarketPrices.
     */
    cursor?: MarketPriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarketPrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarketPrices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MarketPrices.
     */
    distinct?: MarketPriceScalarFieldEnum | MarketPriceScalarFieldEnum[]
  }

  /**
   * MarketPrice findFirstOrThrow
   */
  export type MarketPriceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketPrice
     */
    select?: MarketPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketPrice
     */
    omit?: MarketPriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketPriceInclude<ExtArgs> | null
    /**
     * Filter, which MarketPrice to fetch.
     */
    where?: MarketPriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarketPrices to fetch.
     */
    orderBy?: MarketPriceOrderByWithRelationInput | MarketPriceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MarketPrices.
     */
    cursor?: MarketPriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarketPrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarketPrices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MarketPrices.
     */
    distinct?: MarketPriceScalarFieldEnum | MarketPriceScalarFieldEnum[]
  }

  /**
   * MarketPrice findMany
   */
  export type MarketPriceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketPrice
     */
    select?: MarketPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketPrice
     */
    omit?: MarketPriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketPriceInclude<ExtArgs> | null
    /**
     * Filter, which MarketPrices to fetch.
     */
    where?: MarketPriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarketPrices to fetch.
     */
    orderBy?: MarketPriceOrderByWithRelationInput | MarketPriceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MarketPrices.
     */
    cursor?: MarketPriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarketPrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarketPrices.
     */
    skip?: number
    distinct?: MarketPriceScalarFieldEnum | MarketPriceScalarFieldEnum[]
  }

  /**
   * MarketPrice create
   */
  export type MarketPriceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketPrice
     */
    select?: MarketPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketPrice
     */
    omit?: MarketPriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketPriceInclude<ExtArgs> | null
    /**
     * The data needed to create a MarketPrice.
     */
    data: XOR<MarketPriceCreateInput, MarketPriceUncheckedCreateInput>
  }

  /**
   * MarketPrice createMany
   */
  export type MarketPriceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MarketPrices.
     */
    data: MarketPriceCreateManyInput | MarketPriceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MarketPrice createManyAndReturn
   */
  export type MarketPriceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketPrice
     */
    select?: MarketPriceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MarketPrice
     */
    omit?: MarketPriceOmit<ExtArgs> | null
    /**
     * The data used to create many MarketPrices.
     */
    data: MarketPriceCreateManyInput | MarketPriceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketPriceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MarketPrice update
   */
  export type MarketPriceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketPrice
     */
    select?: MarketPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketPrice
     */
    omit?: MarketPriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketPriceInclude<ExtArgs> | null
    /**
     * The data needed to update a MarketPrice.
     */
    data: XOR<MarketPriceUpdateInput, MarketPriceUncheckedUpdateInput>
    /**
     * Choose, which MarketPrice to update.
     */
    where: MarketPriceWhereUniqueInput
  }

  /**
   * MarketPrice updateMany
   */
  export type MarketPriceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MarketPrices.
     */
    data: XOR<MarketPriceUpdateManyMutationInput, MarketPriceUncheckedUpdateManyInput>
    /**
     * Filter which MarketPrices to update
     */
    where?: MarketPriceWhereInput
    /**
     * Limit how many MarketPrices to update.
     */
    limit?: number
  }

  /**
   * MarketPrice updateManyAndReturn
   */
  export type MarketPriceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketPrice
     */
    select?: MarketPriceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MarketPrice
     */
    omit?: MarketPriceOmit<ExtArgs> | null
    /**
     * The data used to update MarketPrices.
     */
    data: XOR<MarketPriceUpdateManyMutationInput, MarketPriceUncheckedUpdateManyInput>
    /**
     * Filter which MarketPrices to update
     */
    where?: MarketPriceWhereInput
    /**
     * Limit how many MarketPrices to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketPriceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MarketPrice upsert
   */
  export type MarketPriceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketPrice
     */
    select?: MarketPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketPrice
     */
    omit?: MarketPriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketPriceInclude<ExtArgs> | null
    /**
     * The filter to search for the MarketPrice to update in case it exists.
     */
    where: MarketPriceWhereUniqueInput
    /**
     * In case the MarketPrice found by the `where` argument doesn't exist, create a new MarketPrice with this data.
     */
    create: XOR<MarketPriceCreateInput, MarketPriceUncheckedCreateInput>
    /**
     * In case the MarketPrice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MarketPriceUpdateInput, MarketPriceUncheckedUpdateInput>
  }

  /**
   * MarketPrice delete
   */
  export type MarketPriceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketPrice
     */
    select?: MarketPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketPrice
     */
    omit?: MarketPriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketPriceInclude<ExtArgs> | null
    /**
     * Filter which MarketPrice to delete.
     */
    where: MarketPriceWhereUniqueInput
  }

  /**
   * MarketPrice deleteMany
   */
  export type MarketPriceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MarketPrices to delete
     */
    where?: MarketPriceWhereInput
    /**
     * Limit how many MarketPrices to delete.
     */
    limit?: number
  }

  /**
   * MarketPrice without action
   */
  export type MarketPriceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketPrice
     */
    select?: MarketPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketPrice
     */
    omit?: MarketPriceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarketPriceInclude<ExtArgs> | null
  }


  /**
   * Model Bidding
   */

  export type AggregateBidding = {
    _count: BiddingCountAggregateOutputType | null
    _avg: BiddingAvgAggregateOutputType | null
    _sum: BiddingSumAggregateOutputType | null
    _min: BiddingMinAggregateOutputType | null
    _max: BiddingMaxAggregateOutputType | null
  }

  export type BiddingAvgAggregateOutputType = {
    basePrice: number | null
  }

  export type BiddingSumAggregateOutputType = {
    basePrice: number | null
  }

  export type BiddingMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    imageUrl: string | null
    basePrice: number | null
    address: string | null
    contactNumber: string | null
    status: $Enums.BiddingStatus | null
    endDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    winningBidId: string | null
  }

  export type BiddingMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    imageUrl: string | null
    basePrice: number | null
    address: string | null
    contactNumber: string | null
    status: $Enums.BiddingStatus | null
    endDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    winningBidId: string | null
  }

  export type BiddingCountAggregateOutputType = {
    id: number
    title: number
    description: number
    imageUrl: number
    basePrice: number
    address: number
    contactNumber: number
    status: number
    endDate: number
    createdAt: number
    updatedAt: number
    userId: number
    winningBidId: number
    _all: number
  }


  export type BiddingAvgAggregateInputType = {
    basePrice?: true
  }

  export type BiddingSumAggregateInputType = {
    basePrice?: true
  }

  export type BiddingMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    imageUrl?: true
    basePrice?: true
    address?: true
    contactNumber?: true
    status?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    winningBidId?: true
  }

  export type BiddingMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    imageUrl?: true
    basePrice?: true
    address?: true
    contactNumber?: true
    status?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    winningBidId?: true
  }

  export type BiddingCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    imageUrl?: true
    basePrice?: true
    address?: true
    contactNumber?: true
    status?: true
    endDate?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    winningBidId?: true
    _all?: true
  }

  export type BiddingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bidding to aggregate.
     */
    where?: BiddingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Biddings to fetch.
     */
    orderBy?: BiddingOrderByWithRelationInput | BiddingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BiddingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Biddings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Biddings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Biddings
    **/
    _count?: true | BiddingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BiddingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BiddingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BiddingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BiddingMaxAggregateInputType
  }

  export type GetBiddingAggregateType<T extends BiddingAggregateArgs> = {
        [P in keyof T & keyof AggregateBidding]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBidding[P]>
      : GetScalarType<T[P], AggregateBidding[P]>
  }




  export type BiddingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BiddingWhereInput
    orderBy?: BiddingOrderByWithAggregationInput | BiddingOrderByWithAggregationInput[]
    by: BiddingScalarFieldEnum[] | BiddingScalarFieldEnum
    having?: BiddingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BiddingCountAggregateInputType | true
    _avg?: BiddingAvgAggregateInputType
    _sum?: BiddingSumAggregateInputType
    _min?: BiddingMinAggregateInputType
    _max?: BiddingMaxAggregateInputType
  }

  export type BiddingGroupByOutputType = {
    id: string
    title: string
    description: string
    imageUrl: string | null
    basePrice: number
    address: string
    contactNumber: string
    status: $Enums.BiddingStatus
    endDate: Date | null
    createdAt: Date
    updatedAt: Date
    userId: string
    winningBidId: string | null
    _count: BiddingCountAggregateOutputType | null
    _avg: BiddingAvgAggregateOutputType | null
    _sum: BiddingSumAggregateOutputType | null
    _min: BiddingMinAggregateOutputType | null
    _max: BiddingMaxAggregateOutputType | null
  }

  type GetBiddingGroupByPayload<T extends BiddingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BiddingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BiddingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BiddingGroupByOutputType[P]>
            : GetScalarType<T[P], BiddingGroupByOutputType[P]>
        }
      >
    >


  export type BiddingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    imageUrl?: boolean
    basePrice?: boolean
    address?: boolean
    contactNumber?: boolean
    status?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    winningBidId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    bids?: boolean | Bidding$bidsArgs<ExtArgs>
    winningBid?: boolean | Bidding$winningBidArgs<ExtArgs>
    _count?: boolean | BiddingCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bidding"]>

  export type BiddingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    imageUrl?: boolean
    basePrice?: boolean
    address?: boolean
    contactNumber?: boolean
    status?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    winningBidId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    winningBid?: boolean | Bidding$winningBidArgs<ExtArgs>
  }, ExtArgs["result"]["bidding"]>

  export type BiddingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    imageUrl?: boolean
    basePrice?: boolean
    address?: boolean
    contactNumber?: boolean
    status?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    winningBidId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    winningBid?: boolean | Bidding$winningBidArgs<ExtArgs>
  }, ExtArgs["result"]["bidding"]>

  export type BiddingSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    imageUrl?: boolean
    basePrice?: boolean
    address?: boolean
    contactNumber?: boolean
    status?: boolean
    endDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    winningBidId?: boolean
  }

  export type BiddingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "imageUrl" | "basePrice" | "address" | "contactNumber" | "status" | "endDate" | "createdAt" | "updatedAt" | "userId" | "winningBidId", ExtArgs["result"]["bidding"]>
  export type BiddingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    bids?: boolean | Bidding$bidsArgs<ExtArgs>
    winningBid?: boolean | Bidding$winningBidArgs<ExtArgs>
    _count?: boolean | BiddingCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BiddingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    winningBid?: boolean | Bidding$winningBidArgs<ExtArgs>
  }
  export type BiddingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    winningBid?: boolean | Bidding$winningBidArgs<ExtArgs>
  }

  export type $BiddingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Bidding"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      bids: Prisma.$BidPayload<ExtArgs>[]
      winningBid: Prisma.$BidPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      imageUrl: string | null
      basePrice: number
      address: string
      contactNumber: string
      status: $Enums.BiddingStatus
      endDate: Date | null
      createdAt: Date
      updatedAt: Date
      userId: string
      winningBidId: string | null
    }, ExtArgs["result"]["bidding"]>
    composites: {}
  }

  type BiddingGetPayload<S extends boolean | null | undefined | BiddingDefaultArgs> = $Result.GetResult<Prisma.$BiddingPayload, S>

  type BiddingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BiddingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BiddingCountAggregateInputType | true
    }

  export interface BiddingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Bidding'], meta: { name: 'Bidding' } }
    /**
     * Find zero or one Bidding that matches the filter.
     * @param {BiddingFindUniqueArgs} args - Arguments to find a Bidding
     * @example
     * // Get one Bidding
     * const bidding = await prisma.bidding.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BiddingFindUniqueArgs>(args: SelectSubset<T, BiddingFindUniqueArgs<ExtArgs>>): Prisma__BiddingClient<$Result.GetResult<Prisma.$BiddingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Bidding that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BiddingFindUniqueOrThrowArgs} args - Arguments to find a Bidding
     * @example
     * // Get one Bidding
     * const bidding = await prisma.bidding.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BiddingFindUniqueOrThrowArgs>(args: SelectSubset<T, BiddingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BiddingClient<$Result.GetResult<Prisma.$BiddingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Bidding that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BiddingFindFirstArgs} args - Arguments to find a Bidding
     * @example
     * // Get one Bidding
     * const bidding = await prisma.bidding.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BiddingFindFirstArgs>(args?: SelectSubset<T, BiddingFindFirstArgs<ExtArgs>>): Prisma__BiddingClient<$Result.GetResult<Prisma.$BiddingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Bidding that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BiddingFindFirstOrThrowArgs} args - Arguments to find a Bidding
     * @example
     * // Get one Bidding
     * const bidding = await prisma.bidding.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BiddingFindFirstOrThrowArgs>(args?: SelectSubset<T, BiddingFindFirstOrThrowArgs<ExtArgs>>): Prisma__BiddingClient<$Result.GetResult<Prisma.$BiddingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Biddings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BiddingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Biddings
     * const biddings = await prisma.bidding.findMany()
     * 
     * // Get first 10 Biddings
     * const biddings = await prisma.bidding.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const biddingWithIdOnly = await prisma.bidding.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BiddingFindManyArgs>(args?: SelectSubset<T, BiddingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BiddingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Bidding.
     * @param {BiddingCreateArgs} args - Arguments to create a Bidding.
     * @example
     * // Create one Bidding
     * const Bidding = await prisma.bidding.create({
     *   data: {
     *     // ... data to create a Bidding
     *   }
     * })
     * 
     */
    create<T extends BiddingCreateArgs>(args: SelectSubset<T, BiddingCreateArgs<ExtArgs>>): Prisma__BiddingClient<$Result.GetResult<Prisma.$BiddingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Biddings.
     * @param {BiddingCreateManyArgs} args - Arguments to create many Biddings.
     * @example
     * // Create many Biddings
     * const bidding = await prisma.bidding.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BiddingCreateManyArgs>(args?: SelectSubset<T, BiddingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Biddings and returns the data saved in the database.
     * @param {BiddingCreateManyAndReturnArgs} args - Arguments to create many Biddings.
     * @example
     * // Create many Biddings
     * const bidding = await prisma.bidding.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Biddings and only return the `id`
     * const biddingWithIdOnly = await prisma.bidding.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BiddingCreateManyAndReturnArgs>(args?: SelectSubset<T, BiddingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BiddingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Bidding.
     * @param {BiddingDeleteArgs} args - Arguments to delete one Bidding.
     * @example
     * // Delete one Bidding
     * const Bidding = await prisma.bidding.delete({
     *   where: {
     *     // ... filter to delete one Bidding
     *   }
     * })
     * 
     */
    delete<T extends BiddingDeleteArgs>(args: SelectSubset<T, BiddingDeleteArgs<ExtArgs>>): Prisma__BiddingClient<$Result.GetResult<Prisma.$BiddingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Bidding.
     * @param {BiddingUpdateArgs} args - Arguments to update one Bidding.
     * @example
     * // Update one Bidding
     * const bidding = await prisma.bidding.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BiddingUpdateArgs>(args: SelectSubset<T, BiddingUpdateArgs<ExtArgs>>): Prisma__BiddingClient<$Result.GetResult<Prisma.$BiddingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Biddings.
     * @param {BiddingDeleteManyArgs} args - Arguments to filter Biddings to delete.
     * @example
     * // Delete a few Biddings
     * const { count } = await prisma.bidding.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BiddingDeleteManyArgs>(args?: SelectSubset<T, BiddingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Biddings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BiddingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Biddings
     * const bidding = await prisma.bidding.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BiddingUpdateManyArgs>(args: SelectSubset<T, BiddingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Biddings and returns the data updated in the database.
     * @param {BiddingUpdateManyAndReturnArgs} args - Arguments to update many Biddings.
     * @example
     * // Update many Biddings
     * const bidding = await prisma.bidding.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Biddings and only return the `id`
     * const biddingWithIdOnly = await prisma.bidding.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BiddingUpdateManyAndReturnArgs>(args: SelectSubset<T, BiddingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BiddingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Bidding.
     * @param {BiddingUpsertArgs} args - Arguments to update or create a Bidding.
     * @example
     * // Update or create a Bidding
     * const bidding = await prisma.bidding.upsert({
     *   create: {
     *     // ... data to create a Bidding
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bidding we want to update
     *   }
     * })
     */
    upsert<T extends BiddingUpsertArgs>(args: SelectSubset<T, BiddingUpsertArgs<ExtArgs>>): Prisma__BiddingClient<$Result.GetResult<Prisma.$BiddingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Biddings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BiddingCountArgs} args - Arguments to filter Biddings to count.
     * @example
     * // Count the number of Biddings
     * const count = await prisma.bidding.count({
     *   where: {
     *     // ... the filter for the Biddings we want to count
     *   }
     * })
    **/
    count<T extends BiddingCountArgs>(
      args?: Subset<T, BiddingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BiddingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bidding.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BiddingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BiddingAggregateArgs>(args: Subset<T, BiddingAggregateArgs>): Prisma.PrismaPromise<GetBiddingAggregateType<T>>

    /**
     * Group by Bidding.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BiddingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BiddingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BiddingGroupByArgs['orderBy'] }
        : { orderBy?: BiddingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BiddingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBiddingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Bidding model
   */
  readonly fields: BiddingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Bidding.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BiddingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    bids<T extends Bidding$bidsArgs<ExtArgs> = {}>(args?: Subset<T, Bidding$bidsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BidPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    winningBid<T extends Bidding$winningBidArgs<ExtArgs> = {}>(args?: Subset<T, Bidding$winningBidArgs<ExtArgs>>): Prisma__BidClient<$Result.GetResult<Prisma.$BidPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Bidding model
   */
  interface BiddingFieldRefs {
    readonly id: FieldRef<"Bidding", 'String'>
    readonly title: FieldRef<"Bidding", 'String'>
    readonly description: FieldRef<"Bidding", 'String'>
    readonly imageUrl: FieldRef<"Bidding", 'String'>
    readonly basePrice: FieldRef<"Bidding", 'Float'>
    readonly address: FieldRef<"Bidding", 'String'>
    readonly contactNumber: FieldRef<"Bidding", 'String'>
    readonly status: FieldRef<"Bidding", 'BiddingStatus'>
    readonly endDate: FieldRef<"Bidding", 'DateTime'>
    readonly createdAt: FieldRef<"Bidding", 'DateTime'>
    readonly updatedAt: FieldRef<"Bidding", 'DateTime'>
    readonly userId: FieldRef<"Bidding", 'String'>
    readonly winningBidId: FieldRef<"Bidding", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Bidding findUnique
   */
  export type BiddingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bidding
     */
    select?: BiddingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bidding
     */
    omit?: BiddingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingInclude<ExtArgs> | null
    /**
     * Filter, which Bidding to fetch.
     */
    where: BiddingWhereUniqueInput
  }

  /**
   * Bidding findUniqueOrThrow
   */
  export type BiddingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bidding
     */
    select?: BiddingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bidding
     */
    omit?: BiddingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingInclude<ExtArgs> | null
    /**
     * Filter, which Bidding to fetch.
     */
    where: BiddingWhereUniqueInput
  }

  /**
   * Bidding findFirst
   */
  export type BiddingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bidding
     */
    select?: BiddingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bidding
     */
    omit?: BiddingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingInclude<ExtArgs> | null
    /**
     * Filter, which Bidding to fetch.
     */
    where?: BiddingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Biddings to fetch.
     */
    orderBy?: BiddingOrderByWithRelationInput | BiddingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Biddings.
     */
    cursor?: BiddingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Biddings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Biddings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Biddings.
     */
    distinct?: BiddingScalarFieldEnum | BiddingScalarFieldEnum[]
  }

  /**
   * Bidding findFirstOrThrow
   */
  export type BiddingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bidding
     */
    select?: BiddingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bidding
     */
    omit?: BiddingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingInclude<ExtArgs> | null
    /**
     * Filter, which Bidding to fetch.
     */
    where?: BiddingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Biddings to fetch.
     */
    orderBy?: BiddingOrderByWithRelationInput | BiddingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Biddings.
     */
    cursor?: BiddingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Biddings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Biddings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Biddings.
     */
    distinct?: BiddingScalarFieldEnum | BiddingScalarFieldEnum[]
  }

  /**
   * Bidding findMany
   */
  export type BiddingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bidding
     */
    select?: BiddingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bidding
     */
    omit?: BiddingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingInclude<ExtArgs> | null
    /**
     * Filter, which Biddings to fetch.
     */
    where?: BiddingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Biddings to fetch.
     */
    orderBy?: BiddingOrderByWithRelationInput | BiddingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Biddings.
     */
    cursor?: BiddingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Biddings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Biddings.
     */
    skip?: number
    distinct?: BiddingScalarFieldEnum | BiddingScalarFieldEnum[]
  }

  /**
   * Bidding create
   */
  export type BiddingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bidding
     */
    select?: BiddingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bidding
     */
    omit?: BiddingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingInclude<ExtArgs> | null
    /**
     * The data needed to create a Bidding.
     */
    data: XOR<BiddingCreateInput, BiddingUncheckedCreateInput>
  }

  /**
   * Bidding createMany
   */
  export type BiddingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Biddings.
     */
    data: BiddingCreateManyInput | BiddingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Bidding createManyAndReturn
   */
  export type BiddingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bidding
     */
    select?: BiddingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Bidding
     */
    omit?: BiddingOmit<ExtArgs> | null
    /**
     * The data used to create many Biddings.
     */
    data: BiddingCreateManyInput | BiddingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Bidding update
   */
  export type BiddingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bidding
     */
    select?: BiddingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bidding
     */
    omit?: BiddingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingInclude<ExtArgs> | null
    /**
     * The data needed to update a Bidding.
     */
    data: XOR<BiddingUpdateInput, BiddingUncheckedUpdateInput>
    /**
     * Choose, which Bidding to update.
     */
    where: BiddingWhereUniqueInput
  }

  /**
   * Bidding updateMany
   */
  export type BiddingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Biddings.
     */
    data: XOR<BiddingUpdateManyMutationInput, BiddingUncheckedUpdateManyInput>
    /**
     * Filter which Biddings to update
     */
    where?: BiddingWhereInput
    /**
     * Limit how many Biddings to update.
     */
    limit?: number
  }

  /**
   * Bidding updateManyAndReturn
   */
  export type BiddingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bidding
     */
    select?: BiddingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Bidding
     */
    omit?: BiddingOmit<ExtArgs> | null
    /**
     * The data used to update Biddings.
     */
    data: XOR<BiddingUpdateManyMutationInput, BiddingUncheckedUpdateManyInput>
    /**
     * Filter which Biddings to update
     */
    where?: BiddingWhereInput
    /**
     * Limit how many Biddings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Bidding upsert
   */
  export type BiddingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bidding
     */
    select?: BiddingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bidding
     */
    omit?: BiddingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingInclude<ExtArgs> | null
    /**
     * The filter to search for the Bidding to update in case it exists.
     */
    where: BiddingWhereUniqueInput
    /**
     * In case the Bidding found by the `where` argument doesn't exist, create a new Bidding with this data.
     */
    create: XOR<BiddingCreateInput, BiddingUncheckedCreateInput>
    /**
     * In case the Bidding was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BiddingUpdateInput, BiddingUncheckedUpdateInput>
  }

  /**
   * Bidding delete
   */
  export type BiddingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bidding
     */
    select?: BiddingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bidding
     */
    omit?: BiddingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingInclude<ExtArgs> | null
    /**
     * Filter which Bidding to delete.
     */
    where: BiddingWhereUniqueInput
  }

  /**
   * Bidding deleteMany
   */
  export type BiddingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Biddings to delete
     */
    where?: BiddingWhereInput
    /**
     * Limit how many Biddings to delete.
     */
    limit?: number
  }

  /**
   * Bidding.bids
   */
  export type Bidding$bidsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bid
     */
    select?: BidSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bid
     */
    omit?: BidOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BidInclude<ExtArgs> | null
    where?: BidWhereInput
    orderBy?: BidOrderByWithRelationInput | BidOrderByWithRelationInput[]
    cursor?: BidWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BidScalarFieldEnum | BidScalarFieldEnum[]
  }

  /**
   * Bidding.winningBid
   */
  export type Bidding$winningBidArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bid
     */
    select?: BidSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bid
     */
    omit?: BidOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BidInclude<ExtArgs> | null
    where?: BidWhereInput
  }

  /**
   * Bidding without action
   */
  export type BiddingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bidding
     */
    select?: BiddingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bidding
     */
    omit?: BiddingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingInclude<ExtArgs> | null
  }


  /**
   * Model Bid
   */

  export type AggregateBid = {
    _count: BidCountAggregateOutputType | null
    _avg: BidAvgAggregateOutputType | null
    _sum: BidSumAggregateOutputType | null
    _min: BidMinAggregateOutputType | null
    _max: BidMaxAggregateOutputType | null
  }

  export type BidAvgAggregateOutputType = {
    amount: number | null
  }

  export type BidSumAggregateOutputType = {
    amount: number | null
  }

  export type BidMinAggregateOutputType = {
    id: string | null
    amount: number | null
    status: $Enums.BidStatus | null
    createdAt: Date | null
    biddingId: string | null
    userId: string | null
  }

  export type BidMaxAggregateOutputType = {
    id: string | null
    amount: number | null
    status: $Enums.BidStatus | null
    createdAt: Date | null
    biddingId: string | null
    userId: string | null
  }

  export type BidCountAggregateOutputType = {
    id: number
    amount: number
    status: number
    createdAt: number
    biddingId: number
    userId: number
    _all: number
  }


  export type BidAvgAggregateInputType = {
    amount?: true
  }

  export type BidSumAggregateInputType = {
    amount?: true
  }

  export type BidMinAggregateInputType = {
    id?: true
    amount?: true
    status?: true
    createdAt?: true
    biddingId?: true
    userId?: true
  }

  export type BidMaxAggregateInputType = {
    id?: true
    amount?: true
    status?: true
    createdAt?: true
    biddingId?: true
    userId?: true
  }

  export type BidCountAggregateInputType = {
    id?: true
    amount?: true
    status?: true
    createdAt?: true
    biddingId?: true
    userId?: true
    _all?: true
  }

  export type BidAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bid to aggregate.
     */
    where?: BidWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bids to fetch.
     */
    orderBy?: BidOrderByWithRelationInput | BidOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BidWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bids from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bids.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Bids
    **/
    _count?: true | BidCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BidAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BidSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BidMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BidMaxAggregateInputType
  }

  export type GetBidAggregateType<T extends BidAggregateArgs> = {
        [P in keyof T & keyof AggregateBid]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBid[P]>
      : GetScalarType<T[P], AggregateBid[P]>
  }




  export type BidGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BidWhereInput
    orderBy?: BidOrderByWithAggregationInput | BidOrderByWithAggregationInput[]
    by: BidScalarFieldEnum[] | BidScalarFieldEnum
    having?: BidScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BidCountAggregateInputType | true
    _avg?: BidAvgAggregateInputType
    _sum?: BidSumAggregateInputType
    _min?: BidMinAggregateInputType
    _max?: BidMaxAggregateInputType
  }

  export type BidGroupByOutputType = {
    id: string
    amount: number
    status: $Enums.BidStatus
    createdAt: Date
    biddingId: string
    userId: string
    _count: BidCountAggregateOutputType | null
    _avg: BidAvgAggregateOutputType | null
    _sum: BidSumAggregateOutputType | null
    _min: BidMinAggregateOutputType | null
    _max: BidMaxAggregateOutputType | null
  }

  type GetBidGroupByPayload<T extends BidGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BidGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BidGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BidGroupByOutputType[P]>
            : GetScalarType<T[P], BidGroupByOutputType[P]>
        }
      >
    >


  export type BidSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    amount?: boolean
    status?: boolean
    createdAt?: boolean
    biddingId?: boolean
    userId?: boolean
    bidding?: boolean | BiddingDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    wonBidding?: boolean | Bid$wonBiddingArgs<ExtArgs>
  }, ExtArgs["result"]["bid"]>

  export type BidSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    amount?: boolean
    status?: boolean
    createdAt?: boolean
    biddingId?: boolean
    userId?: boolean
    bidding?: boolean | BiddingDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bid"]>

  export type BidSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    amount?: boolean
    status?: boolean
    createdAt?: boolean
    biddingId?: boolean
    userId?: boolean
    bidding?: boolean | BiddingDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bid"]>

  export type BidSelectScalar = {
    id?: boolean
    amount?: boolean
    status?: boolean
    createdAt?: boolean
    biddingId?: boolean
    userId?: boolean
  }

  export type BidOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "amount" | "status" | "createdAt" | "biddingId" | "userId", ExtArgs["result"]["bid"]>
  export type BidInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bidding?: boolean | BiddingDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    wonBidding?: boolean | Bid$wonBiddingArgs<ExtArgs>
  }
  export type BidIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bidding?: boolean | BiddingDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type BidIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bidding?: boolean | BiddingDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $BidPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Bid"
    objects: {
      bidding: Prisma.$BiddingPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      wonBidding: Prisma.$BiddingPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      amount: number
      status: $Enums.BidStatus
      createdAt: Date
      biddingId: string
      userId: string
    }, ExtArgs["result"]["bid"]>
    composites: {}
  }

  type BidGetPayload<S extends boolean | null | undefined | BidDefaultArgs> = $Result.GetResult<Prisma.$BidPayload, S>

  type BidCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BidFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BidCountAggregateInputType | true
    }

  export interface BidDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Bid'], meta: { name: 'Bid' } }
    /**
     * Find zero or one Bid that matches the filter.
     * @param {BidFindUniqueArgs} args - Arguments to find a Bid
     * @example
     * // Get one Bid
     * const bid = await prisma.bid.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BidFindUniqueArgs>(args: SelectSubset<T, BidFindUniqueArgs<ExtArgs>>): Prisma__BidClient<$Result.GetResult<Prisma.$BidPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Bid that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BidFindUniqueOrThrowArgs} args - Arguments to find a Bid
     * @example
     * // Get one Bid
     * const bid = await prisma.bid.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BidFindUniqueOrThrowArgs>(args: SelectSubset<T, BidFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BidClient<$Result.GetResult<Prisma.$BidPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Bid that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BidFindFirstArgs} args - Arguments to find a Bid
     * @example
     * // Get one Bid
     * const bid = await prisma.bid.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BidFindFirstArgs>(args?: SelectSubset<T, BidFindFirstArgs<ExtArgs>>): Prisma__BidClient<$Result.GetResult<Prisma.$BidPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Bid that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BidFindFirstOrThrowArgs} args - Arguments to find a Bid
     * @example
     * // Get one Bid
     * const bid = await prisma.bid.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BidFindFirstOrThrowArgs>(args?: SelectSubset<T, BidFindFirstOrThrowArgs<ExtArgs>>): Prisma__BidClient<$Result.GetResult<Prisma.$BidPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Bids that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BidFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bids
     * const bids = await prisma.bid.findMany()
     * 
     * // Get first 10 Bids
     * const bids = await prisma.bid.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bidWithIdOnly = await prisma.bid.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BidFindManyArgs>(args?: SelectSubset<T, BidFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BidPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Bid.
     * @param {BidCreateArgs} args - Arguments to create a Bid.
     * @example
     * // Create one Bid
     * const Bid = await prisma.bid.create({
     *   data: {
     *     // ... data to create a Bid
     *   }
     * })
     * 
     */
    create<T extends BidCreateArgs>(args: SelectSubset<T, BidCreateArgs<ExtArgs>>): Prisma__BidClient<$Result.GetResult<Prisma.$BidPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Bids.
     * @param {BidCreateManyArgs} args - Arguments to create many Bids.
     * @example
     * // Create many Bids
     * const bid = await prisma.bid.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BidCreateManyArgs>(args?: SelectSubset<T, BidCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Bids and returns the data saved in the database.
     * @param {BidCreateManyAndReturnArgs} args - Arguments to create many Bids.
     * @example
     * // Create many Bids
     * const bid = await prisma.bid.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Bids and only return the `id`
     * const bidWithIdOnly = await prisma.bid.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BidCreateManyAndReturnArgs>(args?: SelectSubset<T, BidCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BidPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Bid.
     * @param {BidDeleteArgs} args - Arguments to delete one Bid.
     * @example
     * // Delete one Bid
     * const Bid = await prisma.bid.delete({
     *   where: {
     *     // ... filter to delete one Bid
     *   }
     * })
     * 
     */
    delete<T extends BidDeleteArgs>(args: SelectSubset<T, BidDeleteArgs<ExtArgs>>): Prisma__BidClient<$Result.GetResult<Prisma.$BidPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Bid.
     * @param {BidUpdateArgs} args - Arguments to update one Bid.
     * @example
     * // Update one Bid
     * const bid = await prisma.bid.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BidUpdateArgs>(args: SelectSubset<T, BidUpdateArgs<ExtArgs>>): Prisma__BidClient<$Result.GetResult<Prisma.$BidPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Bids.
     * @param {BidDeleteManyArgs} args - Arguments to filter Bids to delete.
     * @example
     * // Delete a few Bids
     * const { count } = await prisma.bid.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BidDeleteManyArgs>(args?: SelectSubset<T, BidDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bids.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BidUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bids
     * const bid = await prisma.bid.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BidUpdateManyArgs>(args: SelectSubset<T, BidUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bids and returns the data updated in the database.
     * @param {BidUpdateManyAndReturnArgs} args - Arguments to update many Bids.
     * @example
     * // Update many Bids
     * const bid = await prisma.bid.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Bids and only return the `id`
     * const bidWithIdOnly = await prisma.bid.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BidUpdateManyAndReturnArgs>(args: SelectSubset<T, BidUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BidPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Bid.
     * @param {BidUpsertArgs} args - Arguments to update or create a Bid.
     * @example
     * // Update or create a Bid
     * const bid = await prisma.bid.upsert({
     *   create: {
     *     // ... data to create a Bid
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bid we want to update
     *   }
     * })
     */
    upsert<T extends BidUpsertArgs>(args: SelectSubset<T, BidUpsertArgs<ExtArgs>>): Prisma__BidClient<$Result.GetResult<Prisma.$BidPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Bids.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BidCountArgs} args - Arguments to filter Bids to count.
     * @example
     * // Count the number of Bids
     * const count = await prisma.bid.count({
     *   where: {
     *     // ... the filter for the Bids we want to count
     *   }
     * })
    **/
    count<T extends BidCountArgs>(
      args?: Subset<T, BidCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BidCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bid.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BidAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BidAggregateArgs>(args: Subset<T, BidAggregateArgs>): Prisma.PrismaPromise<GetBidAggregateType<T>>

    /**
     * Group by Bid.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BidGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BidGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BidGroupByArgs['orderBy'] }
        : { orderBy?: BidGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BidGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBidGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Bid model
   */
  readonly fields: BidFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Bid.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BidClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bidding<T extends BiddingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BiddingDefaultArgs<ExtArgs>>): Prisma__BiddingClient<$Result.GetResult<Prisma.$BiddingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    wonBidding<T extends Bid$wonBiddingArgs<ExtArgs> = {}>(args?: Subset<T, Bid$wonBiddingArgs<ExtArgs>>): Prisma__BiddingClient<$Result.GetResult<Prisma.$BiddingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Bid model
   */
  interface BidFieldRefs {
    readonly id: FieldRef<"Bid", 'String'>
    readonly amount: FieldRef<"Bid", 'Float'>
    readonly status: FieldRef<"Bid", 'BidStatus'>
    readonly createdAt: FieldRef<"Bid", 'DateTime'>
    readonly biddingId: FieldRef<"Bid", 'String'>
    readonly userId: FieldRef<"Bid", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Bid findUnique
   */
  export type BidFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bid
     */
    select?: BidSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bid
     */
    omit?: BidOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BidInclude<ExtArgs> | null
    /**
     * Filter, which Bid to fetch.
     */
    where: BidWhereUniqueInput
  }

  /**
   * Bid findUniqueOrThrow
   */
  export type BidFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bid
     */
    select?: BidSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bid
     */
    omit?: BidOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BidInclude<ExtArgs> | null
    /**
     * Filter, which Bid to fetch.
     */
    where: BidWhereUniqueInput
  }

  /**
   * Bid findFirst
   */
  export type BidFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bid
     */
    select?: BidSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bid
     */
    omit?: BidOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BidInclude<ExtArgs> | null
    /**
     * Filter, which Bid to fetch.
     */
    where?: BidWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bids to fetch.
     */
    orderBy?: BidOrderByWithRelationInput | BidOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bids.
     */
    cursor?: BidWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bids from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bids.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bids.
     */
    distinct?: BidScalarFieldEnum | BidScalarFieldEnum[]
  }

  /**
   * Bid findFirstOrThrow
   */
  export type BidFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bid
     */
    select?: BidSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bid
     */
    omit?: BidOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BidInclude<ExtArgs> | null
    /**
     * Filter, which Bid to fetch.
     */
    where?: BidWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bids to fetch.
     */
    orderBy?: BidOrderByWithRelationInput | BidOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bids.
     */
    cursor?: BidWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bids from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bids.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bids.
     */
    distinct?: BidScalarFieldEnum | BidScalarFieldEnum[]
  }

  /**
   * Bid findMany
   */
  export type BidFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bid
     */
    select?: BidSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bid
     */
    omit?: BidOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BidInclude<ExtArgs> | null
    /**
     * Filter, which Bids to fetch.
     */
    where?: BidWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bids to fetch.
     */
    orderBy?: BidOrderByWithRelationInput | BidOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Bids.
     */
    cursor?: BidWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bids from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bids.
     */
    skip?: number
    distinct?: BidScalarFieldEnum | BidScalarFieldEnum[]
  }

  /**
   * Bid create
   */
  export type BidCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bid
     */
    select?: BidSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bid
     */
    omit?: BidOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BidInclude<ExtArgs> | null
    /**
     * The data needed to create a Bid.
     */
    data: XOR<BidCreateInput, BidUncheckedCreateInput>
  }

  /**
   * Bid createMany
   */
  export type BidCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Bids.
     */
    data: BidCreateManyInput | BidCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Bid createManyAndReturn
   */
  export type BidCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bid
     */
    select?: BidSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Bid
     */
    omit?: BidOmit<ExtArgs> | null
    /**
     * The data used to create many Bids.
     */
    data: BidCreateManyInput | BidCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BidIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Bid update
   */
  export type BidUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bid
     */
    select?: BidSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bid
     */
    omit?: BidOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BidInclude<ExtArgs> | null
    /**
     * The data needed to update a Bid.
     */
    data: XOR<BidUpdateInput, BidUncheckedUpdateInput>
    /**
     * Choose, which Bid to update.
     */
    where: BidWhereUniqueInput
  }

  /**
   * Bid updateMany
   */
  export type BidUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Bids.
     */
    data: XOR<BidUpdateManyMutationInput, BidUncheckedUpdateManyInput>
    /**
     * Filter which Bids to update
     */
    where?: BidWhereInput
    /**
     * Limit how many Bids to update.
     */
    limit?: number
  }

  /**
   * Bid updateManyAndReturn
   */
  export type BidUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bid
     */
    select?: BidSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Bid
     */
    omit?: BidOmit<ExtArgs> | null
    /**
     * The data used to update Bids.
     */
    data: XOR<BidUpdateManyMutationInput, BidUncheckedUpdateManyInput>
    /**
     * Filter which Bids to update
     */
    where?: BidWhereInput
    /**
     * Limit how many Bids to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BidIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Bid upsert
   */
  export type BidUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bid
     */
    select?: BidSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bid
     */
    omit?: BidOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BidInclude<ExtArgs> | null
    /**
     * The filter to search for the Bid to update in case it exists.
     */
    where: BidWhereUniqueInput
    /**
     * In case the Bid found by the `where` argument doesn't exist, create a new Bid with this data.
     */
    create: XOR<BidCreateInput, BidUncheckedCreateInput>
    /**
     * In case the Bid was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BidUpdateInput, BidUncheckedUpdateInput>
  }

  /**
   * Bid delete
   */
  export type BidDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bid
     */
    select?: BidSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bid
     */
    omit?: BidOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BidInclude<ExtArgs> | null
    /**
     * Filter which Bid to delete.
     */
    where: BidWhereUniqueInput
  }

  /**
   * Bid deleteMany
   */
  export type BidDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bids to delete
     */
    where?: BidWhereInput
    /**
     * Limit how many Bids to delete.
     */
    limit?: number
  }

  /**
   * Bid.wonBidding
   */
  export type Bid$wonBiddingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bidding
     */
    select?: BiddingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bidding
     */
    omit?: BiddingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BiddingInclude<ExtArgs> | null
    where?: BiddingWhereInput
  }

  /**
   * Bid without action
   */
  export type BidDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bid
     */
    select?: BidSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Bid
     */
    omit?: BidOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BidInclude<ExtArgs> | null
  }


  /**
   * Model Solution
   */

  export type AggregateSolution = {
    _count: SolutionCountAggregateOutputType | null
    _min: SolutionMinAggregateOutputType | null
    _max: SolutionMaxAggregateOutputType | null
  }

  export type SolutionMinAggregateOutputType = {
    id: string | null
    description: string | null
    imageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    cropFeedId: string | null
  }

  export type SolutionMaxAggregateOutputType = {
    id: string | null
    description: string | null
    imageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    cropFeedId: string | null
  }

  export type SolutionCountAggregateOutputType = {
    id: number
    description: number
    imageUrl: number
    createdAt: number
    updatedAt: number
    userId: number
    cropFeedId: number
    _all: number
  }


  export type SolutionMinAggregateInputType = {
    id?: true
    description?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    cropFeedId?: true
  }

  export type SolutionMaxAggregateInputType = {
    id?: true
    description?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    cropFeedId?: true
  }

  export type SolutionCountAggregateInputType = {
    id?: true
    description?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    cropFeedId?: true
    _all?: true
  }

  export type SolutionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Solution to aggregate.
     */
    where?: SolutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Solutions to fetch.
     */
    orderBy?: SolutionOrderByWithRelationInput | SolutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SolutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Solutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Solutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Solutions
    **/
    _count?: true | SolutionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SolutionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SolutionMaxAggregateInputType
  }

  export type GetSolutionAggregateType<T extends SolutionAggregateArgs> = {
        [P in keyof T & keyof AggregateSolution]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSolution[P]>
      : GetScalarType<T[P], AggregateSolution[P]>
  }




  export type SolutionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SolutionWhereInput
    orderBy?: SolutionOrderByWithAggregationInput | SolutionOrderByWithAggregationInput[]
    by: SolutionScalarFieldEnum[] | SolutionScalarFieldEnum
    having?: SolutionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SolutionCountAggregateInputType | true
    _min?: SolutionMinAggregateInputType
    _max?: SolutionMaxAggregateInputType
  }

  export type SolutionGroupByOutputType = {
    id: string
    description: string
    imageUrl: string | null
    createdAt: Date
    updatedAt: Date
    userId: string
    cropFeedId: string
    _count: SolutionCountAggregateOutputType | null
    _min: SolutionMinAggregateOutputType | null
    _max: SolutionMaxAggregateOutputType | null
  }

  type GetSolutionGroupByPayload<T extends SolutionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SolutionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SolutionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SolutionGroupByOutputType[P]>
            : GetScalarType<T[P], SolutionGroupByOutputType[P]>
        }
      >
    >


  export type SolutionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    cropFeedId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    cropFeed?: boolean | CropFeedDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["solution"]>

  export type SolutionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    cropFeedId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    cropFeed?: boolean | CropFeedDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["solution"]>

  export type SolutionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    cropFeedId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    cropFeed?: boolean | CropFeedDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["solution"]>

  export type SolutionSelectScalar = {
    id?: boolean
    description?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    cropFeedId?: boolean
  }

  export type SolutionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "description" | "imageUrl" | "createdAt" | "updatedAt" | "userId" | "cropFeedId", ExtArgs["result"]["solution"]>
  export type SolutionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    cropFeed?: boolean | CropFeedDefaultArgs<ExtArgs>
  }
  export type SolutionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    cropFeed?: boolean | CropFeedDefaultArgs<ExtArgs>
  }
  export type SolutionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    cropFeed?: boolean | CropFeedDefaultArgs<ExtArgs>
  }

  export type $SolutionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Solution"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      cropFeed: Prisma.$CropFeedPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      description: string
      imageUrl: string | null
      createdAt: Date
      updatedAt: Date
      userId: string
      cropFeedId: string
    }, ExtArgs["result"]["solution"]>
    composites: {}
  }

  type SolutionGetPayload<S extends boolean | null | undefined | SolutionDefaultArgs> = $Result.GetResult<Prisma.$SolutionPayload, S>

  type SolutionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SolutionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SolutionCountAggregateInputType | true
    }

  export interface SolutionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Solution'], meta: { name: 'Solution' } }
    /**
     * Find zero or one Solution that matches the filter.
     * @param {SolutionFindUniqueArgs} args - Arguments to find a Solution
     * @example
     * // Get one Solution
     * const solution = await prisma.solution.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SolutionFindUniqueArgs>(args: SelectSubset<T, SolutionFindUniqueArgs<ExtArgs>>): Prisma__SolutionClient<$Result.GetResult<Prisma.$SolutionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Solution that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SolutionFindUniqueOrThrowArgs} args - Arguments to find a Solution
     * @example
     * // Get one Solution
     * const solution = await prisma.solution.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SolutionFindUniqueOrThrowArgs>(args: SelectSubset<T, SolutionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SolutionClient<$Result.GetResult<Prisma.$SolutionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Solution that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolutionFindFirstArgs} args - Arguments to find a Solution
     * @example
     * // Get one Solution
     * const solution = await prisma.solution.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SolutionFindFirstArgs>(args?: SelectSubset<T, SolutionFindFirstArgs<ExtArgs>>): Prisma__SolutionClient<$Result.GetResult<Prisma.$SolutionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Solution that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolutionFindFirstOrThrowArgs} args - Arguments to find a Solution
     * @example
     * // Get one Solution
     * const solution = await prisma.solution.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SolutionFindFirstOrThrowArgs>(args?: SelectSubset<T, SolutionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SolutionClient<$Result.GetResult<Prisma.$SolutionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Solutions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolutionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Solutions
     * const solutions = await prisma.solution.findMany()
     * 
     * // Get first 10 Solutions
     * const solutions = await prisma.solution.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const solutionWithIdOnly = await prisma.solution.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SolutionFindManyArgs>(args?: SelectSubset<T, SolutionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SolutionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Solution.
     * @param {SolutionCreateArgs} args - Arguments to create a Solution.
     * @example
     * // Create one Solution
     * const Solution = await prisma.solution.create({
     *   data: {
     *     // ... data to create a Solution
     *   }
     * })
     * 
     */
    create<T extends SolutionCreateArgs>(args: SelectSubset<T, SolutionCreateArgs<ExtArgs>>): Prisma__SolutionClient<$Result.GetResult<Prisma.$SolutionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Solutions.
     * @param {SolutionCreateManyArgs} args - Arguments to create many Solutions.
     * @example
     * // Create many Solutions
     * const solution = await prisma.solution.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SolutionCreateManyArgs>(args?: SelectSubset<T, SolutionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Solutions and returns the data saved in the database.
     * @param {SolutionCreateManyAndReturnArgs} args - Arguments to create many Solutions.
     * @example
     * // Create many Solutions
     * const solution = await prisma.solution.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Solutions and only return the `id`
     * const solutionWithIdOnly = await prisma.solution.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SolutionCreateManyAndReturnArgs>(args?: SelectSubset<T, SolutionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SolutionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Solution.
     * @param {SolutionDeleteArgs} args - Arguments to delete one Solution.
     * @example
     * // Delete one Solution
     * const Solution = await prisma.solution.delete({
     *   where: {
     *     // ... filter to delete one Solution
     *   }
     * })
     * 
     */
    delete<T extends SolutionDeleteArgs>(args: SelectSubset<T, SolutionDeleteArgs<ExtArgs>>): Prisma__SolutionClient<$Result.GetResult<Prisma.$SolutionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Solution.
     * @param {SolutionUpdateArgs} args - Arguments to update one Solution.
     * @example
     * // Update one Solution
     * const solution = await prisma.solution.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SolutionUpdateArgs>(args: SelectSubset<T, SolutionUpdateArgs<ExtArgs>>): Prisma__SolutionClient<$Result.GetResult<Prisma.$SolutionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Solutions.
     * @param {SolutionDeleteManyArgs} args - Arguments to filter Solutions to delete.
     * @example
     * // Delete a few Solutions
     * const { count } = await prisma.solution.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SolutionDeleteManyArgs>(args?: SelectSubset<T, SolutionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Solutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolutionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Solutions
     * const solution = await prisma.solution.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SolutionUpdateManyArgs>(args: SelectSubset<T, SolutionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Solutions and returns the data updated in the database.
     * @param {SolutionUpdateManyAndReturnArgs} args - Arguments to update many Solutions.
     * @example
     * // Update many Solutions
     * const solution = await prisma.solution.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Solutions and only return the `id`
     * const solutionWithIdOnly = await prisma.solution.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SolutionUpdateManyAndReturnArgs>(args: SelectSubset<T, SolutionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SolutionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Solution.
     * @param {SolutionUpsertArgs} args - Arguments to update or create a Solution.
     * @example
     * // Update or create a Solution
     * const solution = await prisma.solution.upsert({
     *   create: {
     *     // ... data to create a Solution
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Solution we want to update
     *   }
     * })
     */
    upsert<T extends SolutionUpsertArgs>(args: SelectSubset<T, SolutionUpsertArgs<ExtArgs>>): Prisma__SolutionClient<$Result.GetResult<Prisma.$SolutionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Solutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolutionCountArgs} args - Arguments to filter Solutions to count.
     * @example
     * // Count the number of Solutions
     * const count = await prisma.solution.count({
     *   where: {
     *     // ... the filter for the Solutions we want to count
     *   }
     * })
    **/
    count<T extends SolutionCountArgs>(
      args?: Subset<T, SolutionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SolutionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Solution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolutionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SolutionAggregateArgs>(args: Subset<T, SolutionAggregateArgs>): Prisma.PrismaPromise<GetSolutionAggregateType<T>>

    /**
     * Group by Solution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SolutionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SolutionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SolutionGroupByArgs['orderBy'] }
        : { orderBy?: SolutionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SolutionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSolutionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Solution model
   */
  readonly fields: SolutionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Solution.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SolutionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    cropFeed<T extends CropFeedDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CropFeedDefaultArgs<ExtArgs>>): Prisma__CropFeedClient<$Result.GetResult<Prisma.$CropFeedPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Solution model
   */
  interface SolutionFieldRefs {
    readonly id: FieldRef<"Solution", 'String'>
    readonly description: FieldRef<"Solution", 'String'>
    readonly imageUrl: FieldRef<"Solution", 'String'>
    readonly createdAt: FieldRef<"Solution", 'DateTime'>
    readonly updatedAt: FieldRef<"Solution", 'DateTime'>
    readonly userId: FieldRef<"Solution", 'String'>
    readonly cropFeedId: FieldRef<"Solution", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Solution findUnique
   */
  export type SolutionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solution
     */
    select?: SolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Solution
     */
    omit?: SolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SolutionInclude<ExtArgs> | null
    /**
     * Filter, which Solution to fetch.
     */
    where: SolutionWhereUniqueInput
  }

  /**
   * Solution findUniqueOrThrow
   */
  export type SolutionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solution
     */
    select?: SolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Solution
     */
    omit?: SolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SolutionInclude<ExtArgs> | null
    /**
     * Filter, which Solution to fetch.
     */
    where: SolutionWhereUniqueInput
  }

  /**
   * Solution findFirst
   */
  export type SolutionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solution
     */
    select?: SolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Solution
     */
    omit?: SolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SolutionInclude<ExtArgs> | null
    /**
     * Filter, which Solution to fetch.
     */
    where?: SolutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Solutions to fetch.
     */
    orderBy?: SolutionOrderByWithRelationInput | SolutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Solutions.
     */
    cursor?: SolutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Solutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Solutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Solutions.
     */
    distinct?: SolutionScalarFieldEnum | SolutionScalarFieldEnum[]
  }

  /**
   * Solution findFirstOrThrow
   */
  export type SolutionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solution
     */
    select?: SolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Solution
     */
    omit?: SolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SolutionInclude<ExtArgs> | null
    /**
     * Filter, which Solution to fetch.
     */
    where?: SolutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Solutions to fetch.
     */
    orderBy?: SolutionOrderByWithRelationInput | SolutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Solutions.
     */
    cursor?: SolutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Solutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Solutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Solutions.
     */
    distinct?: SolutionScalarFieldEnum | SolutionScalarFieldEnum[]
  }

  /**
   * Solution findMany
   */
  export type SolutionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solution
     */
    select?: SolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Solution
     */
    omit?: SolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SolutionInclude<ExtArgs> | null
    /**
     * Filter, which Solutions to fetch.
     */
    where?: SolutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Solutions to fetch.
     */
    orderBy?: SolutionOrderByWithRelationInput | SolutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Solutions.
     */
    cursor?: SolutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Solutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Solutions.
     */
    skip?: number
    distinct?: SolutionScalarFieldEnum | SolutionScalarFieldEnum[]
  }

  /**
   * Solution create
   */
  export type SolutionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solution
     */
    select?: SolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Solution
     */
    omit?: SolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SolutionInclude<ExtArgs> | null
    /**
     * The data needed to create a Solution.
     */
    data: XOR<SolutionCreateInput, SolutionUncheckedCreateInput>
  }

  /**
   * Solution createMany
   */
  export type SolutionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Solutions.
     */
    data: SolutionCreateManyInput | SolutionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Solution createManyAndReturn
   */
  export type SolutionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solution
     */
    select?: SolutionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Solution
     */
    omit?: SolutionOmit<ExtArgs> | null
    /**
     * The data used to create many Solutions.
     */
    data: SolutionCreateManyInput | SolutionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SolutionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Solution update
   */
  export type SolutionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solution
     */
    select?: SolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Solution
     */
    omit?: SolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SolutionInclude<ExtArgs> | null
    /**
     * The data needed to update a Solution.
     */
    data: XOR<SolutionUpdateInput, SolutionUncheckedUpdateInput>
    /**
     * Choose, which Solution to update.
     */
    where: SolutionWhereUniqueInput
  }

  /**
   * Solution updateMany
   */
  export type SolutionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Solutions.
     */
    data: XOR<SolutionUpdateManyMutationInput, SolutionUncheckedUpdateManyInput>
    /**
     * Filter which Solutions to update
     */
    where?: SolutionWhereInput
    /**
     * Limit how many Solutions to update.
     */
    limit?: number
  }

  /**
   * Solution updateManyAndReturn
   */
  export type SolutionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solution
     */
    select?: SolutionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Solution
     */
    omit?: SolutionOmit<ExtArgs> | null
    /**
     * The data used to update Solutions.
     */
    data: XOR<SolutionUpdateManyMutationInput, SolutionUncheckedUpdateManyInput>
    /**
     * Filter which Solutions to update
     */
    where?: SolutionWhereInput
    /**
     * Limit how many Solutions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SolutionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Solution upsert
   */
  export type SolutionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solution
     */
    select?: SolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Solution
     */
    omit?: SolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SolutionInclude<ExtArgs> | null
    /**
     * The filter to search for the Solution to update in case it exists.
     */
    where: SolutionWhereUniqueInput
    /**
     * In case the Solution found by the `where` argument doesn't exist, create a new Solution with this data.
     */
    create: XOR<SolutionCreateInput, SolutionUncheckedCreateInput>
    /**
     * In case the Solution was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SolutionUpdateInput, SolutionUncheckedUpdateInput>
  }

  /**
   * Solution delete
   */
  export type SolutionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solution
     */
    select?: SolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Solution
     */
    omit?: SolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SolutionInclude<ExtArgs> | null
    /**
     * Filter which Solution to delete.
     */
    where: SolutionWhereUniqueInput
  }

  /**
   * Solution deleteMany
   */
  export type SolutionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Solutions to delete
     */
    where?: SolutionWhereInput
    /**
     * Limit how many Solutions to delete.
     */
    limit?: number
  }

  /**
   * Solution without action
   */
  export type SolutionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Solution
     */
    select?: SolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Solution
     */
    omit?: SolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SolutionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    emailVerified: 'emailVerified',
    image: 'image',
    password: 'password',
    role: 'role',
    farmerCardNumber: 'farmerCardNumber',
    companyName: 'companyName',
    address: 'address',
    contactNumber: 'contactNumber',
    krishiStars: 'krishiStars',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CropFeedScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    imageUrl: 'imageUrl',
    isAiQuery: 'isAiQuery',
    aiResponse: 'aiResponse',
    wasHelpful: 'wasHelpful',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId'
  };

  export type CropFeedScalarFieldEnum = (typeof CropFeedScalarFieldEnum)[keyof typeof CropFeedScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    content: 'content',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    cropFeedId: 'cropFeedId',
    userId: 'userId'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const SoilTestRequestScalarFieldEnum: {
    id: 'id',
    location: 'location',
    contactNumber: 'contactNumber',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    farmerId: 'farmerId'
  };

  export type SoilTestRequestScalarFieldEnum = (typeof SoilTestRequestScalarFieldEnum)[keyof typeof SoilTestRequestScalarFieldEnum]


  export const SoilTestReportScalarFieldEnum: {
    id: 'id',
    reportUrl: 'reportUrl',
    soilCollectionUrl: 'soilCollectionUrl',
    farmerPhotoUrl: 'farmerPhotoUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    requestId: 'requestId',
    soilTesterId: 'soilTesterId'
  };

  export type SoilTestReportScalarFieldEnum = (typeof SoilTestReportScalarFieldEnum)[keyof typeof SoilTestReportScalarFieldEnum]


  export const FeedbackScalarFieldEnum: {
    id: 'id',
    rating: 'rating',
    comment: 'comment',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    giverId: 'giverId'
  };

  export type FeedbackScalarFieldEnum = (typeof FeedbackScalarFieldEnum)[keyof typeof FeedbackScalarFieldEnum]


  export const MarketPriceScalarFieldEnum: {
    id: 'id',
    cropName: 'cropName',
    marketName: 'marketName',
    price: 'price',
    date: 'date',
    cropType: 'cropType',
    imageUrl: 'imageUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    agentId: 'agentId'
  };

  export type MarketPriceScalarFieldEnum = (typeof MarketPriceScalarFieldEnum)[keyof typeof MarketPriceScalarFieldEnum]


  export const BiddingScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    imageUrl: 'imageUrl',
    basePrice: 'basePrice',
    address: 'address',
    contactNumber: 'contactNumber',
    status: 'status',
    endDate: 'endDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    winningBidId: 'winningBidId'
  };

  export type BiddingScalarFieldEnum = (typeof BiddingScalarFieldEnum)[keyof typeof BiddingScalarFieldEnum]


  export const BidScalarFieldEnum: {
    id: 'id',
    amount: 'amount',
    status: 'status',
    createdAt: 'createdAt',
    biddingId: 'biddingId',
    userId: 'userId'
  };

  export type BidScalarFieldEnum = (typeof BidScalarFieldEnum)[keyof typeof BidScalarFieldEnum]


  export const SolutionScalarFieldEnum: {
    id: 'id',
    description: 'description',
    imageUrl: 'imageUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    cropFeedId: 'cropFeedId'
  };

  export type SolutionScalarFieldEnum = (typeof SolutionScalarFieldEnum)[keyof typeof SolutionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'BiddingStatus'
   */
  export type EnumBiddingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BiddingStatus'>
    


  /**
   * Reference to a field of type 'BiddingStatus[]'
   */
  export type ListEnumBiddingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BiddingStatus[]'>
    


  /**
   * Reference to a field of type 'BidStatus'
   */
  export type EnumBidStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BidStatus'>
    


  /**
   * Reference to a field of type 'BidStatus[]'
   */
  export type ListEnumBidStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BidStatus[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    email?: StringFilter<"User"> | string
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    farmerCardNumber?: StringNullableFilter<"User"> | string | null
    companyName?: StringNullableFilter<"User"> | string | null
    address?: StringNullableFilter<"User"> | string | null
    contactNumber?: StringNullableFilter<"User"> | string | null
    krishiStars?: IntFilter<"User"> | number
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    cropFeeds?: CropFeedListRelationFilter
    soilTestRequests?: SoilTestRequestListRelationFilter
    soilTestReports?: SoilTestReportListRelationFilter
    feedbacks?: FeedbackListRelationFilter
    givenFeedbacks?: FeedbackListRelationFilter
    marketPrices?: MarketPriceListRelationFilter
    biddings?: BiddingListRelationFilter
    bids?: BidListRelationFilter
    solutions?: SolutionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    role?: SortOrder
    farmerCardNumber?: SortOrderInput | SortOrder
    companyName?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    contactNumber?: SortOrderInput | SortOrder
    krishiStars?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    cropFeeds?: CropFeedOrderByRelationAggregateInput
    soilTestRequests?: SoilTestRequestOrderByRelationAggregateInput
    soilTestReports?: SoilTestReportOrderByRelationAggregateInput
    feedbacks?: FeedbackOrderByRelationAggregateInput
    givenFeedbacks?: FeedbackOrderByRelationAggregateInput
    marketPrices?: MarketPriceOrderByRelationAggregateInput
    biddings?: BiddingOrderByRelationAggregateInput
    bids?: BidOrderByRelationAggregateInput
    solutions?: SolutionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    farmerCardNumber?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    password?: StringNullableFilter<"User"> | string | null
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    companyName?: StringNullableFilter<"User"> | string | null
    address?: StringNullableFilter<"User"> | string | null
    contactNumber?: StringNullableFilter<"User"> | string | null
    krishiStars?: IntFilter<"User"> | number
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    cropFeeds?: CropFeedListRelationFilter
    soilTestRequests?: SoilTestRequestListRelationFilter
    soilTestReports?: SoilTestReportListRelationFilter
    feedbacks?: FeedbackListRelationFilter
    givenFeedbacks?: FeedbackListRelationFilter
    marketPrices?: MarketPriceListRelationFilter
    biddings?: BiddingListRelationFilter
    bids?: BidListRelationFilter
    solutions?: SolutionListRelationFilter
  }, "id" | "email" | "farmerCardNumber">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    role?: SortOrder
    farmerCardNumber?: SortOrderInput | SortOrder
    companyName?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    contactNumber?: SortOrderInput | SortOrder
    krishiStars?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringWithAggregatesFilter<"User"> | string
    emailVerified?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    farmerCardNumber?: StringNullableWithAggregatesFilter<"User"> | string | null
    companyName?: StringNullableWithAggregatesFilter<"User"> | string | null
    address?: StringNullableWithAggregatesFilter<"User"> | string | null
    contactNumber?: StringNullableWithAggregatesFilter<"User"> | string | null
    krishiStars?: IntWithAggregatesFilter<"User"> | number
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type CropFeedWhereInput = {
    AND?: CropFeedWhereInput | CropFeedWhereInput[]
    OR?: CropFeedWhereInput[]
    NOT?: CropFeedWhereInput | CropFeedWhereInput[]
    id?: StringFilter<"CropFeed"> | string
    title?: StringFilter<"CropFeed"> | string
    description?: StringFilter<"CropFeed"> | string
    imageUrl?: StringNullableFilter<"CropFeed"> | string | null
    isAiQuery?: BoolFilter<"CropFeed"> | boolean
    aiResponse?: StringNullableFilter<"CropFeed"> | string | null
    wasHelpful?: BoolNullableFilter<"CropFeed"> | boolean | null
    createdAt?: DateTimeFilter<"CropFeed"> | Date | string
    updatedAt?: DateTimeFilter<"CropFeed"> | Date | string
    userId?: StringFilter<"CropFeed"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    comments?: CommentListRelationFilter
    solutions?: SolutionListRelationFilter
  }

  export type CropFeedOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    isAiQuery?: SortOrder
    aiResponse?: SortOrderInput | SortOrder
    wasHelpful?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    comments?: CommentOrderByRelationAggregateInput
    solutions?: SolutionOrderByRelationAggregateInput
  }

  export type CropFeedWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CropFeedWhereInput | CropFeedWhereInput[]
    OR?: CropFeedWhereInput[]
    NOT?: CropFeedWhereInput | CropFeedWhereInput[]
    title?: StringFilter<"CropFeed"> | string
    description?: StringFilter<"CropFeed"> | string
    imageUrl?: StringNullableFilter<"CropFeed"> | string | null
    isAiQuery?: BoolFilter<"CropFeed"> | boolean
    aiResponse?: StringNullableFilter<"CropFeed"> | string | null
    wasHelpful?: BoolNullableFilter<"CropFeed"> | boolean | null
    createdAt?: DateTimeFilter<"CropFeed"> | Date | string
    updatedAt?: DateTimeFilter<"CropFeed"> | Date | string
    userId?: StringFilter<"CropFeed"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    comments?: CommentListRelationFilter
    solutions?: SolutionListRelationFilter
  }, "id">

  export type CropFeedOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    isAiQuery?: SortOrder
    aiResponse?: SortOrderInput | SortOrder
    wasHelpful?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    _count?: CropFeedCountOrderByAggregateInput
    _max?: CropFeedMaxOrderByAggregateInput
    _min?: CropFeedMinOrderByAggregateInput
  }

  export type CropFeedScalarWhereWithAggregatesInput = {
    AND?: CropFeedScalarWhereWithAggregatesInput | CropFeedScalarWhereWithAggregatesInput[]
    OR?: CropFeedScalarWhereWithAggregatesInput[]
    NOT?: CropFeedScalarWhereWithAggregatesInput | CropFeedScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CropFeed"> | string
    title?: StringWithAggregatesFilter<"CropFeed"> | string
    description?: StringWithAggregatesFilter<"CropFeed"> | string
    imageUrl?: StringNullableWithAggregatesFilter<"CropFeed"> | string | null
    isAiQuery?: BoolWithAggregatesFilter<"CropFeed"> | boolean
    aiResponse?: StringNullableWithAggregatesFilter<"CropFeed"> | string | null
    wasHelpful?: BoolNullableWithAggregatesFilter<"CropFeed"> | boolean | null
    createdAt?: DateTimeWithAggregatesFilter<"CropFeed"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CropFeed"> | Date | string
    userId?: StringWithAggregatesFilter<"CropFeed"> | string
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: StringFilter<"Comment"> | string
    content?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    cropFeedId?: StringFilter<"Comment"> | string
    userId?: StringFilter<"Comment"> | string
    cropFeed?: XOR<CropFeedScalarRelationFilter, CropFeedWhereInput>
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    cropFeedId?: SortOrder
    userId?: SortOrder
    cropFeed?: CropFeedOrderByWithRelationInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    content?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    cropFeedId?: StringFilter<"Comment"> | string
    userId?: StringFilter<"Comment"> | string
    cropFeed?: XOR<CropFeedScalarRelationFilter, CropFeedWhereInput>
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    cropFeedId?: SortOrder
    userId?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Comment"> | string
    content?: StringWithAggregatesFilter<"Comment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    cropFeedId?: StringWithAggregatesFilter<"Comment"> | string
    userId?: StringWithAggregatesFilter<"Comment"> | string
  }

  export type SoilTestRequestWhereInput = {
    AND?: SoilTestRequestWhereInput | SoilTestRequestWhereInput[]
    OR?: SoilTestRequestWhereInput[]
    NOT?: SoilTestRequestWhereInput | SoilTestRequestWhereInput[]
    id?: StringFilter<"SoilTestRequest"> | string
    location?: StringFilter<"SoilTestRequest"> | string
    contactNumber?: StringFilter<"SoilTestRequest"> | string
    status?: StringFilter<"SoilTestRequest"> | string
    createdAt?: DateTimeFilter<"SoilTestRequest"> | Date | string
    updatedAt?: DateTimeFilter<"SoilTestRequest"> | Date | string
    farmerId?: StringFilter<"SoilTestRequest"> | string
    farmer?: XOR<UserScalarRelationFilter, UserWhereInput>
    reports?: SoilTestReportListRelationFilter
  }

  export type SoilTestRequestOrderByWithRelationInput = {
    id?: SortOrder
    location?: SortOrder
    contactNumber?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    farmerId?: SortOrder
    farmer?: UserOrderByWithRelationInput
    reports?: SoilTestReportOrderByRelationAggregateInput
  }

  export type SoilTestRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SoilTestRequestWhereInput | SoilTestRequestWhereInput[]
    OR?: SoilTestRequestWhereInput[]
    NOT?: SoilTestRequestWhereInput | SoilTestRequestWhereInput[]
    location?: StringFilter<"SoilTestRequest"> | string
    contactNumber?: StringFilter<"SoilTestRequest"> | string
    status?: StringFilter<"SoilTestRequest"> | string
    createdAt?: DateTimeFilter<"SoilTestRequest"> | Date | string
    updatedAt?: DateTimeFilter<"SoilTestRequest"> | Date | string
    farmerId?: StringFilter<"SoilTestRequest"> | string
    farmer?: XOR<UserScalarRelationFilter, UserWhereInput>
    reports?: SoilTestReportListRelationFilter
  }, "id">

  export type SoilTestRequestOrderByWithAggregationInput = {
    id?: SortOrder
    location?: SortOrder
    contactNumber?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    farmerId?: SortOrder
    _count?: SoilTestRequestCountOrderByAggregateInput
    _max?: SoilTestRequestMaxOrderByAggregateInput
    _min?: SoilTestRequestMinOrderByAggregateInput
  }

  export type SoilTestRequestScalarWhereWithAggregatesInput = {
    AND?: SoilTestRequestScalarWhereWithAggregatesInput | SoilTestRequestScalarWhereWithAggregatesInput[]
    OR?: SoilTestRequestScalarWhereWithAggregatesInput[]
    NOT?: SoilTestRequestScalarWhereWithAggregatesInput | SoilTestRequestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SoilTestRequest"> | string
    location?: StringWithAggregatesFilter<"SoilTestRequest"> | string
    contactNumber?: StringWithAggregatesFilter<"SoilTestRequest"> | string
    status?: StringWithAggregatesFilter<"SoilTestRequest"> | string
    createdAt?: DateTimeWithAggregatesFilter<"SoilTestRequest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SoilTestRequest"> | Date | string
    farmerId?: StringWithAggregatesFilter<"SoilTestRequest"> | string
  }

  export type SoilTestReportWhereInput = {
    AND?: SoilTestReportWhereInput | SoilTestReportWhereInput[]
    OR?: SoilTestReportWhereInput[]
    NOT?: SoilTestReportWhereInput | SoilTestReportWhereInput[]
    id?: StringFilter<"SoilTestReport"> | string
    reportUrl?: StringFilter<"SoilTestReport"> | string
    soilCollectionUrl?: StringFilter<"SoilTestReport"> | string
    farmerPhotoUrl?: StringFilter<"SoilTestReport"> | string
    createdAt?: DateTimeFilter<"SoilTestReport"> | Date | string
    updatedAt?: DateTimeFilter<"SoilTestReport"> | Date | string
    requestId?: StringFilter<"SoilTestReport"> | string
    soilTesterId?: StringFilter<"SoilTestReport"> | string
    request?: XOR<SoilTestRequestScalarRelationFilter, SoilTestRequestWhereInput>
    soilTester?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SoilTestReportOrderByWithRelationInput = {
    id?: SortOrder
    reportUrl?: SortOrder
    soilCollectionUrl?: SortOrder
    farmerPhotoUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    requestId?: SortOrder
    soilTesterId?: SortOrder
    request?: SoilTestRequestOrderByWithRelationInput
    soilTester?: UserOrderByWithRelationInput
  }

  export type SoilTestReportWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SoilTestReportWhereInput | SoilTestReportWhereInput[]
    OR?: SoilTestReportWhereInput[]
    NOT?: SoilTestReportWhereInput | SoilTestReportWhereInput[]
    reportUrl?: StringFilter<"SoilTestReport"> | string
    soilCollectionUrl?: StringFilter<"SoilTestReport"> | string
    farmerPhotoUrl?: StringFilter<"SoilTestReport"> | string
    createdAt?: DateTimeFilter<"SoilTestReport"> | Date | string
    updatedAt?: DateTimeFilter<"SoilTestReport"> | Date | string
    requestId?: StringFilter<"SoilTestReport"> | string
    soilTesterId?: StringFilter<"SoilTestReport"> | string
    request?: XOR<SoilTestRequestScalarRelationFilter, SoilTestRequestWhereInput>
    soilTester?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type SoilTestReportOrderByWithAggregationInput = {
    id?: SortOrder
    reportUrl?: SortOrder
    soilCollectionUrl?: SortOrder
    farmerPhotoUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    requestId?: SortOrder
    soilTesterId?: SortOrder
    _count?: SoilTestReportCountOrderByAggregateInput
    _max?: SoilTestReportMaxOrderByAggregateInput
    _min?: SoilTestReportMinOrderByAggregateInput
  }

  export type SoilTestReportScalarWhereWithAggregatesInput = {
    AND?: SoilTestReportScalarWhereWithAggregatesInput | SoilTestReportScalarWhereWithAggregatesInput[]
    OR?: SoilTestReportScalarWhereWithAggregatesInput[]
    NOT?: SoilTestReportScalarWhereWithAggregatesInput | SoilTestReportScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SoilTestReport"> | string
    reportUrl?: StringWithAggregatesFilter<"SoilTestReport"> | string
    soilCollectionUrl?: StringWithAggregatesFilter<"SoilTestReport"> | string
    farmerPhotoUrl?: StringWithAggregatesFilter<"SoilTestReport"> | string
    createdAt?: DateTimeWithAggregatesFilter<"SoilTestReport"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SoilTestReport"> | Date | string
    requestId?: StringWithAggregatesFilter<"SoilTestReport"> | string
    soilTesterId?: StringWithAggregatesFilter<"SoilTestReport"> | string
  }

  export type FeedbackWhereInput = {
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    id?: StringFilter<"Feedback"> | string
    rating?: IntFilter<"Feedback"> | number
    comment?: StringNullableFilter<"Feedback"> | string | null
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
    updatedAt?: DateTimeFilter<"Feedback"> | Date | string
    userId?: StringFilter<"Feedback"> | string
    giverId?: StringFilter<"Feedback"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    giver?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type FeedbackOrderByWithRelationInput = {
    id?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    giverId?: SortOrder
    user?: UserOrderByWithRelationInput
    giver?: UserOrderByWithRelationInput
  }

  export type FeedbackWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    rating?: IntFilter<"Feedback"> | number
    comment?: StringNullableFilter<"Feedback"> | string | null
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
    updatedAt?: DateTimeFilter<"Feedback"> | Date | string
    userId?: StringFilter<"Feedback"> | string
    giverId?: StringFilter<"Feedback"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    giver?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type FeedbackOrderByWithAggregationInput = {
    id?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    giverId?: SortOrder
    _count?: FeedbackCountOrderByAggregateInput
    _avg?: FeedbackAvgOrderByAggregateInput
    _max?: FeedbackMaxOrderByAggregateInput
    _min?: FeedbackMinOrderByAggregateInput
    _sum?: FeedbackSumOrderByAggregateInput
  }

  export type FeedbackScalarWhereWithAggregatesInput = {
    AND?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    OR?: FeedbackScalarWhereWithAggregatesInput[]
    NOT?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Feedback"> | string
    rating?: IntWithAggregatesFilter<"Feedback"> | number
    comment?: StringNullableWithAggregatesFilter<"Feedback"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Feedback"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Feedback"> | Date | string
    userId?: StringWithAggregatesFilter<"Feedback"> | string
    giverId?: StringWithAggregatesFilter<"Feedback"> | string
  }

  export type MarketPriceWhereInput = {
    AND?: MarketPriceWhereInput | MarketPriceWhereInput[]
    OR?: MarketPriceWhereInput[]
    NOT?: MarketPriceWhereInput | MarketPriceWhereInput[]
    id?: StringFilter<"MarketPrice"> | string
    cropName?: StringFilter<"MarketPrice"> | string
    marketName?: StringFilter<"MarketPrice"> | string
    price?: FloatFilter<"MarketPrice"> | number
    date?: DateTimeFilter<"MarketPrice"> | Date | string
    cropType?: StringFilter<"MarketPrice"> | string
    imageUrl?: StringNullableFilter<"MarketPrice"> | string | null
    createdAt?: DateTimeFilter<"MarketPrice"> | Date | string
    updatedAt?: DateTimeFilter<"MarketPrice"> | Date | string
    agentId?: StringFilter<"MarketPrice"> | string
    agent?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type MarketPriceOrderByWithRelationInput = {
    id?: SortOrder
    cropName?: SortOrder
    marketName?: SortOrder
    price?: SortOrder
    date?: SortOrder
    cropType?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    agentId?: SortOrder
    agent?: UserOrderByWithRelationInput
  }

  export type MarketPriceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MarketPriceWhereInput | MarketPriceWhereInput[]
    OR?: MarketPriceWhereInput[]
    NOT?: MarketPriceWhereInput | MarketPriceWhereInput[]
    cropName?: StringFilter<"MarketPrice"> | string
    marketName?: StringFilter<"MarketPrice"> | string
    price?: FloatFilter<"MarketPrice"> | number
    date?: DateTimeFilter<"MarketPrice"> | Date | string
    cropType?: StringFilter<"MarketPrice"> | string
    imageUrl?: StringNullableFilter<"MarketPrice"> | string | null
    createdAt?: DateTimeFilter<"MarketPrice"> | Date | string
    updatedAt?: DateTimeFilter<"MarketPrice"> | Date | string
    agentId?: StringFilter<"MarketPrice"> | string
    agent?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type MarketPriceOrderByWithAggregationInput = {
    id?: SortOrder
    cropName?: SortOrder
    marketName?: SortOrder
    price?: SortOrder
    date?: SortOrder
    cropType?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    agentId?: SortOrder
    _count?: MarketPriceCountOrderByAggregateInput
    _avg?: MarketPriceAvgOrderByAggregateInput
    _max?: MarketPriceMaxOrderByAggregateInput
    _min?: MarketPriceMinOrderByAggregateInput
    _sum?: MarketPriceSumOrderByAggregateInput
  }

  export type MarketPriceScalarWhereWithAggregatesInput = {
    AND?: MarketPriceScalarWhereWithAggregatesInput | MarketPriceScalarWhereWithAggregatesInput[]
    OR?: MarketPriceScalarWhereWithAggregatesInput[]
    NOT?: MarketPriceScalarWhereWithAggregatesInput | MarketPriceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MarketPrice"> | string
    cropName?: StringWithAggregatesFilter<"MarketPrice"> | string
    marketName?: StringWithAggregatesFilter<"MarketPrice"> | string
    price?: FloatWithAggregatesFilter<"MarketPrice"> | number
    date?: DateTimeWithAggregatesFilter<"MarketPrice"> | Date | string
    cropType?: StringWithAggregatesFilter<"MarketPrice"> | string
    imageUrl?: StringNullableWithAggregatesFilter<"MarketPrice"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"MarketPrice"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MarketPrice"> | Date | string
    agentId?: StringWithAggregatesFilter<"MarketPrice"> | string
  }

  export type BiddingWhereInput = {
    AND?: BiddingWhereInput | BiddingWhereInput[]
    OR?: BiddingWhereInput[]
    NOT?: BiddingWhereInput | BiddingWhereInput[]
    id?: StringFilter<"Bidding"> | string
    title?: StringFilter<"Bidding"> | string
    description?: StringFilter<"Bidding"> | string
    imageUrl?: StringNullableFilter<"Bidding"> | string | null
    basePrice?: FloatFilter<"Bidding"> | number
    address?: StringFilter<"Bidding"> | string
    contactNumber?: StringFilter<"Bidding"> | string
    status?: EnumBiddingStatusFilter<"Bidding"> | $Enums.BiddingStatus
    endDate?: DateTimeNullableFilter<"Bidding"> | Date | string | null
    createdAt?: DateTimeFilter<"Bidding"> | Date | string
    updatedAt?: DateTimeFilter<"Bidding"> | Date | string
    userId?: StringFilter<"Bidding"> | string
    winningBidId?: StringNullableFilter<"Bidding"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    bids?: BidListRelationFilter
    winningBid?: XOR<BidNullableScalarRelationFilter, BidWhereInput> | null
  }

  export type BiddingOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    basePrice?: SortOrder
    address?: SortOrder
    contactNumber?: SortOrder
    status?: SortOrder
    endDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    winningBidId?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    bids?: BidOrderByRelationAggregateInput
    winningBid?: BidOrderByWithRelationInput
  }

  export type BiddingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    winningBidId?: string
    AND?: BiddingWhereInput | BiddingWhereInput[]
    OR?: BiddingWhereInput[]
    NOT?: BiddingWhereInput | BiddingWhereInput[]
    title?: StringFilter<"Bidding"> | string
    description?: StringFilter<"Bidding"> | string
    imageUrl?: StringNullableFilter<"Bidding"> | string | null
    basePrice?: FloatFilter<"Bidding"> | number
    address?: StringFilter<"Bidding"> | string
    contactNumber?: StringFilter<"Bidding"> | string
    status?: EnumBiddingStatusFilter<"Bidding"> | $Enums.BiddingStatus
    endDate?: DateTimeNullableFilter<"Bidding"> | Date | string | null
    createdAt?: DateTimeFilter<"Bidding"> | Date | string
    updatedAt?: DateTimeFilter<"Bidding"> | Date | string
    userId?: StringFilter<"Bidding"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    bids?: BidListRelationFilter
    winningBid?: XOR<BidNullableScalarRelationFilter, BidWhereInput> | null
  }, "id" | "winningBidId">

  export type BiddingOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    basePrice?: SortOrder
    address?: SortOrder
    contactNumber?: SortOrder
    status?: SortOrder
    endDate?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    winningBidId?: SortOrderInput | SortOrder
    _count?: BiddingCountOrderByAggregateInput
    _avg?: BiddingAvgOrderByAggregateInput
    _max?: BiddingMaxOrderByAggregateInput
    _min?: BiddingMinOrderByAggregateInput
    _sum?: BiddingSumOrderByAggregateInput
  }

  export type BiddingScalarWhereWithAggregatesInput = {
    AND?: BiddingScalarWhereWithAggregatesInput | BiddingScalarWhereWithAggregatesInput[]
    OR?: BiddingScalarWhereWithAggregatesInput[]
    NOT?: BiddingScalarWhereWithAggregatesInput | BiddingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Bidding"> | string
    title?: StringWithAggregatesFilter<"Bidding"> | string
    description?: StringWithAggregatesFilter<"Bidding"> | string
    imageUrl?: StringNullableWithAggregatesFilter<"Bidding"> | string | null
    basePrice?: FloatWithAggregatesFilter<"Bidding"> | number
    address?: StringWithAggregatesFilter<"Bidding"> | string
    contactNumber?: StringWithAggregatesFilter<"Bidding"> | string
    status?: EnumBiddingStatusWithAggregatesFilter<"Bidding"> | $Enums.BiddingStatus
    endDate?: DateTimeNullableWithAggregatesFilter<"Bidding"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Bidding"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Bidding"> | Date | string
    userId?: StringWithAggregatesFilter<"Bidding"> | string
    winningBidId?: StringNullableWithAggregatesFilter<"Bidding"> | string | null
  }

  export type BidWhereInput = {
    AND?: BidWhereInput | BidWhereInput[]
    OR?: BidWhereInput[]
    NOT?: BidWhereInput | BidWhereInput[]
    id?: StringFilter<"Bid"> | string
    amount?: FloatFilter<"Bid"> | number
    status?: EnumBidStatusFilter<"Bid"> | $Enums.BidStatus
    createdAt?: DateTimeFilter<"Bid"> | Date | string
    biddingId?: StringFilter<"Bid"> | string
    userId?: StringFilter<"Bid"> | string
    bidding?: XOR<BiddingScalarRelationFilter, BiddingWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    wonBidding?: XOR<BiddingNullableScalarRelationFilter, BiddingWhereInput> | null
  }

  export type BidOrderByWithRelationInput = {
    id?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    biddingId?: SortOrder
    userId?: SortOrder
    bidding?: BiddingOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    wonBidding?: BiddingOrderByWithRelationInput
  }

  export type BidWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BidWhereInput | BidWhereInput[]
    OR?: BidWhereInput[]
    NOT?: BidWhereInput | BidWhereInput[]
    amount?: FloatFilter<"Bid"> | number
    status?: EnumBidStatusFilter<"Bid"> | $Enums.BidStatus
    createdAt?: DateTimeFilter<"Bid"> | Date | string
    biddingId?: StringFilter<"Bid"> | string
    userId?: StringFilter<"Bid"> | string
    bidding?: XOR<BiddingScalarRelationFilter, BiddingWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    wonBidding?: XOR<BiddingNullableScalarRelationFilter, BiddingWhereInput> | null
  }, "id">

  export type BidOrderByWithAggregationInput = {
    id?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    biddingId?: SortOrder
    userId?: SortOrder
    _count?: BidCountOrderByAggregateInput
    _avg?: BidAvgOrderByAggregateInput
    _max?: BidMaxOrderByAggregateInput
    _min?: BidMinOrderByAggregateInput
    _sum?: BidSumOrderByAggregateInput
  }

  export type BidScalarWhereWithAggregatesInput = {
    AND?: BidScalarWhereWithAggregatesInput | BidScalarWhereWithAggregatesInput[]
    OR?: BidScalarWhereWithAggregatesInput[]
    NOT?: BidScalarWhereWithAggregatesInput | BidScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Bid"> | string
    amount?: FloatWithAggregatesFilter<"Bid"> | number
    status?: EnumBidStatusWithAggregatesFilter<"Bid"> | $Enums.BidStatus
    createdAt?: DateTimeWithAggregatesFilter<"Bid"> | Date | string
    biddingId?: StringWithAggregatesFilter<"Bid"> | string
    userId?: StringWithAggregatesFilter<"Bid"> | string
  }

  export type SolutionWhereInput = {
    AND?: SolutionWhereInput | SolutionWhereInput[]
    OR?: SolutionWhereInput[]
    NOT?: SolutionWhereInput | SolutionWhereInput[]
    id?: StringFilter<"Solution"> | string
    description?: StringFilter<"Solution"> | string
    imageUrl?: StringNullableFilter<"Solution"> | string | null
    createdAt?: DateTimeFilter<"Solution"> | Date | string
    updatedAt?: DateTimeFilter<"Solution"> | Date | string
    userId?: StringFilter<"Solution"> | string
    cropFeedId?: StringFilter<"Solution"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    cropFeed?: XOR<CropFeedScalarRelationFilter, CropFeedWhereInput>
  }

  export type SolutionOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    cropFeedId?: SortOrder
    user?: UserOrderByWithRelationInput
    cropFeed?: CropFeedOrderByWithRelationInput
  }

  export type SolutionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SolutionWhereInput | SolutionWhereInput[]
    OR?: SolutionWhereInput[]
    NOT?: SolutionWhereInput | SolutionWhereInput[]
    description?: StringFilter<"Solution"> | string
    imageUrl?: StringNullableFilter<"Solution"> | string | null
    createdAt?: DateTimeFilter<"Solution"> | Date | string
    updatedAt?: DateTimeFilter<"Solution"> | Date | string
    userId?: StringFilter<"Solution"> | string
    cropFeedId?: StringFilter<"Solution"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    cropFeed?: XOR<CropFeedScalarRelationFilter, CropFeedWhereInput>
  }, "id">

  export type SolutionOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    cropFeedId?: SortOrder
    _count?: SolutionCountOrderByAggregateInput
    _max?: SolutionMaxOrderByAggregateInput
    _min?: SolutionMinOrderByAggregateInput
  }

  export type SolutionScalarWhereWithAggregatesInput = {
    AND?: SolutionScalarWhereWithAggregatesInput | SolutionScalarWhereWithAggregatesInput[]
    OR?: SolutionScalarWhereWithAggregatesInput[]
    NOT?: SolutionScalarWhereWithAggregatesInput | SolutionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Solution"> | string
    description?: StringWithAggregatesFilter<"Solution"> | string
    imageUrl?: StringNullableWithAggregatesFilter<"Solution"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Solution"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Solution"> | Date | string
    userId?: StringWithAggregatesFilter<"Solution"> | string
    cropFeedId?: StringWithAggregatesFilter<"Solution"> | string
  }

  export type UserCreateInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    farmerCardNumber?: string | null
    companyName?: string | null
    address?: string | null
    contactNumber?: string | null
    krishiStars?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    cropFeeds?: CropFeedCreateNestedManyWithoutUserInput
    soilTestRequests?: SoilTestRequestCreateNestedManyWithoutFarmerInput
    soilTestReports?: SoilTestReportCreateNestedManyWithoutSoilTesterInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    givenFeedbacks?: FeedbackCreateNestedManyWithoutGiverInput
    marketPrices?: MarketPriceCreateNestedManyWithoutAgentInput
    biddings?: BiddingCreateNestedManyWithoutUserInput
    bids?: BidCreateNestedManyWithoutUserInput
    solutions?: SolutionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    farmerCardNumber?: string | null
    companyName?: string | null
    address?: string | null
    contactNumber?: string | null
    krishiStars?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    cropFeeds?: CropFeedUncheckedCreateNestedManyWithoutUserInput
    soilTestRequests?: SoilTestRequestUncheckedCreateNestedManyWithoutFarmerInput
    soilTestReports?: SoilTestReportUncheckedCreateNestedManyWithoutSoilTesterInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    givenFeedbacks?: FeedbackUncheckedCreateNestedManyWithoutGiverInput
    marketPrices?: MarketPriceUncheckedCreateNestedManyWithoutAgentInput
    biddings?: BiddingUncheckedCreateNestedManyWithoutUserInput
    bids?: BidUncheckedCreateNestedManyWithoutUserInput
    solutions?: SolutionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    farmerCardNumber?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    krishiStars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cropFeeds?: CropFeedUpdateManyWithoutUserNestedInput
    soilTestRequests?: SoilTestRequestUpdateManyWithoutFarmerNestedInput
    soilTestReports?: SoilTestReportUpdateManyWithoutSoilTesterNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    givenFeedbacks?: FeedbackUpdateManyWithoutGiverNestedInput
    marketPrices?: MarketPriceUpdateManyWithoutAgentNestedInput
    biddings?: BiddingUpdateManyWithoutUserNestedInput
    bids?: BidUpdateManyWithoutUserNestedInput
    solutions?: SolutionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    farmerCardNumber?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    krishiStars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cropFeeds?: CropFeedUncheckedUpdateManyWithoutUserNestedInput
    soilTestRequests?: SoilTestRequestUncheckedUpdateManyWithoutFarmerNestedInput
    soilTestReports?: SoilTestReportUncheckedUpdateManyWithoutSoilTesterNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    givenFeedbacks?: FeedbackUncheckedUpdateManyWithoutGiverNestedInput
    marketPrices?: MarketPriceUncheckedUpdateManyWithoutAgentNestedInput
    biddings?: BiddingUncheckedUpdateManyWithoutUserNestedInput
    bids?: BidUncheckedUpdateManyWithoutUserNestedInput
    solutions?: SolutionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    farmerCardNumber?: string | null
    companyName?: string | null
    address?: string | null
    contactNumber?: string | null
    krishiStars?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    farmerCardNumber?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    krishiStars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    farmerCardNumber?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    krishiStars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CropFeedCreateInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    isAiQuery?: boolean
    aiResponse?: string | null
    wasHelpful?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCropFeedsInput
    comments?: CommentCreateNestedManyWithoutCropFeedInput
    solutions?: SolutionCreateNestedManyWithoutCropFeedInput
  }

  export type CropFeedUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    isAiQuery?: boolean
    aiResponse?: string | null
    wasHelpful?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    comments?: CommentUncheckedCreateNestedManyWithoutCropFeedInput
    solutions?: SolutionUncheckedCreateNestedManyWithoutCropFeedInput
  }

  export type CropFeedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAiQuery?: BoolFieldUpdateOperationsInput | boolean
    aiResponse?: NullableStringFieldUpdateOperationsInput | string | null
    wasHelpful?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCropFeedsNestedInput
    comments?: CommentUpdateManyWithoutCropFeedNestedInput
    solutions?: SolutionUpdateManyWithoutCropFeedNestedInput
  }

  export type CropFeedUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAiQuery?: BoolFieldUpdateOperationsInput | boolean
    aiResponse?: NullableStringFieldUpdateOperationsInput | string | null
    wasHelpful?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    comments?: CommentUncheckedUpdateManyWithoutCropFeedNestedInput
    solutions?: SolutionUncheckedUpdateManyWithoutCropFeedNestedInput
  }

  export type CropFeedCreateManyInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    isAiQuery?: boolean
    aiResponse?: string | null
    wasHelpful?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type CropFeedUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAiQuery?: BoolFieldUpdateOperationsInput | boolean
    aiResponse?: NullableStringFieldUpdateOperationsInput | string | null
    wasHelpful?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CropFeedUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAiQuery?: BoolFieldUpdateOperationsInput | boolean
    aiResponse?: NullableStringFieldUpdateOperationsInput | string | null
    wasHelpful?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    cropFeed: CropFeedCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    cropFeedId: string
    userId: string
  }

  export type CommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    cropFeed?: CropFeedUpdateOneRequiredWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cropFeedId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentCreateManyInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    cropFeedId: string
    userId: string
  }

  export type CommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cropFeedId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type SoilTestRequestCreateInput = {
    id?: string
    location: string
    contactNumber: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    farmer: UserCreateNestedOneWithoutSoilTestRequestsInput
    reports?: SoilTestReportCreateNestedManyWithoutRequestInput
  }

  export type SoilTestRequestUncheckedCreateInput = {
    id?: string
    location: string
    contactNumber: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    farmerId: string
    reports?: SoilTestReportUncheckedCreateNestedManyWithoutRequestInput
  }

  export type SoilTestRequestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    farmer?: UserUpdateOneRequiredWithoutSoilTestRequestsNestedInput
    reports?: SoilTestReportUpdateManyWithoutRequestNestedInput
  }

  export type SoilTestRequestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    farmerId?: StringFieldUpdateOperationsInput | string
    reports?: SoilTestReportUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type SoilTestRequestCreateManyInput = {
    id?: string
    location: string
    contactNumber: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    farmerId: string
  }

  export type SoilTestRequestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SoilTestRequestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    farmerId?: StringFieldUpdateOperationsInput | string
  }

  export type SoilTestReportCreateInput = {
    id?: string
    reportUrl: string
    soilCollectionUrl: string
    farmerPhotoUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    request: SoilTestRequestCreateNestedOneWithoutReportsInput
    soilTester: UserCreateNestedOneWithoutSoilTestReportsInput
  }

  export type SoilTestReportUncheckedCreateInput = {
    id?: string
    reportUrl: string
    soilCollectionUrl: string
    farmerPhotoUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    requestId: string
    soilTesterId: string
  }

  export type SoilTestReportUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportUrl?: StringFieldUpdateOperationsInput | string
    soilCollectionUrl?: StringFieldUpdateOperationsInput | string
    farmerPhotoUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    request?: SoilTestRequestUpdateOneRequiredWithoutReportsNestedInput
    soilTester?: UserUpdateOneRequiredWithoutSoilTestReportsNestedInput
  }

  export type SoilTestReportUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportUrl?: StringFieldUpdateOperationsInput | string
    soilCollectionUrl?: StringFieldUpdateOperationsInput | string
    farmerPhotoUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requestId?: StringFieldUpdateOperationsInput | string
    soilTesterId?: StringFieldUpdateOperationsInput | string
  }

  export type SoilTestReportCreateManyInput = {
    id?: string
    reportUrl: string
    soilCollectionUrl: string
    farmerPhotoUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    requestId: string
    soilTesterId: string
  }

  export type SoilTestReportUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportUrl?: StringFieldUpdateOperationsInput | string
    soilCollectionUrl?: StringFieldUpdateOperationsInput | string
    farmerPhotoUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SoilTestReportUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportUrl?: StringFieldUpdateOperationsInput | string
    soilCollectionUrl?: StringFieldUpdateOperationsInput | string
    farmerPhotoUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requestId?: StringFieldUpdateOperationsInput | string
    soilTesterId?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackCreateInput = {
    id?: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutFeedbacksInput
    giver: UserCreateNestedOneWithoutGivenFeedbacksInput
  }

  export type FeedbackUncheckedCreateInput = {
    id?: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    giverId: string
  }

  export type FeedbackUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFeedbacksNestedInput
    giver?: UserUpdateOneRequiredWithoutGivenFeedbacksNestedInput
  }

  export type FeedbackUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    giverId?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackCreateManyInput = {
    id?: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    giverId: string
  }

  export type FeedbackUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    giverId?: StringFieldUpdateOperationsInput | string
  }

  export type MarketPriceCreateInput = {
    id?: string
    cropName: string
    marketName: string
    price: number
    date: Date | string
    cropType: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agent: UserCreateNestedOneWithoutMarketPricesInput
  }

  export type MarketPriceUncheckedCreateInput = {
    id?: string
    cropName: string
    marketName: string
    price: number
    date: Date | string
    cropType: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agentId: string
  }

  export type MarketPriceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    cropName?: StringFieldUpdateOperationsInput | string
    marketName?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    cropType?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agent?: UserUpdateOneRequiredWithoutMarketPricesNestedInput
  }

  export type MarketPriceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    cropName?: StringFieldUpdateOperationsInput | string
    marketName?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    cropType?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agentId?: StringFieldUpdateOperationsInput | string
  }

  export type MarketPriceCreateManyInput = {
    id?: string
    cropName: string
    marketName: string
    price: number
    date: Date | string
    cropType: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    agentId: string
  }

  export type MarketPriceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    cropName?: StringFieldUpdateOperationsInput | string
    marketName?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    cropType?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MarketPriceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    cropName?: StringFieldUpdateOperationsInput | string
    marketName?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    cropType?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    agentId?: StringFieldUpdateOperationsInput | string
  }

  export type BiddingCreateInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    basePrice: number
    address: string
    contactNumber: string
    status?: $Enums.BiddingStatus
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBiddingsInput
    bids?: BidCreateNestedManyWithoutBiddingInput
    winningBid?: BidCreateNestedOneWithoutWonBiddingInput
  }

  export type BiddingUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    basePrice: number
    address: string
    contactNumber: string
    status?: $Enums.BiddingStatus
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    winningBidId?: string | null
    bids?: BidUncheckedCreateNestedManyWithoutBiddingInput
  }

  export type BiddingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    basePrice?: FloatFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    status?: EnumBiddingStatusFieldUpdateOperationsInput | $Enums.BiddingStatus
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBiddingsNestedInput
    bids?: BidUpdateManyWithoutBiddingNestedInput
    winningBid?: BidUpdateOneWithoutWonBiddingNestedInput
  }

  export type BiddingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    basePrice?: FloatFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    status?: EnumBiddingStatusFieldUpdateOperationsInput | $Enums.BiddingStatus
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    winningBidId?: NullableStringFieldUpdateOperationsInput | string | null
    bids?: BidUncheckedUpdateManyWithoutBiddingNestedInput
  }

  export type BiddingCreateManyInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    basePrice: number
    address: string
    contactNumber: string
    status?: $Enums.BiddingStatus
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    winningBidId?: string | null
  }

  export type BiddingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    basePrice?: FloatFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    status?: EnumBiddingStatusFieldUpdateOperationsInput | $Enums.BiddingStatus
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BiddingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    basePrice?: FloatFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    status?: EnumBiddingStatusFieldUpdateOperationsInput | $Enums.BiddingStatus
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    winningBidId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BidCreateInput = {
    id?: string
    amount: number
    status?: $Enums.BidStatus
    createdAt?: Date | string
    bidding: BiddingCreateNestedOneWithoutBidsInput
    user: UserCreateNestedOneWithoutBidsInput
    wonBidding?: BiddingCreateNestedOneWithoutWinningBidInput
  }

  export type BidUncheckedCreateInput = {
    id?: string
    amount: number
    status?: $Enums.BidStatus
    createdAt?: Date | string
    biddingId: string
    userId: string
    wonBidding?: BiddingUncheckedCreateNestedOneWithoutWinningBidInput
  }

  export type BidUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumBidStatusFieldUpdateOperationsInput | $Enums.BidStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bidding?: BiddingUpdateOneRequiredWithoutBidsNestedInput
    user?: UserUpdateOneRequiredWithoutBidsNestedInput
    wonBidding?: BiddingUpdateOneWithoutWinningBidNestedInput
  }

  export type BidUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumBidStatusFieldUpdateOperationsInput | $Enums.BidStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    biddingId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    wonBidding?: BiddingUncheckedUpdateOneWithoutWinningBidNestedInput
  }

  export type BidCreateManyInput = {
    id?: string
    amount: number
    status?: $Enums.BidStatus
    createdAt?: Date | string
    biddingId: string
    userId: string
  }

  export type BidUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumBidStatusFieldUpdateOperationsInput | $Enums.BidStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BidUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumBidStatusFieldUpdateOperationsInput | $Enums.BidStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    biddingId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type SolutionCreateInput = {
    id?: string
    description: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSolutionsInput
    cropFeed: CropFeedCreateNestedOneWithoutSolutionsInput
  }

  export type SolutionUncheckedCreateInput = {
    id?: string
    description: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    cropFeedId: string
  }

  export type SolutionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSolutionsNestedInput
    cropFeed?: CropFeedUpdateOneRequiredWithoutSolutionsNestedInput
  }

  export type SolutionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    cropFeedId?: StringFieldUpdateOperationsInput | string
  }

  export type SolutionCreateManyInput = {
    id?: string
    description: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    cropFeedId: string
  }

  export type SolutionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SolutionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    cropFeedId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CropFeedListRelationFilter = {
    every?: CropFeedWhereInput
    some?: CropFeedWhereInput
    none?: CropFeedWhereInput
  }

  export type SoilTestRequestListRelationFilter = {
    every?: SoilTestRequestWhereInput
    some?: SoilTestRequestWhereInput
    none?: SoilTestRequestWhereInput
  }

  export type SoilTestReportListRelationFilter = {
    every?: SoilTestReportWhereInput
    some?: SoilTestReportWhereInput
    none?: SoilTestReportWhereInput
  }

  export type FeedbackListRelationFilter = {
    every?: FeedbackWhereInput
    some?: FeedbackWhereInput
    none?: FeedbackWhereInput
  }

  export type MarketPriceListRelationFilter = {
    every?: MarketPriceWhereInput
    some?: MarketPriceWhereInput
    none?: MarketPriceWhereInput
  }

  export type BiddingListRelationFilter = {
    every?: BiddingWhereInput
    some?: BiddingWhereInput
    none?: BiddingWhereInput
  }

  export type BidListRelationFilter = {
    every?: BidWhereInput
    some?: BidWhereInput
    none?: BidWhereInput
  }

  export type SolutionListRelationFilter = {
    every?: SolutionWhereInput
    some?: SolutionWhereInput
    none?: SolutionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CropFeedOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SoilTestRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SoilTestReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FeedbackOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MarketPriceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BiddingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BidOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SolutionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    password?: SortOrder
    role?: SortOrder
    farmerCardNumber?: SortOrder
    companyName?: SortOrder
    address?: SortOrder
    contactNumber?: SortOrder
    krishiStars?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    krishiStars?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    password?: SortOrder
    role?: SortOrder
    farmerCardNumber?: SortOrder
    companyName?: SortOrder
    address?: SortOrder
    contactNumber?: SortOrder
    krishiStars?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    password?: SortOrder
    role?: SortOrder
    farmerCardNumber?: SortOrder
    companyName?: SortOrder
    address?: SortOrder
    contactNumber?: SortOrder
    krishiStars?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    krishiStars?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CropFeedCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    isAiQuery?: SortOrder
    aiResponse?: SortOrder
    wasHelpful?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type CropFeedMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    isAiQuery?: SortOrder
    aiResponse?: SortOrder
    wasHelpful?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type CropFeedMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    isAiQuery?: SortOrder
    aiResponse?: SortOrder
    wasHelpful?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type CropFeedScalarRelationFilter = {
    is?: CropFeedWhereInput
    isNot?: CropFeedWhereInput
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    cropFeedId?: SortOrder
    userId?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    cropFeedId?: SortOrder
    userId?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    cropFeedId?: SortOrder
    userId?: SortOrder
  }

  export type SoilTestRequestCountOrderByAggregateInput = {
    id?: SortOrder
    location?: SortOrder
    contactNumber?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    farmerId?: SortOrder
  }

  export type SoilTestRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    location?: SortOrder
    contactNumber?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    farmerId?: SortOrder
  }

  export type SoilTestRequestMinOrderByAggregateInput = {
    id?: SortOrder
    location?: SortOrder
    contactNumber?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    farmerId?: SortOrder
  }

  export type SoilTestRequestScalarRelationFilter = {
    is?: SoilTestRequestWhereInput
    isNot?: SoilTestRequestWhereInput
  }

  export type SoilTestReportCountOrderByAggregateInput = {
    id?: SortOrder
    reportUrl?: SortOrder
    soilCollectionUrl?: SortOrder
    farmerPhotoUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    requestId?: SortOrder
    soilTesterId?: SortOrder
  }

  export type SoilTestReportMaxOrderByAggregateInput = {
    id?: SortOrder
    reportUrl?: SortOrder
    soilCollectionUrl?: SortOrder
    farmerPhotoUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    requestId?: SortOrder
    soilTesterId?: SortOrder
  }

  export type SoilTestReportMinOrderByAggregateInput = {
    id?: SortOrder
    reportUrl?: SortOrder
    soilCollectionUrl?: SortOrder
    farmerPhotoUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    requestId?: SortOrder
    soilTesterId?: SortOrder
  }

  export type FeedbackCountOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    giverId?: SortOrder
  }

  export type FeedbackAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type FeedbackMaxOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    giverId?: SortOrder
  }

  export type FeedbackMinOrderByAggregateInput = {
    id?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    giverId?: SortOrder
  }

  export type FeedbackSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type MarketPriceCountOrderByAggregateInput = {
    id?: SortOrder
    cropName?: SortOrder
    marketName?: SortOrder
    price?: SortOrder
    date?: SortOrder
    cropType?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    agentId?: SortOrder
  }

  export type MarketPriceAvgOrderByAggregateInput = {
    price?: SortOrder
  }

  export type MarketPriceMaxOrderByAggregateInput = {
    id?: SortOrder
    cropName?: SortOrder
    marketName?: SortOrder
    price?: SortOrder
    date?: SortOrder
    cropType?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    agentId?: SortOrder
  }

  export type MarketPriceMinOrderByAggregateInput = {
    id?: SortOrder
    cropName?: SortOrder
    marketName?: SortOrder
    price?: SortOrder
    date?: SortOrder
    cropType?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    agentId?: SortOrder
  }

  export type MarketPriceSumOrderByAggregateInput = {
    price?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumBiddingStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BiddingStatus | EnumBiddingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BiddingStatus[] | ListEnumBiddingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BiddingStatus[] | ListEnumBiddingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBiddingStatusFilter<$PrismaModel> | $Enums.BiddingStatus
  }

  export type BidNullableScalarRelationFilter = {
    is?: BidWhereInput | null
    isNot?: BidWhereInput | null
  }

  export type BiddingCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    basePrice?: SortOrder
    address?: SortOrder
    contactNumber?: SortOrder
    status?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    winningBidId?: SortOrder
  }

  export type BiddingAvgOrderByAggregateInput = {
    basePrice?: SortOrder
  }

  export type BiddingMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    basePrice?: SortOrder
    address?: SortOrder
    contactNumber?: SortOrder
    status?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    winningBidId?: SortOrder
  }

  export type BiddingMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    basePrice?: SortOrder
    address?: SortOrder
    contactNumber?: SortOrder
    status?: SortOrder
    endDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    winningBidId?: SortOrder
  }

  export type BiddingSumOrderByAggregateInput = {
    basePrice?: SortOrder
  }

  export type EnumBiddingStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BiddingStatus | EnumBiddingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BiddingStatus[] | ListEnumBiddingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BiddingStatus[] | ListEnumBiddingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBiddingStatusWithAggregatesFilter<$PrismaModel> | $Enums.BiddingStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBiddingStatusFilter<$PrismaModel>
    _max?: NestedEnumBiddingStatusFilter<$PrismaModel>
  }

  export type EnumBidStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BidStatus | EnumBidStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BidStatus[] | ListEnumBidStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BidStatus[] | ListEnumBidStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBidStatusFilter<$PrismaModel> | $Enums.BidStatus
  }

  export type BiddingScalarRelationFilter = {
    is?: BiddingWhereInput
    isNot?: BiddingWhereInput
  }

  export type BiddingNullableScalarRelationFilter = {
    is?: BiddingWhereInput | null
    isNot?: BiddingWhereInput | null
  }

  export type BidCountOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    biddingId?: SortOrder
    userId?: SortOrder
  }

  export type BidAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type BidMaxOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    biddingId?: SortOrder
    userId?: SortOrder
  }

  export type BidMinOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    biddingId?: SortOrder
    userId?: SortOrder
  }

  export type BidSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type EnumBidStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BidStatus | EnumBidStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BidStatus[] | ListEnumBidStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BidStatus[] | ListEnumBidStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBidStatusWithAggregatesFilter<$PrismaModel> | $Enums.BidStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBidStatusFilter<$PrismaModel>
    _max?: NestedEnumBidStatusFilter<$PrismaModel>
  }

  export type SolutionCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    cropFeedId?: SortOrder
  }

  export type SolutionMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    cropFeedId?: SortOrder
  }

  export type SolutionMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    cropFeedId?: SortOrder
  }

  export type CropFeedCreateNestedManyWithoutUserInput = {
    create?: XOR<CropFeedCreateWithoutUserInput, CropFeedUncheckedCreateWithoutUserInput> | CropFeedCreateWithoutUserInput[] | CropFeedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CropFeedCreateOrConnectWithoutUserInput | CropFeedCreateOrConnectWithoutUserInput[]
    createMany?: CropFeedCreateManyUserInputEnvelope
    connect?: CropFeedWhereUniqueInput | CropFeedWhereUniqueInput[]
  }

  export type SoilTestRequestCreateNestedManyWithoutFarmerInput = {
    create?: XOR<SoilTestRequestCreateWithoutFarmerInput, SoilTestRequestUncheckedCreateWithoutFarmerInput> | SoilTestRequestCreateWithoutFarmerInput[] | SoilTestRequestUncheckedCreateWithoutFarmerInput[]
    connectOrCreate?: SoilTestRequestCreateOrConnectWithoutFarmerInput | SoilTestRequestCreateOrConnectWithoutFarmerInput[]
    createMany?: SoilTestRequestCreateManyFarmerInputEnvelope
    connect?: SoilTestRequestWhereUniqueInput | SoilTestRequestWhereUniqueInput[]
  }

  export type SoilTestReportCreateNestedManyWithoutSoilTesterInput = {
    create?: XOR<SoilTestReportCreateWithoutSoilTesterInput, SoilTestReportUncheckedCreateWithoutSoilTesterInput> | SoilTestReportCreateWithoutSoilTesterInput[] | SoilTestReportUncheckedCreateWithoutSoilTesterInput[]
    connectOrCreate?: SoilTestReportCreateOrConnectWithoutSoilTesterInput | SoilTestReportCreateOrConnectWithoutSoilTesterInput[]
    createMany?: SoilTestReportCreateManySoilTesterInputEnvelope
    connect?: SoilTestReportWhereUniqueInput | SoilTestReportWhereUniqueInput[]
  }

  export type FeedbackCreateNestedManyWithoutUserInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type FeedbackCreateNestedManyWithoutGiverInput = {
    create?: XOR<FeedbackCreateWithoutGiverInput, FeedbackUncheckedCreateWithoutGiverInput> | FeedbackCreateWithoutGiverInput[] | FeedbackUncheckedCreateWithoutGiverInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutGiverInput | FeedbackCreateOrConnectWithoutGiverInput[]
    createMany?: FeedbackCreateManyGiverInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type MarketPriceCreateNestedManyWithoutAgentInput = {
    create?: XOR<MarketPriceCreateWithoutAgentInput, MarketPriceUncheckedCreateWithoutAgentInput> | MarketPriceCreateWithoutAgentInput[] | MarketPriceUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: MarketPriceCreateOrConnectWithoutAgentInput | MarketPriceCreateOrConnectWithoutAgentInput[]
    createMany?: MarketPriceCreateManyAgentInputEnvelope
    connect?: MarketPriceWhereUniqueInput | MarketPriceWhereUniqueInput[]
  }

  export type BiddingCreateNestedManyWithoutUserInput = {
    create?: XOR<BiddingCreateWithoutUserInput, BiddingUncheckedCreateWithoutUserInput> | BiddingCreateWithoutUserInput[] | BiddingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BiddingCreateOrConnectWithoutUserInput | BiddingCreateOrConnectWithoutUserInput[]
    createMany?: BiddingCreateManyUserInputEnvelope
    connect?: BiddingWhereUniqueInput | BiddingWhereUniqueInput[]
  }

  export type BidCreateNestedManyWithoutUserInput = {
    create?: XOR<BidCreateWithoutUserInput, BidUncheckedCreateWithoutUserInput> | BidCreateWithoutUserInput[] | BidUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BidCreateOrConnectWithoutUserInput | BidCreateOrConnectWithoutUserInput[]
    createMany?: BidCreateManyUserInputEnvelope
    connect?: BidWhereUniqueInput | BidWhereUniqueInput[]
  }

  export type SolutionCreateNestedManyWithoutUserInput = {
    create?: XOR<SolutionCreateWithoutUserInput, SolutionUncheckedCreateWithoutUserInput> | SolutionCreateWithoutUserInput[] | SolutionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SolutionCreateOrConnectWithoutUserInput | SolutionCreateOrConnectWithoutUserInput[]
    createMany?: SolutionCreateManyUserInputEnvelope
    connect?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
  }

  export type CropFeedUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CropFeedCreateWithoutUserInput, CropFeedUncheckedCreateWithoutUserInput> | CropFeedCreateWithoutUserInput[] | CropFeedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CropFeedCreateOrConnectWithoutUserInput | CropFeedCreateOrConnectWithoutUserInput[]
    createMany?: CropFeedCreateManyUserInputEnvelope
    connect?: CropFeedWhereUniqueInput | CropFeedWhereUniqueInput[]
  }

  export type SoilTestRequestUncheckedCreateNestedManyWithoutFarmerInput = {
    create?: XOR<SoilTestRequestCreateWithoutFarmerInput, SoilTestRequestUncheckedCreateWithoutFarmerInput> | SoilTestRequestCreateWithoutFarmerInput[] | SoilTestRequestUncheckedCreateWithoutFarmerInput[]
    connectOrCreate?: SoilTestRequestCreateOrConnectWithoutFarmerInput | SoilTestRequestCreateOrConnectWithoutFarmerInput[]
    createMany?: SoilTestRequestCreateManyFarmerInputEnvelope
    connect?: SoilTestRequestWhereUniqueInput | SoilTestRequestWhereUniqueInput[]
  }

  export type SoilTestReportUncheckedCreateNestedManyWithoutSoilTesterInput = {
    create?: XOR<SoilTestReportCreateWithoutSoilTesterInput, SoilTestReportUncheckedCreateWithoutSoilTesterInput> | SoilTestReportCreateWithoutSoilTesterInput[] | SoilTestReportUncheckedCreateWithoutSoilTesterInput[]
    connectOrCreate?: SoilTestReportCreateOrConnectWithoutSoilTesterInput | SoilTestReportCreateOrConnectWithoutSoilTesterInput[]
    createMany?: SoilTestReportCreateManySoilTesterInputEnvelope
    connect?: SoilTestReportWhereUniqueInput | SoilTestReportWhereUniqueInput[]
  }

  export type FeedbackUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type FeedbackUncheckedCreateNestedManyWithoutGiverInput = {
    create?: XOR<FeedbackCreateWithoutGiverInput, FeedbackUncheckedCreateWithoutGiverInput> | FeedbackCreateWithoutGiverInput[] | FeedbackUncheckedCreateWithoutGiverInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutGiverInput | FeedbackCreateOrConnectWithoutGiverInput[]
    createMany?: FeedbackCreateManyGiverInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type MarketPriceUncheckedCreateNestedManyWithoutAgentInput = {
    create?: XOR<MarketPriceCreateWithoutAgentInput, MarketPriceUncheckedCreateWithoutAgentInput> | MarketPriceCreateWithoutAgentInput[] | MarketPriceUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: MarketPriceCreateOrConnectWithoutAgentInput | MarketPriceCreateOrConnectWithoutAgentInput[]
    createMany?: MarketPriceCreateManyAgentInputEnvelope
    connect?: MarketPriceWhereUniqueInput | MarketPriceWhereUniqueInput[]
  }

  export type BiddingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BiddingCreateWithoutUserInput, BiddingUncheckedCreateWithoutUserInput> | BiddingCreateWithoutUserInput[] | BiddingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BiddingCreateOrConnectWithoutUserInput | BiddingCreateOrConnectWithoutUserInput[]
    createMany?: BiddingCreateManyUserInputEnvelope
    connect?: BiddingWhereUniqueInput | BiddingWhereUniqueInput[]
  }

  export type BidUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BidCreateWithoutUserInput, BidUncheckedCreateWithoutUserInput> | BidCreateWithoutUserInput[] | BidUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BidCreateOrConnectWithoutUserInput | BidCreateOrConnectWithoutUserInput[]
    createMany?: BidCreateManyUserInputEnvelope
    connect?: BidWhereUniqueInput | BidWhereUniqueInput[]
  }

  export type SolutionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SolutionCreateWithoutUserInput, SolutionUncheckedCreateWithoutUserInput> | SolutionCreateWithoutUserInput[] | SolutionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SolutionCreateOrConnectWithoutUserInput | SolutionCreateOrConnectWithoutUserInput[]
    createMany?: SolutionCreateManyUserInputEnvelope
    connect?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CropFeedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CropFeedCreateWithoutUserInput, CropFeedUncheckedCreateWithoutUserInput> | CropFeedCreateWithoutUserInput[] | CropFeedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CropFeedCreateOrConnectWithoutUserInput | CropFeedCreateOrConnectWithoutUserInput[]
    upsert?: CropFeedUpsertWithWhereUniqueWithoutUserInput | CropFeedUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CropFeedCreateManyUserInputEnvelope
    set?: CropFeedWhereUniqueInput | CropFeedWhereUniqueInput[]
    disconnect?: CropFeedWhereUniqueInput | CropFeedWhereUniqueInput[]
    delete?: CropFeedWhereUniqueInput | CropFeedWhereUniqueInput[]
    connect?: CropFeedWhereUniqueInput | CropFeedWhereUniqueInput[]
    update?: CropFeedUpdateWithWhereUniqueWithoutUserInput | CropFeedUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CropFeedUpdateManyWithWhereWithoutUserInput | CropFeedUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CropFeedScalarWhereInput | CropFeedScalarWhereInput[]
  }

  export type SoilTestRequestUpdateManyWithoutFarmerNestedInput = {
    create?: XOR<SoilTestRequestCreateWithoutFarmerInput, SoilTestRequestUncheckedCreateWithoutFarmerInput> | SoilTestRequestCreateWithoutFarmerInput[] | SoilTestRequestUncheckedCreateWithoutFarmerInput[]
    connectOrCreate?: SoilTestRequestCreateOrConnectWithoutFarmerInput | SoilTestRequestCreateOrConnectWithoutFarmerInput[]
    upsert?: SoilTestRequestUpsertWithWhereUniqueWithoutFarmerInput | SoilTestRequestUpsertWithWhereUniqueWithoutFarmerInput[]
    createMany?: SoilTestRequestCreateManyFarmerInputEnvelope
    set?: SoilTestRequestWhereUniqueInput | SoilTestRequestWhereUniqueInput[]
    disconnect?: SoilTestRequestWhereUniqueInput | SoilTestRequestWhereUniqueInput[]
    delete?: SoilTestRequestWhereUniqueInput | SoilTestRequestWhereUniqueInput[]
    connect?: SoilTestRequestWhereUniqueInput | SoilTestRequestWhereUniqueInput[]
    update?: SoilTestRequestUpdateWithWhereUniqueWithoutFarmerInput | SoilTestRequestUpdateWithWhereUniqueWithoutFarmerInput[]
    updateMany?: SoilTestRequestUpdateManyWithWhereWithoutFarmerInput | SoilTestRequestUpdateManyWithWhereWithoutFarmerInput[]
    deleteMany?: SoilTestRequestScalarWhereInput | SoilTestRequestScalarWhereInput[]
  }

  export type SoilTestReportUpdateManyWithoutSoilTesterNestedInput = {
    create?: XOR<SoilTestReportCreateWithoutSoilTesterInput, SoilTestReportUncheckedCreateWithoutSoilTesterInput> | SoilTestReportCreateWithoutSoilTesterInput[] | SoilTestReportUncheckedCreateWithoutSoilTesterInput[]
    connectOrCreate?: SoilTestReportCreateOrConnectWithoutSoilTesterInput | SoilTestReportCreateOrConnectWithoutSoilTesterInput[]
    upsert?: SoilTestReportUpsertWithWhereUniqueWithoutSoilTesterInput | SoilTestReportUpsertWithWhereUniqueWithoutSoilTesterInput[]
    createMany?: SoilTestReportCreateManySoilTesterInputEnvelope
    set?: SoilTestReportWhereUniqueInput | SoilTestReportWhereUniqueInput[]
    disconnect?: SoilTestReportWhereUniqueInput | SoilTestReportWhereUniqueInput[]
    delete?: SoilTestReportWhereUniqueInput | SoilTestReportWhereUniqueInput[]
    connect?: SoilTestReportWhereUniqueInput | SoilTestReportWhereUniqueInput[]
    update?: SoilTestReportUpdateWithWhereUniqueWithoutSoilTesterInput | SoilTestReportUpdateWithWhereUniqueWithoutSoilTesterInput[]
    updateMany?: SoilTestReportUpdateManyWithWhereWithoutSoilTesterInput | SoilTestReportUpdateManyWithWhereWithoutSoilTesterInput[]
    deleteMany?: SoilTestReportScalarWhereInput | SoilTestReportScalarWhereInput[]
  }

  export type FeedbackUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutUserInput | FeedbackUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutUserInput | FeedbackUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutUserInput | FeedbackUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type FeedbackUpdateManyWithoutGiverNestedInput = {
    create?: XOR<FeedbackCreateWithoutGiverInput, FeedbackUncheckedCreateWithoutGiverInput> | FeedbackCreateWithoutGiverInput[] | FeedbackUncheckedCreateWithoutGiverInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutGiverInput | FeedbackCreateOrConnectWithoutGiverInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutGiverInput | FeedbackUpsertWithWhereUniqueWithoutGiverInput[]
    createMany?: FeedbackCreateManyGiverInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutGiverInput | FeedbackUpdateWithWhereUniqueWithoutGiverInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutGiverInput | FeedbackUpdateManyWithWhereWithoutGiverInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type MarketPriceUpdateManyWithoutAgentNestedInput = {
    create?: XOR<MarketPriceCreateWithoutAgentInput, MarketPriceUncheckedCreateWithoutAgentInput> | MarketPriceCreateWithoutAgentInput[] | MarketPriceUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: MarketPriceCreateOrConnectWithoutAgentInput | MarketPriceCreateOrConnectWithoutAgentInput[]
    upsert?: MarketPriceUpsertWithWhereUniqueWithoutAgentInput | MarketPriceUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: MarketPriceCreateManyAgentInputEnvelope
    set?: MarketPriceWhereUniqueInput | MarketPriceWhereUniqueInput[]
    disconnect?: MarketPriceWhereUniqueInput | MarketPriceWhereUniqueInput[]
    delete?: MarketPriceWhereUniqueInput | MarketPriceWhereUniqueInput[]
    connect?: MarketPriceWhereUniqueInput | MarketPriceWhereUniqueInput[]
    update?: MarketPriceUpdateWithWhereUniqueWithoutAgentInput | MarketPriceUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: MarketPriceUpdateManyWithWhereWithoutAgentInput | MarketPriceUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: MarketPriceScalarWhereInput | MarketPriceScalarWhereInput[]
  }

  export type BiddingUpdateManyWithoutUserNestedInput = {
    create?: XOR<BiddingCreateWithoutUserInput, BiddingUncheckedCreateWithoutUserInput> | BiddingCreateWithoutUserInput[] | BiddingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BiddingCreateOrConnectWithoutUserInput | BiddingCreateOrConnectWithoutUserInput[]
    upsert?: BiddingUpsertWithWhereUniqueWithoutUserInput | BiddingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BiddingCreateManyUserInputEnvelope
    set?: BiddingWhereUniqueInput | BiddingWhereUniqueInput[]
    disconnect?: BiddingWhereUniqueInput | BiddingWhereUniqueInput[]
    delete?: BiddingWhereUniqueInput | BiddingWhereUniqueInput[]
    connect?: BiddingWhereUniqueInput | BiddingWhereUniqueInput[]
    update?: BiddingUpdateWithWhereUniqueWithoutUserInput | BiddingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BiddingUpdateManyWithWhereWithoutUserInput | BiddingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BiddingScalarWhereInput | BiddingScalarWhereInput[]
  }

  export type BidUpdateManyWithoutUserNestedInput = {
    create?: XOR<BidCreateWithoutUserInput, BidUncheckedCreateWithoutUserInput> | BidCreateWithoutUserInput[] | BidUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BidCreateOrConnectWithoutUserInput | BidCreateOrConnectWithoutUserInput[]
    upsert?: BidUpsertWithWhereUniqueWithoutUserInput | BidUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BidCreateManyUserInputEnvelope
    set?: BidWhereUniqueInput | BidWhereUniqueInput[]
    disconnect?: BidWhereUniqueInput | BidWhereUniqueInput[]
    delete?: BidWhereUniqueInput | BidWhereUniqueInput[]
    connect?: BidWhereUniqueInput | BidWhereUniqueInput[]
    update?: BidUpdateWithWhereUniqueWithoutUserInput | BidUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BidUpdateManyWithWhereWithoutUserInput | BidUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BidScalarWhereInput | BidScalarWhereInput[]
  }

  export type SolutionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SolutionCreateWithoutUserInput, SolutionUncheckedCreateWithoutUserInput> | SolutionCreateWithoutUserInput[] | SolutionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SolutionCreateOrConnectWithoutUserInput | SolutionCreateOrConnectWithoutUserInput[]
    upsert?: SolutionUpsertWithWhereUniqueWithoutUserInput | SolutionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SolutionCreateManyUserInputEnvelope
    set?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
    disconnect?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
    delete?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
    connect?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
    update?: SolutionUpdateWithWhereUniqueWithoutUserInput | SolutionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SolutionUpdateManyWithWhereWithoutUserInput | SolutionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SolutionScalarWhereInput | SolutionScalarWhereInput[]
  }

  export type CropFeedUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CropFeedCreateWithoutUserInput, CropFeedUncheckedCreateWithoutUserInput> | CropFeedCreateWithoutUserInput[] | CropFeedUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CropFeedCreateOrConnectWithoutUserInput | CropFeedCreateOrConnectWithoutUserInput[]
    upsert?: CropFeedUpsertWithWhereUniqueWithoutUserInput | CropFeedUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CropFeedCreateManyUserInputEnvelope
    set?: CropFeedWhereUniqueInput | CropFeedWhereUniqueInput[]
    disconnect?: CropFeedWhereUniqueInput | CropFeedWhereUniqueInput[]
    delete?: CropFeedWhereUniqueInput | CropFeedWhereUniqueInput[]
    connect?: CropFeedWhereUniqueInput | CropFeedWhereUniqueInput[]
    update?: CropFeedUpdateWithWhereUniqueWithoutUserInput | CropFeedUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CropFeedUpdateManyWithWhereWithoutUserInput | CropFeedUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CropFeedScalarWhereInput | CropFeedScalarWhereInput[]
  }

  export type SoilTestRequestUncheckedUpdateManyWithoutFarmerNestedInput = {
    create?: XOR<SoilTestRequestCreateWithoutFarmerInput, SoilTestRequestUncheckedCreateWithoutFarmerInput> | SoilTestRequestCreateWithoutFarmerInput[] | SoilTestRequestUncheckedCreateWithoutFarmerInput[]
    connectOrCreate?: SoilTestRequestCreateOrConnectWithoutFarmerInput | SoilTestRequestCreateOrConnectWithoutFarmerInput[]
    upsert?: SoilTestRequestUpsertWithWhereUniqueWithoutFarmerInput | SoilTestRequestUpsertWithWhereUniqueWithoutFarmerInput[]
    createMany?: SoilTestRequestCreateManyFarmerInputEnvelope
    set?: SoilTestRequestWhereUniqueInput | SoilTestRequestWhereUniqueInput[]
    disconnect?: SoilTestRequestWhereUniqueInput | SoilTestRequestWhereUniqueInput[]
    delete?: SoilTestRequestWhereUniqueInput | SoilTestRequestWhereUniqueInput[]
    connect?: SoilTestRequestWhereUniqueInput | SoilTestRequestWhereUniqueInput[]
    update?: SoilTestRequestUpdateWithWhereUniqueWithoutFarmerInput | SoilTestRequestUpdateWithWhereUniqueWithoutFarmerInput[]
    updateMany?: SoilTestRequestUpdateManyWithWhereWithoutFarmerInput | SoilTestRequestUpdateManyWithWhereWithoutFarmerInput[]
    deleteMany?: SoilTestRequestScalarWhereInput | SoilTestRequestScalarWhereInput[]
  }

  export type SoilTestReportUncheckedUpdateManyWithoutSoilTesterNestedInput = {
    create?: XOR<SoilTestReportCreateWithoutSoilTesterInput, SoilTestReportUncheckedCreateWithoutSoilTesterInput> | SoilTestReportCreateWithoutSoilTesterInput[] | SoilTestReportUncheckedCreateWithoutSoilTesterInput[]
    connectOrCreate?: SoilTestReportCreateOrConnectWithoutSoilTesterInput | SoilTestReportCreateOrConnectWithoutSoilTesterInput[]
    upsert?: SoilTestReportUpsertWithWhereUniqueWithoutSoilTesterInput | SoilTestReportUpsertWithWhereUniqueWithoutSoilTesterInput[]
    createMany?: SoilTestReportCreateManySoilTesterInputEnvelope
    set?: SoilTestReportWhereUniqueInput | SoilTestReportWhereUniqueInput[]
    disconnect?: SoilTestReportWhereUniqueInput | SoilTestReportWhereUniqueInput[]
    delete?: SoilTestReportWhereUniqueInput | SoilTestReportWhereUniqueInput[]
    connect?: SoilTestReportWhereUniqueInput | SoilTestReportWhereUniqueInput[]
    update?: SoilTestReportUpdateWithWhereUniqueWithoutSoilTesterInput | SoilTestReportUpdateWithWhereUniqueWithoutSoilTesterInput[]
    updateMany?: SoilTestReportUpdateManyWithWhereWithoutSoilTesterInput | SoilTestReportUpdateManyWithWhereWithoutSoilTesterInput[]
    deleteMany?: SoilTestReportScalarWhereInput | SoilTestReportScalarWhereInput[]
  }

  export type FeedbackUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutUserInput | FeedbackUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutUserInput | FeedbackUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutUserInput | FeedbackUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type FeedbackUncheckedUpdateManyWithoutGiverNestedInput = {
    create?: XOR<FeedbackCreateWithoutGiverInput, FeedbackUncheckedCreateWithoutGiverInput> | FeedbackCreateWithoutGiverInput[] | FeedbackUncheckedCreateWithoutGiverInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutGiverInput | FeedbackCreateOrConnectWithoutGiverInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutGiverInput | FeedbackUpsertWithWhereUniqueWithoutGiverInput[]
    createMany?: FeedbackCreateManyGiverInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutGiverInput | FeedbackUpdateWithWhereUniqueWithoutGiverInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutGiverInput | FeedbackUpdateManyWithWhereWithoutGiverInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type MarketPriceUncheckedUpdateManyWithoutAgentNestedInput = {
    create?: XOR<MarketPriceCreateWithoutAgentInput, MarketPriceUncheckedCreateWithoutAgentInput> | MarketPriceCreateWithoutAgentInput[] | MarketPriceUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: MarketPriceCreateOrConnectWithoutAgentInput | MarketPriceCreateOrConnectWithoutAgentInput[]
    upsert?: MarketPriceUpsertWithWhereUniqueWithoutAgentInput | MarketPriceUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: MarketPriceCreateManyAgentInputEnvelope
    set?: MarketPriceWhereUniqueInput | MarketPriceWhereUniqueInput[]
    disconnect?: MarketPriceWhereUniqueInput | MarketPriceWhereUniqueInput[]
    delete?: MarketPriceWhereUniqueInput | MarketPriceWhereUniqueInput[]
    connect?: MarketPriceWhereUniqueInput | MarketPriceWhereUniqueInput[]
    update?: MarketPriceUpdateWithWhereUniqueWithoutAgentInput | MarketPriceUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: MarketPriceUpdateManyWithWhereWithoutAgentInput | MarketPriceUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: MarketPriceScalarWhereInput | MarketPriceScalarWhereInput[]
  }

  export type BiddingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BiddingCreateWithoutUserInput, BiddingUncheckedCreateWithoutUserInput> | BiddingCreateWithoutUserInput[] | BiddingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BiddingCreateOrConnectWithoutUserInput | BiddingCreateOrConnectWithoutUserInput[]
    upsert?: BiddingUpsertWithWhereUniqueWithoutUserInput | BiddingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BiddingCreateManyUserInputEnvelope
    set?: BiddingWhereUniqueInput | BiddingWhereUniqueInput[]
    disconnect?: BiddingWhereUniqueInput | BiddingWhereUniqueInput[]
    delete?: BiddingWhereUniqueInput | BiddingWhereUniqueInput[]
    connect?: BiddingWhereUniqueInput | BiddingWhereUniqueInput[]
    update?: BiddingUpdateWithWhereUniqueWithoutUserInput | BiddingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BiddingUpdateManyWithWhereWithoutUserInput | BiddingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BiddingScalarWhereInput | BiddingScalarWhereInput[]
  }

  export type BidUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BidCreateWithoutUserInput, BidUncheckedCreateWithoutUserInput> | BidCreateWithoutUserInput[] | BidUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BidCreateOrConnectWithoutUserInput | BidCreateOrConnectWithoutUserInput[]
    upsert?: BidUpsertWithWhereUniqueWithoutUserInput | BidUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BidCreateManyUserInputEnvelope
    set?: BidWhereUniqueInput | BidWhereUniqueInput[]
    disconnect?: BidWhereUniqueInput | BidWhereUniqueInput[]
    delete?: BidWhereUniqueInput | BidWhereUniqueInput[]
    connect?: BidWhereUniqueInput | BidWhereUniqueInput[]
    update?: BidUpdateWithWhereUniqueWithoutUserInput | BidUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BidUpdateManyWithWhereWithoutUserInput | BidUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BidScalarWhereInput | BidScalarWhereInput[]
  }

  export type SolutionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SolutionCreateWithoutUserInput, SolutionUncheckedCreateWithoutUserInput> | SolutionCreateWithoutUserInput[] | SolutionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SolutionCreateOrConnectWithoutUserInput | SolutionCreateOrConnectWithoutUserInput[]
    upsert?: SolutionUpsertWithWhereUniqueWithoutUserInput | SolutionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SolutionCreateManyUserInputEnvelope
    set?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
    disconnect?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
    delete?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
    connect?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
    update?: SolutionUpdateWithWhereUniqueWithoutUserInput | SolutionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SolutionUpdateManyWithWhereWithoutUserInput | SolutionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SolutionScalarWhereInput | SolutionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCropFeedsInput = {
    create?: XOR<UserCreateWithoutCropFeedsInput, UserUncheckedCreateWithoutCropFeedsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCropFeedsInput
    connect?: UserWhereUniqueInput
  }

  export type CommentCreateNestedManyWithoutCropFeedInput = {
    create?: XOR<CommentCreateWithoutCropFeedInput, CommentUncheckedCreateWithoutCropFeedInput> | CommentCreateWithoutCropFeedInput[] | CommentUncheckedCreateWithoutCropFeedInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutCropFeedInput | CommentCreateOrConnectWithoutCropFeedInput[]
    createMany?: CommentCreateManyCropFeedInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type SolutionCreateNestedManyWithoutCropFeedInput = {
    create?: XOR<SolutionCreateWithoutCropFeedInput, SolutionUncheckedCreateWithoutCropFeedInput> | SolutionCreateWithoutCropFeedInput[] | SolutionUncheckedCreateWithoutCropFeedInput[]
    connectOrCreate?: SolutionCreateOrConnectWithoutCropFeedInput | SolutionCreateOrConnectWithoutCropFeedInput[]
    createMany?: SolutionCreateManyCropFeedInputEnvelope
    connect?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutCropFeedInput = {
    create?: XOR<CommentCreateWithoutCropFeedInput, CommentUncheckedCreateWithoutCropFeedInput> | CommentCreateWithoutCropFeedInput[] | CommentUncheckedCreateWithoutCropFeedInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutCropFeedInput | CommentCreateOrConnectWithoutCropFeedInput[]
    createMany?: CommentCreateManyCropFeedInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type SolutionUncheckedCreateNestedManyWithoutCropFeedInput = {
    create?: XOR<SolutionCreateWithoutCropFeedInput, SolutionUncheckedCreateWithoutCropFeedInput> | SolutionCreateWithoutCropFeedInput[] | SolutionUncheckedCreateWithoutCropFeedInput[]
    connectOrCreate?: SolutionCreateOrConnectWithoutCropFeedInput | SolutionCreateOrConnectWithoutCropFeedInput[]
    createMany?: SolutionCreateManyCropFeedInputEnvelope
    connect?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type UserUpdateOneRequiredWithoutCropFeedsNestedInput = {
    create?: XOR<UserCreateWithoutCropFeedsInput, UserUncheckedCreateWithoutCropFeedsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCropFeedsInput
    upsert?: UserUpsertWithoutCropFeedsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCropFeedsInput, UserUpdateWithoutCropFeedsInput>, UserUncheckedUpdateWithoutCropFeedsInput>
  }

  export type CommentUpdateManyWithoutCropFeedNestedInput = {
    create?: XOR<CommentCreateWithoutCropFeedInput, CommentUncheckedCreateWithoutCropFeedInput> | CommentCreateWithoutCropFeedInput[] | CommentUncheckedCreateWithoutCropFeedInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutCropFeedInput | CommentCreateOrConnectWithoutCropFeedInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutCropFeedInput | CommentUpsertWithWhereUniqueWithoutCropFeedInput[]
    createMany?: CommentCreateManyCropFeedInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutCropFeedInput | CommentUpdateWithWhereUniqueWithoutCropFeedInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutCropFeedInput | CommentUpdateManyWithWhereWithoutCropFeedInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type SolutionUpdateManyWithoutCropFeedNestedInput = {
    create?: XOR<SolutionCreateWithoutCropFeedInput, SolutionUncheckedCreateWithoutCropFeedInput> | SolutionCreateWithoutCropFeedInput[] | SolutionUncheckedCreateWithoutCropFeedInput[]
    connectOrCreate?: SolutionCreateOrConnectWithoutCropFeedInput | SolutionCreateOrConnectWithoutCropFeedInput[]
    upsert?: SolutionUpsertWithWhereUniqueWithoutCropFeedInput | SolutionUpsertWithWhereUniqueWithoutCropFeedInput[]
    createMany?: SolutionCreateManyCropFeedInputEnvelope
    set?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
    disconnect?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
    delete?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
    connect?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
    update?: SolutionUpdateWithWhereUniqueWithoutCropFeedInput | SolutionUpdateWithWhereUniqueWithoutCropFeedInput[]
    updateMany?: SolutionUpdateManyWithWhereWithoutCropFeedInput | SolutionUpdateManyWithWhereWithoutCropFeedInput[]
    deleteMany?: SolutionScalarWhereInput | SolutionScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutCropFeedNestedInput = {
    create?: XOR<CommentCreateWithoutCropFeedInput, CommentUncheckedCreateWithoutCropFeedInput> | CommentCreateWithoutCropFeedInput[] | CommentUncheckedCreateWithoutCropFeedInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutCropFeedInput | CommentCreateOrConnectWithoutCropFeedInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutCropFeedInput | CommentUpsertWithWhereUniqueWithoutCropFeedInput[]
    createMany?: CommentCreateManyCropFeedInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutCropFeedInput | CommentUpdateWithWhereUniqueWithoutCropFeedInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutCropFeedInput | CommentUpdateManyWithWhereWithoutCropFeedInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type SolutionUncheckedUpdateManyWithoutCropFeedNestedInput = {
    create?: XOR<SolutionCreateWithoutCropFeedInput, SolutionUncheckedCreateWithoutCropFeedInput> | SolutionCreateWithoutCropFeedInput[] | SolutionUncheckedCreateWithoutCropFeedInput[]
    connectOrCreate?: SolutionCreateOrConnectWithoutCropFeedInput | SolutionCreateOrConnectWithoutCropFeedInput[]
    upsert?: SolutionUpsertWithWhereUniqueWithoutCropFeedInput | SolutionUpsertWithWhereUniqueWithoutCropFeedInput[]
    createMany?: SolutionCreateManyCropFeedInputEnvelope
    set?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
    disconnect?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
    delete?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
    connect?: SolutionWhereUniqueInput | SolutionWhereUniqueInput[]
    update?: SolutionUpdateWithWhereUniqueWithoutCropFeedInput | SolutionUpdateWithWhereUniqueWithoutCropFeedInput[]
    updateMany?: SolutionUpdateManyWithWhereWithoutCropFeedInput | SolutionUpdateManyWithWhereWithoutCropFeedInput[]
    deleteMany?: SolutionScalarWhereInput | SolutionScalarWhereInput[]
  }

  export type CropFeedCreateNestedOneWithoutCommentsInput = {
    create?: XOR<CropFeedCreateWithoutCommentsInput, CropFeedUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: CropFeedCreateOrConnectWithoutCommentsInput
    connect?: CropFeedWhereUniqueInput
  }

  export type CropFeedUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<CropFeedCreateWithoutCommentsInput, CropFeedUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: CropFeedCreateOrConnectWithoutCommentsInput
    upsert?: CropFeedUpsertWithoutCommentsInput
    connect?: CropFeedWhereUniqueInput
    update?: XOR<XOR<CropFeedUpdateToOneWithWhereWithoutCommentsInput, CropFeedUpdateWithoutCommentsInput>, CropFeedUncheckedUpdateWithoutCommentsInput>
  }

  export type UserCreateNestedOneWithoutSoilTestRequestsInput = {
    create?: XOR<UserCreateWithoutSoilTestRequestsInput, UserUncheckedCreateWithoutSoilTestRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSoilTestRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type SoilTestReportCreateNestedManyWithoutRequestInput = {
    create?: XOR<SoilTestReportCreateWithoutRequestInput, SoilTestReportUncheckedCreateWithoutRequestInput> | SoilTestReportCreateWithoutRequestInput[] | SoilTestReportUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: SoilTestReportCreateOrConnectWithoutRequestInput | SoilTestReportCreateOrConnectWithoutRequestInput[]
    createMany?: SoilTestReportCreateManyRequestInputEnvelope
    connect?: SoilTestReportWhereUniqueInput | SoilTestReportWhereUniqueInput[]
  }

  export type SoilTestReportUncheckedCreateNestedManyWithoutRequestInput = {
    create?: XOR<SoilTestReportCreateWithoutRequestInput, SoilTestReportUncheckedCreateWithoutRequestInput> | SoilTestReportCreateWithoutRequestInput[] | SoilTestReportUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: SoilTestReportCreateOrConnectWithoutRequestInput | SoilTestReportCreateOrConnectWithoutRequestInput[]
    createMany?: SoilTestReportCreateManyRequestInputEnvelope
    connect?: SoilTestReportWhereUniqueInput | SoilTestReportWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutSoilTestRequestsNestedInput = {
    create?: XOR<UserCreateWithoutSoilTestRequestsInput, UserUncheckedCreateWithoutSoilTestRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSoilTestRequestsInput
    upsert?: UserUpsertWithoutSoilTestRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSoilTestRequestsInput, UserUpdateWithoutSoilTestRequestsInput>, UserUncheckedUpdateWithoutSoilTestRequestsInput>
  }

  export type SoilTestReportUpdateManyWithoutRequestNestedInput = {
    create?: XOR<SoilTestReportCreateWithoutRequestInput, SoilTestReportUncheckedCreateWithoutRequestInput> | SoilTestReportCreateWithoutRequestInput[] | SoilTestReportUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: SoilTestReportCreateOrConnectWithoutRequestInput | SoilTestReportCreateOrConnectWithoutRequestInput[]
    upsert?: SoilTestReportUpsertWithWhereUniqueWithoutRequestInput | SoilTestReportUpsertWithWhereUniqueWithoutRequestInput[]
    createMany?: SoilTestReportCreateManyRequestInputEnvelope
    set?: SoilTestReportWhereUniqueInput | SoilTestReportWhereUniqueInput[]
    disconnect?: SoilTestReportWhereUniqueInput | SoilTestReportWhereUniqueInput[]
    delete?: SoilTestReportWhereUniqueInput | SoilTestReportWhereUniqueInput[]
    connect?: SoilTestReportWhereUniqueInput | SoilTestReportWhereUniqueInput[]
    update?: SoilTestReportUpdateWithWhereUniqueWithoutRequestInput | SoilTestReportUpdateWithWhereUniqueWithoutRequestInput[]
    updateMany?: SoilTestReportUpdateManyWithWhereWithoutRequestInput | SoilTestReportUpdateManyWithWhereWithoutRequestInput[]
    deleteMany?: SoilTestReportScalarWhereInput | SoilTestReportScalarWhereInput[]
  }

  export type SoilTestReportUncheckedUpdateManyWithoutRequestNestedInput = {
    create?: XOR<SoilTestReportCreateWithoutRequestInput, SoilTestReportUncheckedCreateWithoutRequestInput> | SoilTestReportCreateWithoutRequestInput[] | SoilTestReportUncheckedCreateWithoutRequestInput[]
    connectOrCreate?: SoilTestReportCreateOrConnectWithoutRequestInput | SoilTestReportCreateOrConnectWithoutRequestInput[]
    upsert?: SoilTestReportUpsertWithWhereUniqueWithoutRequestInput | SoilTestReportUpsertWithWhereUniqueWithoutRequestInput[]
    createMany?: SoilTestReportCreateManyRequestInputEnvelope
    set?: SoilTestReportWhereUniqueInput | SoilTestReportWhereUniqueInput[]
    disconnect?: SoilTestReportWhereUniqueInput | SoilTestReportWhereUniqueInput[]
    delete?: SoilTestReportWhereUniqueInput | SoilTestReportWhereUniqueInput[]
    connect?: SoilTestReportWhereUniqueInput | SoilTestReportWhereUniqueInput[]
    update?: SoilTestReportUpdateWithWhereUniqueWithoutRequestInput | SoilTestReportUpdateWithWhereUniqueWithoutRequestInput[]
    updateMany?: SoilTestReportUpdateManyWithWhereWithoutRequestInput | SoilTestReportUpdateManyWithWhereWithoutRequestInput[]
    deleteMany?: SoilTestReportScalarWhereInput | SoilTestReportScalarWhereInput[]
  }

  export type SoilTestRequestCreateNestedOneWithoutReportsInput = {
    create?: XOR<SoilTestRequestCreateWithoutReportsInput, SoilTestRequestUncheckedCreateWithoutReportsInput>
    connectOrCreate?: SoilTestRequestCreateOrConnectWithoutReportsInput
    connect?: SoilTestRequestWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSoilTestReportsInput = {
    create?: XOR<UserCreateWithoutSoilTestReportsInput, UserUncheckedCreateWithoutSoilTestReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSoilTestReportsInput
    connect?: UserWhereUniqueInput
  }

  export type SoilTestRequestUpdateOneRequiredWithoutReportsNestedInput = {
    create?: XOR<SoilTestRequestCreateWithoutReportsInput, SoilTestRequestUncheckedCreateWithoutReportsInput>
    connectOrCreate?: SoilTestRequestCreateOrConnectWithoutReportsInput
    upsert?: SoilTestRequestUpsertWithoutReportsInput
    connect?: SoilTestRequestWhereUniqueInput
    update?: XOR<XOR<SoilTestRequestUpdateToOneWithWhereWithoutReportsInput, SoilTestRequestUpdateWithoutReportsInput>, SoilTestRequestUncheckedUpdateWithoutReportsInput>
  }

  export type UserUpdateOneRequiredWithoutSoilTestReportsNestedInput = {
    create?: XOR<UserCreateWithoutSoilTestReportsInput, UserUncheckedCreateWithoutSoilTestReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSoilTestReportsInput
    upsert?: UserUpsertWithoutSoilTestReportsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSoilTestReportsInput, UserUpdateWithoutSoilTestReportsInput>, UserUncheckedUpdateWithoutSoilTestReportsInput>
  }

  export type UserCreateNestedOneWithoutFeedbacksInput = {
    create?: XOR<UserCreateWithoutFeedbacksInput, UserUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbacksInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutGivenFeedbacksInput = {
    create?: XOR<UserCreateWithoutGivenFeedbacksInput, UserUncheckedCreateWithoutGivenFeedbacksInput>
    connectOrCreate?: UserCreateOrConnectWithoutGivenFeedbacksInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFeedbacksNestedInput = {
    create?: XOR<UserCreateWithoutFeedbacksInput, UserUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbacksInput
    upsert?: UserUpsertWithoutFeedbacksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFeedbacksInput, UserUpdateWithoutFeedbacksInput>, UserUncheckedUpdateWithoutFeedbacksInput>
  }

  export type UserUpdateOneRequiredWithoutGivenFeedbacksNestedInput = {
    create?: XOR<UserCreateWithoutGivenFeedbacksInput, UserUncheckedCreateWithoutGivenFeedbacksInput>
    connectOrCreate?: UserCreateOrConnectWithoutGivenFeedbacksInput
    upsert?: UserUpsertWithoutGivenFeedbacksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGivenFeedbacksInput, UserUpdateWithoutGivenFeedbacksInput>, UserUncheckedUpdateWithoutGivenFeedbacksInput>
  }

  export type UserCreateNestedOneWithoutMarketPricesInput = {
    create?: XOR<UserCreateWithoutMarketPricesInput, UserUncheckedCreateWithoutMarketPricesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMarketPricesInput
    connect?: UserWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutMarketPricesNestedInput = {
    create?: XOR<UserCreateWithoutMarketPricesInput, UserUncheckedCreateWithoutMarketPricesInput>
    connectOrCreate?: UserCreateOrConnectWithoutMarketPricesInput
    upsert?: UserUpsertWithoutMarketPricesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMarketPricesInput, UserUpdateWithoutMarketPricesInput>, UserUncheckedUpdateWithoutMarketPricesInput>
  }

  export type UserCreateNestedOneWithoutBiddingsInput = {
    create?: XOR<UserCreateWithoutBiddingsInput, UserUncheckedCreateWithoutBiddingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBiddingsInput
    connect?: UserWhereUniqueInput
  }

  export type BidCreateNestedManyWithoutBiddingInput = {
    create?: XOR<BidCreateWithoutBiddingInput, BidUncheckedCreateWithoutBiddingInput> | BidCreateWithoutBiddingInput[] | BidUncheckedCreateWithoutBiddingInput[]
    connectOrCreate?: BidCreateOrConnectWithoutBiddingInput | BidCreateOrConnectWithoutBiddingInput[]
    createMany?: BidCreateManyBiddingInputEnvelope
    connect?: BidWhereUniqueInput | BidWhereUniqueInput[]
  }

  export type BidCreateNestedOneWithoutWonBiddingInput = {
    create?: XOR<BidCreateWithoutWonBiddingInput, BidUncheckedCreateWithoutWonBiddingInput>
    connectOrCreate?: BidCreateOrConnectWithoutWonBiddingInput
    connect?: BidWhereUniqueInput
  }

  export type BidUncheckedCreateNestedManyWithoutBiddingInput = {
    create?: XOR<BidCreateWithoutBiddingInput, BidUncheckedCreateWithoutBiddingInput> | BidCreateWithoutBiddingInput[] | BidUncheckedCreateWithoutBiddingInput[]
    connectOrCreate?: BidCreateOrConnectWithoutBiddingInput | BidCreateOrConnectWithoutBiddingInput[]
    createMany?: BidCreateManyBiddingInputEnvelope
    connect?: BidWhereUniqueInput | BidWhereUniqueInput[]
  }

  export type EnumBiddingStatusFieldUpdateOperationsInput = {
    set?: $Enums.BiddingStatus
  }

  export type UserUpdateOneRequiredWithoutBiddingsNestedInput = {
    create?: XOR<UserCreateWithoutBiddingsInput, UserUncheckedCreateWithoutBiddingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBiddingsInput
    upsert?: UserUpsertWithoutBiddingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBiddingsInput, UserUpdateWithoutBiddingsInput>, UserUncheckedUpdateWithoutBiddingsInput>
  }

  export type BidUpdateManyWithoutBiddingNestedInput = {
    create?: XOR<BidCreateWithoutBiddingInput, BidUncheckedCreateWithoutBiddingInput> | BidCreateWithoutBiddingInput[] | BidUncheckedCreateWithoutBiddingInput[]
    connectOrCreate?: BidCreateOrConnectWithoutBiddingInput | BidCreateOrConnectWithoutBiddingInput[]
    upsert?: BidUpsertWithWhereUniqueWithoutBiddingInput | BidUpsertWithWhereUniqueWithoutBiddingInput[]
    createMany?: BidCreateManyBiddingInputEnvelope
    set?: BidWhereUniqueInput | BidWhereUniqueInput[]
    disconnect?: BidWhereUniqueInput | BidWhereUniqueInput[]
    delete?: BidWhereUniqueInput | BidWhereUniqueInput[]
    connect?: BidWhereUniqueInput | BidWhereUniqueInput[]
    update?: BidUpdateWithWhereUniqueWithoutBiddingInput | BidUpdateWithWhereUniqueWithoutBiddingInput[]
    updateMany?: BidUpdateManyWithWhereWithoutBiddingInput | BidUpdateManyWithWhereWithoutBiddingInput[]
    deleteMany?: BidScalarWhereInput | BidScalarWhereInput[]
  }

  export type BidUpdateOneWithoutWonBiddingNestedInput = {
    create?: XOR<BidCreateWithoutWonBiddingInput, BidUncheckedCreateWithoutWonBiddingInput>
    connectOrCreate?: BidCreateOrConnectWithoutWonBiddingInput
    upsert?: BidUpsertWithoutWonBiddingInput
    disconnect?: BidWhereInput | boolean
    delete?: BidWhereInput | boolean
    connect?: BidWhereUniqueInput
    update?: XOR<XOR<BidUpdateToOneWithWhereWithoutWonBiddingInput, BidUpdateWithoutWonBiddingInput>, BidUncheckedUpdateWithoutWonBiddingInput>
  }

  export type BidUncheckedUpdateManyWithoutBiddingNestedInput = {
    create?: XOR<BidCreateWithoutBiddingInput, BidUncheckedCreateWithoutBiddingInput> | BidCreateWithoutBiddingInput[] | BidUncheckedCreateWithoutBiddingInput[]
    connectOrCreate?: BidCreateOrConnectWithoutBiddingInput | BidCreateOrConnectWithoutBiddingInput[]
    upsert?: BidUpsertWithWhereUniqueWithoutBiddingInput | BidUpsertWithWhereUniqueWithoutBiddingInput[]
    createMany?: BidCreateManyBiddingInputEnvelope
    set?: BidWhereUniqueInput | BidWhereUniqueInput[]
    disconnect?: BidWhereUniqueInput | BidWhereUniqueInput[]
    delete?: BidWhereUniqueInput | BidWhereUniqueInput[]
    connect?: BidWhereUniqueInput | BidWhereUniqueInput[]
    update?: BidUpdateWithWhereUniqueWithoutBiddingInput | BidUpdateWithWhereUniqueWithoutBiddingInput[]
    updateMany?: BidUpdateManyWithWhereWithoutBiddingInput | BidUpdateManyWithWhereWithoutBiddingInput[]
    deleteMany?: BidScalarWhereInput | BidScalarWhereInput[]
  }

  export type BiddingCreateNestedOneWithoutBidsInput = {
    create?: XOR<BiddingCreateWithoutBidsInput, BiddingUncheckedCreateWithoutBidsInput>
    connectOrCreate?: BiddingCreateOrConnectWithoutBidsInput
    connect?: BiddingWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutBidsInput = {
    create?: XOR<UserCreateWithoutBidsInput, UserUncheckedCreateWithoutBidsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBidsInput
    connect?: UserWhereUniqueInput
  }

  export type BiddingCreateNestedOneWithoutWinningBidInput = {
    create?: XOR<BiddingCreateWithoutWinningBidInput, BiddingUncheckedCreateWithoutWinningBidInput>
    connectOrCreate?: BiddingCreateOrConnectWithoutWinningBidInput
    connect?: BiddingWhereUniqueInput
  }

  export type BiddingUncheckedCreateNestedOneWithoutWinningBidInput = {
    create?: XOR<BiddingCreateWithoutWinningBidInput, BiddingUncheckedCreateWithoutWinningBidInput>
    connectOrCreate?: BiddingCreateOrConnectWithoutWinningBidInput
    connect?: BiddingWhereUniqueInput
  }

  export type EnumBidStatusFieldUpdateOperationsInput = {
    set?: $Enums.BidStatus
  }

  export type BiddingUpdateOneRequiredWithoutBidsNestedInput = {
    create?: XOR<BiddingCreateWithoutBidsInput, BiddingUncheckedCreateWithoutBidsInput>
    connectOrCreate?: BiddingCreateOrConnectWithoutBidsInput
    upsert?: BiddingUpsertWithoutBidsInput
    connect?: BiddingWhereUniqueInput
    update?: XOR<XOR<BiddingUpdateToOneWithWhereWithoutBidsInput, BiddingUpdateWithoutBidsInput>, BiddingUncheckedUpdateWithoutBidsInput>
  }

  export type UserUpdateOneRequiredWithoutBidsNestedInput = {
    create?: XOR<UserCreateWithoutBidsInput, UserUncheckedCreateWithoutBidsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBidsInput
    upsert?: UserUpsertWithoutBidsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBidsInput, UserUpdateWithoutBidsInput>, UserUncheckedUpdateWithoutBidsInput>
  }

  export type BiddingUpdateOneWithoutWinningBidNestedInput = {
    create?: XOR<BiddingCreateWithoutWinningBidInput, BiddingUncheckedCreateWithoutWinningBidInput>
    connectOrCreate?: BiddingCreateOrConnectWithoutWinningBidInput
    upsert?: BiddingUpsertWithoutWinningBidInput
    disconnect?: BiddingWhereInput | boolean
    delete?: BiddingWhereInput | boolean
    connect?: BiddingWhereUniqueInput
    update?: XOR<XOR<BiddingUpdateToOneWithWhereWithoutWinningBidInput, BiddingUpdateWithoutWinningBidInput>, BiddingUncheckedUpdateWithoutWinningBidInput>
  }

  export type BiddingUncheckedUpdateOneWithoutWinningBidNestedInput = {
    create?: XOR<BiddingCreateWithoutWinningBidInput, BiddingUncheckedCreateWithoutWinningBidInput>
    connectOrCreate?: BiddingCreateOrConnectWithoutWinningBidInput
    upsert?: BiddingUpsertWithoutWinningBidInput
    disconnect?: BiddingWhereInput | boolean
    delete?: BiddingWhereInput | boolean
    connect?: BiddingWhereUniqueInput
    update?: XOR<XOR<BiddingUpdateToOneWithWhereWithoutWinningBidInput, BiddingUpdateWithoutWinningBidInput>, BiddingUncheckedUpdateWithoutWinningBidInput>
  }

  export type UserCreateNestedOneWithoutSolutionsInput = {
    create?: XOR<UserCreateWithoutSolutionsInput, UserUncheckedCreateWithoutSolutionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSolutionsInput
    connect?: UserWhereUniqueInput
  }

  export type CropFeedCreateNestedOneWithoutSolutionsInput = {
    create?: XOR<CropFeedCreateWithoutSolutionsInput, CropFeedUncheckedCreateWithoutSolutionsInput>
    connectOrCreate?: CropFeedCreateOrConnectWithoutSolutionsInput
    connect?: CropFeedWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSolutionsNestedInput = {
    create?: XOR<UserCreateWithoutSolutionsInput, UserUncheckedCreateWithoutSolutionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSolutionsInput
    upsert?: UserUpsertWithoutSolutionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSolutionsInput, UserUpdateWithoutSolutionsInput>, UserUncheckedUpdateWithoutSolutionsInput>
  }

  export type CropFeedUpdateOneRequiredWithoutSolutionsNestedInput = {
    create?: XOR<CropFeedCreateWithoutSolutionsInput, CropFeedUncheckedCreateWithoutSolutionsInput>
    connectOrCreate?: CropFeedCreateOrConnectWithoutSolutionsInput
    upsert?: CropFeedUpsertWithoutSolutionsInput
    connect?: CropFeedWhereUniqueInput
    update?: XOR<XOR<CropFeedUpdateToOneWithWhereWithoutSolutionsInput, CropFeedUpdateWithoutSolutionsInput>, CropFeedUncheckedUpdateWithoutSolutionsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumBiddingStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BiddingStatus | EnumBiddingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BiddingStatus[] | ListEnumBiddingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BiddingStatus[] | ListEnumBiddingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBiddingStatusFilter<$PrismaModel> | $Enums.BiddingStatus
  }

  export type NestedEnumBiddingStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BiddingStatus | EnumBiddingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BiddingStatus[] | ListEnumBiddingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BiddingStatus[] | ListEnumBiddingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBiddingStatusWithAggregatesFilter<$PrismaModel> | $Enums.BiddingStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBiddingStatusFilter<$PrismaModel>
    _max?: NestedEnumBiddingStatusFilter<$PrismaModel>
  }

  export type NestedEnumBidStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BidStatus | EnumBidStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BidStatus[] | ListEnumBidStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BidStatus[] | ListEnumBidStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBidStatusFilter<$PrismaModel> | $Enums.BidStatus
  }

  export type NestedEnumBidStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BidStatus | EnumBidStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BidStatus[] | ListEnumBidStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BidStatus[] | ListEnumBidStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBidStatusWithAggregatesFilter<$PrismaModel> | $Enums.BidStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBidStatusFilter<$PrismaModel>
    _max?: NestedEnumBidStatusFilter<$PrismaModel>
  }

  export type CropFeedCreateWithoutUserInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    isAiQuery?: boolean
    aiResponse?: string | null
    wasHelpful?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentCreateNestedManyWithoutCropFeedInput
    solutions?: SolutionCreateNestedManyWithoutCropFeedInput
  }

  export type CropFeedUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    isAiQuery?: boolean
    aiResponse?: string | null
    wasHelpful?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentUncheckedCreateNestedManyWithoutCropFeedInput
    solutions?: SolutionUncheckedCreateNestedManyWithoutCropFeedInput
  }

  export type CropFeedCreateOrConnectWithoutUserInput = {
    where: CropFeedWhereUniqueInput
    create: XOR<CropFeedCreateWithoutUserInput, CropFeedUncheckedCreateWithoutUserInput>
  }

  export type CropFeedCreateManyUserInputEnvelope = {
    data: CropFeedCreateManyUserInput | CropFeedCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SoilTestRequestCreateWithoutFarmerInput = {
    id?: string
    location: string
    contactNumber: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reports?: SoilTestReportCreateNestedManyWithoutRequestInput
  }

  export type SoilTestRequestUncheckedCreateWithoutFarmerInput = {
    id?: string
    location: string
    contactNumber: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reports?: SoilTestReportUncheckedCreateNestedManyWithoutRequestInput
  }

  export type SoilTestRequestCreateOrConnectWithoutFarmerInput = {
    where: SoilTestRequestWhereUniqueInput
    create: XOR<SoilTestRequestCreateWithoutFarmerInput, SoilTestRequestUncheckedCreateWithoutFarmerInput>
  }

  export type SoilTestRequestCreateManyFarmerInputEnvelope = {
    data: SoilTestRequestCreateManyFarmerInput | SoilTestRequestCreateManyFarmerInput[]
    skipDuplicates?: boolean
  }

  export type SoilTestReportCreateWithoutSoilTesterInput = {
    id?: string
    reportUrl: string
    soilCollectionUrl: string
    farmerPhotoUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    request: SoilTestRequestCreateNestedOneWithoutReportsInput
  }

  export type SoilTestReportUncheckedCreateWithoutSoilTesterInput = {
    id?: string
    reportUrl: string
    soilCollectionUrl: string
    farmerPhotoUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    requestId: string
  }

  export type SoilTestReportCreateOrConnectWithoutSoilTesterInput = {
    where: SoilTestReportWhereUniqueInput
    create: XOR<SoilTestReportCreateWithoutSoilTesterInput, SoilTestReportUncheckedCreateWithoutSoilTesterInput>
  }

  export type SoilTestReportCreateManySoilTesterInputEnvelope = {
    data: SoilTestReportCreateManySoilTesterInput | SoilTestReportCreateManySoilTesterInput[]
    skipDuplicates?: boolean
  }

  export type FeedbackCreateWithoutUserInput = {
    id?: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    giver: UserCreateNestedOneWithoutGivenFeedbacksInput
  }

  export type FeedbackUncheckedCreateWithoutUserInput = {
    id?: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    giverId: string
  }

  export type FeedbackCreateOrConnectWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput>
  }

  export type FeedbackCreateManyUserInputEnvelope = {
    data: FeedbackCreateManyUserInput | FeedbackCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FeedbackCreateWithoutGiverInput = {
    id?: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutFeedbacksInput
  }

  export type FeedbackUncheckedCreateWithoutGiverInput = {
    id?: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type FeedbackCreateOrConnectWithoutGiverInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutGiverInput, FeedbackUncheckedCreateWithoutGiverInput>
  }

  export type FeedbackCreateManyGiverInputEnvelope = {
    data: FeedbackCreateManyGiverInput | FeedbackCreateManyGiverInput[]
    skipDuplicates?: boolean
  }

  export type MarketPriceCreateWithoutAgentInput = {
    id?: string
    cropName: string
    marketName: string
    price: number
    date: Date | string
    cropType: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MarketPriceUncheckedCreateWithoutAgentInput = {
    id?: string
    cropName: string
    marketName: string
    price: number
    date: Date | string
    cropType: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MarketPriceCreateOrConnectWithoutAgentInput = {
    where: MarketPriceWhereUniqueInput
    create: XOR<MarketPriceCreateWithoutAgentInput, MarketPriceUncheckedCreateWithoutAgentInput>
  }

  export type MarketPriceCreateManyAgentInputEnvelope = {
    data: MarketPriceCreateManyAgentInput | MarketPriceCreateManyAgentInput[]
    skipDuplicates?: boolean
  }

  export type BiddingCreateWithoutUserInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    basePrice: number
    address: string
    contactNumber: string
    status?: $Enums.BiddingStatus
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bids?: BidCreateNestedManyWithoutBiddingInput
    winningBid?: BidCreateNestedOneWithoutWonBiddingInput
  }

  export type BiddingUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    basePrice: number
    address: string
    contactNumber: string
    status?: $Enums.BiddingStatus
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    winningBidId?: string | null
    bids?: BidUncheckedCreateNestedManyWithoutBiddingInput
  }

  export type BiddingCreateOrConnectWithoutUserInput = {
    where: BiddingWhereUniqueInput
    create: XOR<BiddingCreateWithoutUserInput, BiddingUncheckedCreateWithoutUserInput>
  }

  export type BiddingCreateManyUserInputEnvelope = {
    data: BiddingCreateManyUserInput | BiddingCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BidCreateWithoutUserInput = {
    id?: string
    amount: number
    status?: $Enums.BidStatus
    createdAt?: Date | string
    bidding: BiddingCreateNestedOneWithoutBidsInput
    wonBidding?: BiddingCreateNestedOneWithoutWinningBidInput
  }

  export type BidUncheckedCreateWithoutUserInput = {
    id?: string
    amount: number
    status?: $Enums.BidStatus
    createdAt?: Date | string
    biddingId: string
    wonBidding?: BiddingUncheckedCreateNestedOneWithoutWinningBidInput
  }

  export type BidCreateOrConnectWithoutUserInput = {
    where: BidWhereUniqueInput
    create: XOR<BidCreateWithoutUserInput, BidUncheckedCreateWithoutUserInput>
  }

  export type BidCreateManyUserInputEnvelope = {
    data: BidCreateManyUserInput | BidCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SolutionCreateWithoutUserInput = {
    id?: string
    description: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cropFeed: CropFeedCreateNestedOneWithoutSolutionsInput
  }

  export type SolutionUncheckedCreateWithoutUserInput = {
    id?: string
    description: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cropFeedId: string
  }

  export type SolutionCreateOrConnectWithoutUserInput = {
    where: SolutionWhereUniqueInput
    create: XOR<SolutionCreateWithoutUserInput, SolutionUncheckedCreateWithoutUserInput>
  }

  export type SolutionCreateManyUserInputEnvelope = {
    data: SolutionCreateManyUserInput | SolutionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CropFeedUpsertWithWhereUniqueWithoutUserInput = {
    where: CropFeedWhereUniqueInput
    update: XOR<CropFeedUpdateWithoutUserInput, CropFeedUncheckedUpdateWithoutUserInput>
    create: XOR<CropFeedCreateWithoutUserInput, CropFeedUncheckedCreateWithoutUserInput>
  }

  export type CropFeedUpdateWithWhereUniqueWithoutUserInput = {
    where: CropFeedWhereUniqueInput
    data: XOR<CropFeedUpdateWithoutUserInput, CropFeedUncheckedUpdateWithoutUserInput>
  }

  export type CropFeedUpdateManyWithWhereWithoutUserInput = {
    where: CropFeedScalarWhereInput
    data: XOR<CropFeedUpdateManyMutationInput, CropFeedUncheckedUpdateManyWithoutUserInput>
  }

  export type CropFeedScalarWhereInput = {
    AND?: CropFeedScalarWhereInput | CropFeedScalarWhereInput[]
    OR?: CropFeedScalarWhereInput[]
    NOT?: CropFeedScalarWhereInput | CropFeedScalarWhereInput[]
    id?: StringFilter<"CropFeed"> | string
    title?: StringFilter<"CropFeed"> | string
    description?: StringFilter<"CropFeed"> | string
    imageUrl?: StringNullableFilter<"CropFeed"> | string | null
    isAiQuery?: BoolFilter<"CropFeed"> | boolean
    aiResponse?: StringNullableFilter<"CropFeed"> | string | null
    wasHelpful?: BoolNullableFilter<"CropFeed"> | boolean | null
    createdAt?: DateTimeFilter<"CropFeed"> | Date | string
    updatedAt?: DateTimeFilter<"CropFeed"> | Date | string
    userId?: StringFilter<"CropFeed"> | string
  }

  export type SoilTestRequestUpsertWithWhereUniqueWithoutFarmerInput = {
    where: SoilTestRequestWhereUniqueInput
    update: XOR<SoilTestRequestUpdateWithoutFarmerInput, SoilTestRequestUncheckedUpdateWithoutFarmerInput>
    create: XOR<SoilTestRequestCreateWithoutFarmerInput, SoilTestRequestUncheckedCreateWithoutFarmerInput>
  }

  export type SoilTestRequestUpdateWithWhereUniqueWithoutFarmerInput = {
    where: SoilTestRequestWhereUniqueInput
    data: XOR<SoilTestRequestUpdateWithoutFarmerInput, SoilTestRequestUncheckedUpdateWithoutFarmerInput>
  }

  export type SoilTestRequestUpdateManyWithWhereWithoutFarmerInput = {
    where: SoilTestRequestScalarWhereInput
    data: XOR<SoilTestRequestUpdateManyMutationInput, SoilTestRequestUncheckedUpdateManyWithoutFarmerInput>
  }

  export type SoilTestRequestScalarWhereInput = {
    AND?: SoilTestRequestScalarWhereInput | SoilTestRequestScalarWhereInput[]
    OR?: SoilTestRequestScalarWhereInput[]
    NOT?: SoilTestRequestScalarWhereInput | SoilTestRequestScalarWhereInput[]
    id?: StringFilter<"SoilTestRequest"> | string
    location?: StringFilter<"SoilTestRequest"> | string
    contactNumber?: StringFilter<"SoilTestRequest"> | string
    status?: StringFilter<"SoilTestRequest"> | string
    createdAt?: DateTimeFilter<"SoilTestRequest"> | Date | string
    updatedAt?: DateTimeFilter<"SoilTestRequest"> | Date | string
    farmerId?: StringFilter<"SoilTestRequest"> | string
  }

  export type SoilTestReportUpsertWithWhereUniqueWithoutSoilTesterInput = {
    where: SoilTestReportWhereUniqueInput
    update: XOR<SoilTestReportUpdateWithoutSoilTesterInput, SoilTestReportUncheckedUpdateWithoutSoilTesterInput>
    create: XOR<SoilTestReportCreateWithoutSoilTesterInput, SoilTestReportUncheckedCreateWithoutSoilTesterInput>
  }

  export type SoilTestReportUpdateWithWhereUniqueWithoutSoilTesterInput = {
    where: SoilTestReportWhereUniqueInput
    data: XOR<SoilTestReportUpdateWithoutSoilTesterInput, SoilTestReportUncheckedUpdateWithoutSoilTesterInput>
  }

  export type SoilTestReportUpdateManyWithWhereWithoutSoilTesterInput = {
    where: SoilTestReportScalarWhereInput
    data: XOR<SoilTestReportUpdateManyMutationInput, SoilTestReportUncheckedUpdateManyWithoutSoilTesterInput>
  }

  export type SoilTestReportScalarWhereInput = {
    AND?: SoilTestReportScalarWhereInput | SoilTestReportScalarWhereInput[]
    OR?: SoilTestReportScalarWhereInput[]
    NOT?: SoilTestReportScalarWhereInput | SoilTestReportScalarWhereInput[]
    id?: StringFilter<"SoilTestReport"> | string
    reportUrl?: StringFilter<"SoilTestReport"> | string
    soilCollectionUrl?: StringFilter<"SoilTestReport"> | string
    farmerPhotoUrl?: StringFilter<"SoilTestReport"> | string
    createdAt?: DateTimeFilter<"SoilTestReport"> | Date | string
    updatedAt?: DateTimeFilter<"SoilTestReport"> | Date | string
    requestId?: StringFilter<"SoilTestReport"> | string
    soilTesterId?: StringFilter<"SoilTestReport"> | string
  }

  export type FeedbackUpsertWithWhereUniqueWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutUserInput, FeedbackUncheckedUpdateWithoutUserInput>
    create: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutUserInput, FeedbackUncheckedUpdateWithoutUserInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutUserInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutUserInput>
  }

  export type FeedbackScalarWhereInput = {
    AND?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    OR?: FeedbackScalarWhereInput[]
    NOT?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    id?: StringFilter<"Feedback"> | string
    rating?: IntFilter<"Feedback"> | number
    comment?: StringNullableFilter<"Feedback"> | string | null
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
    updatedAt?: DateTimeFilter<"Feedback"> | Date | string
    userId?: StringFilter<"Feedback"> | string
    giverId?: StringFilter<"Feedback"> | string
  }

  export type FeedbackUpsertWithWhereUniqueWithoutGiverInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutGiverInput, FeedbackUncheckedUpdateWithoutGiverInput>
    create: XOR<FeedbackCreateWithoutGiverInput, FeedbackUncheckedCreateWithoutGiverInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutGiverInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutGiverInput, FeedbackUncheckedUpdateWithoutGiverInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutGiverInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutGiverInput>
  }

  export type MarketPriceUpsertWithWhereUniqueWithoutAgentInput = {
    where: MarketPriceWhereUniqueInput
    update: XOR<MarketPriceUpdateWithoutAgentInput, MarketPriceUncheckedUpdateWithoutAgentInput>
    create: XOR<MarketPriceCreateWithoutAgentInput, MarketPriceUncheckedCreateWithoutAgentInput>
  }

  export type MarketPriceUpdateWithWhereUniqueWithoutAgentInput = {
    where: MarketPriceWhereUniqueInput
    data: XOR<MarketPriceUpdateWithoutAgentInput, MarketPriceUncheckedUpdateWithoutAgentInput>
  }

  export type MarketPriceUpdateManyWithWhereWithoutAgentInput = {
    where: MarketPriceScalarWhereInput
    data: XOR<MarketPriceUpdateManyMutationInput, MarketPriceUncheckedUpdateManyWithoutAgentInput>
  }

  export type MarketPriceScalarWhereInput = {
    AND?: MarketPriceScalarWhereInput | MarketPriceScalarWhereInput[]
    OR?: MarketPriceScalarWhereInput[]
    NOT?: MarketPriceScalarWhereInput | MarketPriceScalarWhereInput[]
    id?: StringFilter<"MarketPrice"> | string
    cropName?: StringFilter<"MarketPrice"> | string
    marketName?: StringFilter<"MarketPrice"> | string
    price?: FloatFilter<"MarketPrice"> | number
    date?: DateTimeFilter<"MarketPrice"> | Date | string
    cropType?: StringFilter<"MarketPrice"> | string
    imageUrl?: StringNullableFilter<"MarketPrice"> | string | null
    createdAt?: DateTimeFilter<"MarketPrice"> | Date | string
    updatedAt?: DateTimeFilter<"MarketPrice"> | Date | string
    agentId?: StringFilter<"MarketPrice"> | string
  }

  export type BiddingUpsertWithWhereUniqueWithoutUserInput = {
    where: BiddingWhereUniqueInput
    update: XOR<BiddingUpdateWithoutUserInput, BiddingUncheckedUpdateWithoutUserInput>
    create: XOR<BiddingCreateWithoutUserInput, BiddingUncheckedCreateWithoutUserInput>
  }

  export type BiddingUpdateWithWhereUniqueWithoutUserInput = {
    where: BiddingWhereUniqueInput
    data: XOR<BiddingUpdateWithoutUserInput, BiddingUncheckedUpdateWithoutUserInput>
  }

  export type BiddingUpdateManyWithWhereWithoutUserInput = {
    where: BiddingScalarWhereInput
    data: XOR<BiddingUpdateManyMutationInput, BiddingUncheckedUpdateManyWithoutUserInput>
  }

  export type BiddingScalarWhereInput = {
    AND?: BiddingScalarWhereInput | BiddingScalarWhereInput[]
    OR?: BiddingScalarWhereInput[]
    NOT?: BiddingScalarWhereInput | BiddingScalarWhereInput[]
    id?: StringFilter<"Bidding"> | string
    title?: StringFilter<"Bidding"> | string
    description?: StringFilter<"Bidding"> | string
    imageUrl?: StringNullableFilter<"Bidding"> | string | null
    basePrice?: FloatFilter<"Bidding"> | number
    address?: StringFilter<"Bidding"> | string
    contactNumber?: StringFilter<"Bidding"> | string
    status?: EnumBiddingStatusFilter<"Bidding"> | $Enums.BiddingStatus
    endDate?: DateTimeNullableFilter<"Bidding"> | Date | string | null
    createdAt?: DateTimeFilter<"Bidding"> | Date | string
    updatedAt?: DateTimeFilter<"Bidding"> | Date | string
    userId?: StringFilter<"Bidding"> | string
    winningBidId?: StringNullableFilter<"Bidding"> | string | null
  }

  export type BidUpsertWithWhereUniqueWithoutUserInput = {
    where: BidWhereUniqueInput
    update: XOR<BidUpdateWithoutUserInput, BidUncheckedUpdateWithoutUserInput>
    create: XOR<BidCreateWithoutUserInput, BidUncheckedCreateWithoutUserInput>
  }

  export type BidUpdateWithWhereUniqueWithoutUserInput = {
    where: BidWhereUniqueInput
    data: XOR<BidUpdateWithoutUserInput, BidUncheckedUpdateWithoutUserInput>
  }

  export type BidUpdateManyWithWhereWithoutUserInput = {
    where: BidScalarWhereInput
    data: XOR<BidUpdateManyMutationInput, BidUncheckedUpdateManyWithoutUserInput>
  }

  export type BidScalarWhereInput = {
    AND?: BidScalarWhereInput | BidScalarWhereInput[]
    OR?: BidScalarWhereInput[]
    NOT?: BidScalarWhereInput | BidScalarWhereInput[]
    id?: StringFilter<"Bid"> | string
    amount?: FloatFilter<"Bid"> | number
    status?: EnumBidStatusFilter<"Bid"> | $Enums.BidStatus
    createdAt?: DateTimeFilter<"Bid"> | Date | string
    biddingId?: StringFilter<"Bid"> | string
    userId?: StringFilter<"Bid"> | string
  }

  export type SolutionUpsertWithWhereUniqueWithoutUserInput = {
    where: SolutionWhereUniqueInput
    update: XOR<SolutionUpdateWithoutUserInput, SolutionUncheckedUpdateWithoutUserInput>
    create: XOR<SolutionCreateWithoutUserInput, SolutionUncheckedCreateWithoutUserInput>
  }

  export type SolutionUpdateWithWhereUniqueWithoutUserInput = {
    where: SolutionWhereUniqueInput
    data: XOR<SolutionUpdateWithoutUserInput, SolutionUncheckedUpdateWithoutUserInput>
  }

  export type SolutionUpdateManyWithWhereWithoutUserInput = {
    where: SolutionScalarWhereInput
    data: XOR<SolutionUpdateManyMutationInput, SolutionUncheckedUpdateManyWithoutUserInput>
  }

  export type SolutionScalarWhereInput = {
    AND?: SolutionScalarWhereInput | SolutionScalarWhereInput[]
    OR?: SolutionScalarWhereInput[]
    NOT?: SolutionScalarWhereInput | SolutionScalarWhereInput[]
    id?: StringFilter<"Solution"> | string
    description?: StringFilter<"Solution"> | string
    imageUrl?: StringNullableFilter<"Solution"> | string | null
    createdAt?: DateTimeFilter<"Solution"> | Date | string
    updatedAt?: DateTimeFilter<"Solution"> | Date | string
    userId?: StringFilter<"Solution"> | string
    cropFeedId?: StringFilter<"Solution"> | string
  }

  export type UserCreateWithoutCropFeedsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    farmerCardNumber?: string | null
    companyName?: string | null
    address?: string | null
    contactNumber?: string | null
    krishiStars?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    soilTestRequests?: SoilTestRequestCreateNestedManyWithoutFarmerInput
    soilTestReports?: SoilTestReportCreateNestedManyWithoutSoilTesterInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    givenFeedbacks?: FeedbackCreateNestedManyWithoutGiverInput
    marketPrices?: MarketPriceCreateNestedManyWithoutAgentInput
    biddings?: BiddingCreateNestedManyWithoutUserInput
    bids?: BidCreateNestedManyWithoutUserInput
    solutions?: SolutionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCropFeedsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    farmerCardNumber?: string | null
    companyName?: string | null
    address?: string | null
    contactNumber?: string | null
    krishiStars?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    soilTestRequests?: SoilTestRequestUncheckedCreateNestedManyWithoutFarmerInput
    soilTestReports?: SoilTestReportUncheckedCreateNestedManyWithoutSoilTesterInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    givenFeedbacks?: FeedbackUncheckedCreateNestedManyWithoutGiverInput
    marketPrices?: MarketPriceUncheckedCreateNestedManyWithoutAgentInput
    biddings?: BiddingUncheckedCreateNestedManyWithoutUserInput
    bids?: BidUncheckedCreateNestedManyWithoutUserInput
    solutions?: SolutionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCropFeedsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCropFeedsInput, UserUncheckedCreateWithoutCropFeedsInput>
  }

  export type CommentCreateWithoutCropFeedInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type CommentUncheckedCreateWithoutCropFeedInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type CommentCreateOrConnectWithoutCropFeedInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutCropFeedInput, CommentUncheckedCreateWithoutCropFeedInput>
  }

  export type CommentCreateManyCropFeedInputEnvelope = {
    data: CommentCreateManyCropFeedInput | CommentCreateManyCropFeedInput[]
    skipDuplicates?: boolean
  }

  export type SolutionCreateWithoutCropFeedInput = {
    id?: string
    description: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSolutionsInput
  }

  export type SolutionUncheckedCreateWithoutCropFeedInput = {
    id?: string
    description: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type SolutionCreateOrConnectWithoutCropFeedInput = {
    where: SolutionWhereUniqueInput
    create: XOR<SolutionCreateWithoutCropFeedInput, SolutionUncheckedCreateWithoutCropFeedInput>
  }

  export type SolutionCreateManyCropFeedInputEnvelope = {
    data: SolutionCreateManyCropFeedInput | SolutionCreateManyCropFeedInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCropFeedsInput = {
    update: XOR<UserUpdateWithoutCropFeedsInput, UserUncheckedUpdateWithoutCropFeedsInput>
    create: XOR<UserCreateWithoutCropFeedsInput, UserUncheckedCreateWithoutCropFeedsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCropFeedsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCropFeedsInput, UserUncheckedUpdateWithoutCropFeedsInput>
  }

  export type UserUpdateWithoutCropFeedsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    farmerCardNumber?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    krishiStars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    soilTestRequests?: SoilTestRequestUpdateManyWithoutFarmerNestedInput
    soilTestReports?: SoilTestReportUpdateManyWithoutSoilTesterNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    givenFeedbacks?: FeedbackUpdateManyWithoutGiverNestedInput
    marketPrices?: MarketPriceUpdateManyWithoutAgentNestedInput
    biddings?: BiddingUpdateManyWithoutUserNestedInput
    bids?: BidUpdateManyWithoutUserNestedInput
    solutions?: SolutionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCropFeedsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    farmerCardNumber?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    krishiStars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    soilTestRequests?: SoilTestRequestUncheckedUpdateManyWithoutFarmerNestedInput
    soilTestReports?: SoilTestReportUncheckedUpdateManyWithoutSoilTesterNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    givenFeedbacks?: FeedbackUncheckedUpdateManyWithoutGiverNestedInput
    marketPrices?: MarketPriceUncheckedUpdateManyWithoutAgentNestedInput
    biddings?: BiddingUncheckedUpdateManyWithoutUserNestedInput
    bids?: BidUncheckedUpdateManyWithoutUserNestedInput
    solutions?: SolutionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CommentUpsertWithWhereUniqueWithoutCropFeedInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutCropFeedInput, CommentUncheckedUpdateWithoutCropFeedInput>
    create: XOR<CommentCreateWithoutCropFeedInput, CommentUncheckedCreateWithoutCropFeedInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutCropFeedInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutCropFeedInput, CommentUncheckedUpdateWithoutCropFeedInput>
  }

  export type CommentUpdateManyWithWhereWithoutCropFeedInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutCropFeedInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: StringFilter<"Comment"> | string
    content?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    cropFeedId?: StringFilter<"Comment"> | string
    userId?: StringFilter<"Comment"> | string
  }

  export type SolutionUpsertWithWhereUniqueWithoutCropFeedInput = {
    where: SolutionWhereUniqueInput
    update: XOR<SolutionUpdateWithoutCropFeedInput, SolutionUncheckedUpdateWithoutCropFeedInput>
    create: XOR<SolutionCreateWithoutCropFeedInput, SolutionUncheckedCreateWithoutCropFeedInput>
  }

  export type SolutionUpdateWithWhereUniqueWithoutCropFeedInput = {
    where: SolutionWhereUniqueInput
    data: XOR<SolutionUpdateWithoutCropFeedInput, SolutionUncheckedUpdateWithoutCropFeedInput>
  }

  export type SolutionUpdateManyWithWhereWithoutCropFeedInput = {
    where: SolutionScalarWhereInput
    data: XOR<SolutionUpdateManyMutationInput, SolutionUncheckedUpdateManyWithoutCropFeedInput>
  }

  export type CropFeedCreateWithoutCommentsInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    isAiQuery?: boolean
    aiResponse?: string | null
    wasHelpful?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCropFeedsInput
    solutions?: SolutionCreateNestedManyWithoutCropFeedInput
  }

  export type CropFeedUncheckedCreateWithoutCommentsInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    isAiQuery?: boolean
    aiResponse?: string | null
    wasHelpful?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    solutions?: SolutionUncheckedCreateNestedManyWithoutCropFeedInput
  }

  export type CropFeedCreateOrConnectWithoutCommentsInput = {
    where: CropFeedWhereUniqueInput
    create: XOR<CropFeedCreateWithoutCommentsInput, CropFeedUncheckedCreateWithoutCommentsInput>
  }

  export type CropFeedUpsertWithoutCommentsInput = {
    update: XOR<CropFeedUpdateWithoutCommentsInput, CropFeedUncheckedUpdateWithoutCommentsInput>
    create: XOR<CropFeedCreateWithoutCommentsInput, CropFeedUncheckedCreateWithoutCommentsInput>
    where?: CropFeedWhereInput
  }

  export type CropFeedUpdateToOneWithWhereWithoutCommentsInput = {
    where?: CropFeedWhereInput
    data: XOR<CropFeedUpdateWithoutCommentsInput, CropFeedUncheckedUpdateWithoutCommentsInput>
  }

  export type CropFeedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAiQuery?: BoolFieldUpdateOperationsInput | boolean
    aiResponse?: NullableStringFieldUpdateOperationsInput | string | null
    wasHelpful?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCropFeedsNestedInput
    solutions?: SolutionUpdateManyWithoutCropFeedNestedInput
  }

  export type CropFeedUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAiQuery?: BoolFieldUpdateOperationsInput | boolean
    aiResponse?: NullableStringFieldUpdateOperationsInput | string | null
    wasHelpful?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    solutions?: SolutionUncheckedUpdateManyWithoutCropFeedNestedInput
  }

  export type UserCreateWithoutSoilTestRequestsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    farmerCardNumber?: string | null
    companyName?: string | null
    address?: string | null
    contactNumber?: string | null
    krishiStars?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    cropFeeds?: CropFeedCreateNestedManyWithoutUserInput
    soilTestReports?: SoilTestReportCreateNestedManyWithoutSoilTesterInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    givenFeedbacks?: FeedbackCreateNestedManyWithoutGiverInput
    marketPrices?: MarketPriceCreateNestedManyWithoutAgentInput
    biddings?: BiddingCreateNestedManyWithoutUserInput
    bids?: BidCreateNestedManyWithoutUserInput
    solutions?: SolutionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSoilTestRequestsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    farmerCardNumber?: string | null
    companyName?: string | null
    address?: string | null
    contactNumber?: string | null
    krishiStars?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    cropFeeds?: CropFeedUncheckedCreateNestedManyWithoutUserInput
    soilTestReports?: SoilTestReportUncheckedCreateNestedManyWithoutSoilTesterInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    givenFeedbacks?: FeedbackUncheckedCreateNestedManyWithoutGiverInput
    marketPrices?: MarketPriceUncheckedCreateNestedManyWithoutAgentInput
    biddings?: BiddingUncheckedCreateNestedManyWithoutUserInput
    bids?: BidUncheckedCreateNestedManyWithoutUserInput
    solutions?: SolutionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSoilTestRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSoilTestRequestsInput, UserUncheckedCreateWithoutSoilTestRequestsInput>
  }

  export type SoilTestReportCreateWithoutRequestInput = {
    id?: string
    reportUrl: string
    soilCollectionUrl: string
    farmerPhotoUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    soilTester: UserCreateNestedOneWithoutSoilTestReportsInput
  }

  export type SoilTestReportUncheckedCreateWithoutRequestInput = {
    id?: string
    reportUrl: string
    soilCollectionUrl: string
    farmerPhotoUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    soilTesterId: string
  }

  export type SoilTestReportCreateOrConnectWithoutRequestInput = {
    where: SoilTestReportWhereUniqueInput
    create: XOR<SoilTestReportCreateWithoutRequestInput, SoilTestReportUncheckedCreateWithoutRequestInput>
  }

  export type SoilTestReportCreateManyRequestInputEnvelope = {
    data: SoilTestReportCreateManyRequestInput | SoilTestReportCreateManyRequestInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutSoilTestRequestsInput = {
    update: XOR<UserUpdateWithoutSoilTestRequestsInput, UserUncheckedUpdateWithoutSoilTestRequestsInput>
    create: XOR<UserCreateWithoutSoilTestRequestsInput, UserUncheckedCreateWithoutSoilTestRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSoilTestRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSoilTestRequestsInput, UserUncheckedUpdateWithoutSoilTestRequestsInput>
  }

  export type UserUpdateWithoutSoilTestRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    farmerCardNumber?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    krishiStars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cropFeeds?: CropFeedUpdateManyWithoutUserNestedInput
    soilTestReports?: SoilTestReportUpdateManyWithoutSoilTesterNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    givenFeedbacks?: FeedbackUpdateManyWithoutGiverNestedInput
    marketPrices?: MarketPriceUpdateManyWithoutAgentNestedInput
    biddings?: BiddingUpdateManyWithoutUserNestedInput
    bids?: BidUpdateManyWithoutUserNestedInput
    solutions?: SolutionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSoilTestRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    farmerCardNumber?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    krishiStars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cropFeeds?: CropFeedUncheckedUpdateManyWithoutUserNestedInput
    soilTestReports?: SoilTestReportUncheckedUpdateManyWithoutSoilTesterNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    givenFeedbacks?: FeedbackUncheckedUpdateManyWithoutGiverNestedInput
    marketPrices?: MarketPriceUncheckedUpdateManyWithoutAgentNestedInput
    biddings?: BiddingUncheckedUpdateManyWithoutUserNestedInput
    bids?: BidUncheckedUpdateManyWithoutUserNestedInput
    solutions?: SolutionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SoilTestReportUpsertWithWhereUniqueWithoutRequestInput = {
    where: SoilTestReportWhereUniqueInput
    update: XOR<SoilTestReportUpdateWithoutRequestInput, SoilTestReportUncheckedUpdateWithoutRequestInput>
    create: XOR<SoilTestReportCreateWithoutRequestInput, SoilTestReportUncheckedCreateWithoutRequestInput>
  }

  export type SoilTestReportUpdateWithWhereUniqueWithoutRequestInput = {
    where: SoilTestReportWhereUniqueInput
    data: XOR<SoilTestReportUpdateWithoutRequestInput, SoilTestReportUncheckedUpdateWithoutRequestInput>
  }

  export type SoilTestReportUpdateManyWithWhereWithoutRequestInput = {
    where: SoilTestReportScalarWhereInput
    data: XOR<SoilTestReportUpdateManyMutationInput, SoilTestReportUncheckedUpdateManyWithoutRequestInput>
  }

  export type SoilTestRequestCreateWithoutReportsInput = {
    id?: string
    location: string
    contactNumber: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    farmer: UserCreateNestedOneWithoutSoilTestRequestsInput
  }

  export type SoilTestRequestUncheckedCreateWithoutReportsInput = {
    id?: string
    location: string
    contactNumber: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    farmerId: string
  }

  export type SoilTestRequestCreateOrConnectWithoutReportsInput = {
    where: SoilTestRequestWhereUniqueInput
    create: XOR<SoilTestRequestCreateWithoutReportsInput, SoilTestRequestUncheckedCreateWithoutReportsInput>
  }

  export type UserCreateWithoutSoilTestReportsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    farmerCardNumber?: string | null
    companyName?: string | null
    address?: string | null
    contactNumber?: string | null
    krishiStars?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    cropFeeds?: CropFeedCreateNestedManyWithoutUserInput
    soilTestRequests?: SoilTestRequestCreateNestedManyWithoutFarmerInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    givenFeedbacks?: FeedbackCreateNestedManyWithoutGiverInput
    marketPrices?: MarketPriceCreateNestedManyWithoutAgentInput
    biddings?: BiddingCreateNestedManyWithoutUserInput
    bids?: BidCreateNestedManyWithoutUserInput
    solutions?: SolutionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSoilTestReportsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    farmerCardNumber?: string | null
    companyName?: string | null
    address?: string | null
    contactNumber?: string | null
    krishiStars?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    cropFeeds?: CropFeedUncheckedCreateNestedManyWithoutUserInput
    soilTestRequests?: SoilTestRequestUncheckedCreateNestedManyWithoutFarmerInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    givenFeedbacks?: FeedbackUncheckedCreateNestedManyWithoutGiverInput
    marketPrices?: MarketPriceUncheckedCreateNestedManyWithoutAgentInput
    biddings?: BiddingUncheckedCreateNestedManyWithoutUserInput
    bids?: BidUncheckedCreateNestedManyWithoutUserInput
    solutions?: SolutionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSoilTestReportsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSoilTestReportsInput, UserUncheckedCreateWithoutSoilTestReportsInput>
  }

  export type SoilTestRequestUpsertWithoutReportsInput = {
    update: XOR<SoilTestRequestUpdateWithoutReportsInput, SoilTestRequestUncheckedUpdateWithoutReportsInput>
    create: XOR<SoilTestRequestCreateWithoutReportsInput, SoilTestRequestUncheckedCreateWithoutReportsInput>
    where?: SoilTestRequestWhereInput
  }

  export type SoilTestRequestUpdateToOneWithWhereWithoutReportsInput = {
    where?: SoilTestRequestWhereInput
    data: XOR<SoilTestRequestUpdateWithoutReportsInput, SoilTestRequestUncheckedUpdateWithoutReportsInput>
  }

  export type SoilTestRequestUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    farmer?: UserUpdateOneRequiredWithoutSoilTestRequestsNestedInput
  }

  export type SoilTestRequestUncheckedUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    farmerId?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpsertWithoutSoilTestReportsInput = {
    update: XOR<UserUpdateWithoutSoilTestReportsInput, UserUncheckedUpdateWithoutSoilTestReportsInput>
    create: XOR<UserCreateWithoutSoilTestReportsInput, UserUncheckedCreateWithoutSoilTestReportsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSoilTestReportsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSoilTestReportsInput, UserUncheckedUpdateWithoutSoilTestReportsInput>
  }

  export type UserUpdateWithoutSoilTestReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    farmerCardNumber?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    krishiStars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cropFeeds?: CropFeedUpdateManyWithoutUserNestedInput
    soilTestRequests?: SoilTestRequestUpdateManyWithoutFarmerNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    givenFeedbacks?: FeedbackUpdateManyWithoutGiverNestedInput
    marketPrices?: MarketPriceUpdateManyWithoutAgentNestedInput
    biddings?: BiddingUpdateManyWithoutUserNestedInput
    bids?: BidUpdateManyWithoutUserNestedInput
    solutions?: SolutionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSoilTestReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    farmerCardNumber?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    krishiStars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cropFeeds?: CropFeedUncheckedUpdateManyWithoutUserNestedInput
    soilTestRequests?: SoilTestRequestUncheckedUpdateManyWithoutFarmerNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    givenFeedbacks?: FeedbackUncheckedUpdateManyWithoutGiverNestedInput
    marketPrices?: MarketPriceUncheckedUpdateManyWithoutAgentNestedInput
    biddings?: BiddingUncheckedUpdateManyWithoutUserNestedInput
    bids?: BidUncheckedUpdateManyWithoutUserNestedInput
    solutions?: SolutionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutFeedbacksInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    farmerCardNumber?: string | null
    companyName?: string | null
    address?: string | null
    contactNumber?: string | null
    krishiStars?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    cropFeeds?: CropFeedCreateNestedManyWithoutUserInput
    soilTestRequests?: SoilTestRequestCreateNestedManyWithoutFarmerInput
    soilTestReports?: SoilTestReportCreateNestedManyWithoutSoilTesterInput
    givenFeedbacks?: FeedbackCreateNestedManyWithoutGiverInput
    marketPrices?: MarketPriceCreateNestedManyWithoutAgentInput
    biddings?: BiddingCreateNestedManyWithoutUserInput
    bids?: BidCreateNestedManyWithoutUserInput
    solutions?: SolutionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFeedbacksInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    farmerCardNumber?: string | null
    companyName?: string | null
    address?: string | null
    contactNumber?: string | null
    krishiStars?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    cropFeeds?: CropFeedUncheckedCreateNestedManyWithoutUserInput
    soilTestRequests?: SoilTestRequestUncheckedCreateNestedManyWithoutFarmerInput
    soilTestReports?: SoilTestReportUncheckedCreateNestedManyWithoutSoilTesterInput
    givenFeedbacks?: FeedbackUncheckedCreateNestedManyWithoutGiverInput
    marketPrices?: MarketPriceUncheckedCreateNestedManyWithoutAgentInput
    biddings?: BiddingUncheckedCreateNestedManyWithoutUserInput
    bids?: BidUncheckedCreateNestedManyWithoutUserInput
    solutions?: SolutionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFeedbacksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFeedbacksInput, UserUncheckedCreateWithoutFeedbacksInput>
  }

  export type UserCreateWithoutGivenFeedbacksInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    farmerCardNumber?: string | null
    companyName?: string | null
    address?: string | null
    contactNumber?: string | null
    krishiStars?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    cropFeeds?: CropFeedCreateNestedManyWithoutUserInput
    soilTestRequests?: SoilTestRequestCreateNestedManyWithoutFarmerInput
    soilTestReports?: SoilTestReportCreateNestedManyWithoutSoilTesterInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    marketPrices?: MarketPriceCreateNestedManyWithoutAgentInput
    biddings?: BiddingCreateNestedManyWithoutUserInput
    bids?: BidCreateNestedManyWithoutUserInput
    solutions?: SolutionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGivenFeedbacksInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    farmerCardNumber?: string | null
    companyName?: string | null
    address?: string | null
    contactNumber?: string | null
    krishiStars?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    cropFeeds?: CropFeedUncheckedCreateNestedManyWithoutUserInput
    soilTestRequests?: SoilTestRequestUncheckedCreateNestedManyWithoutFarmerInput
    soilTestReports?: SoilTestReportUncheckedCreateNestedManyWithoutSoilTesterInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    marketPrices?: MarketPriceUncheckedCreateNestedManyWithoutAgentInput
    biddings?: BiddingUncheckedCreateNestedManyWithoutUserInput
    bids?: BidUncheckedCreateNestedManyWithoutUserInput
    solutions?: SolutionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGivenFeedbacksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGivenFeedbacksInput, UserUncheckedCreateWithoutGivenFeedbacksInput>
  }

  export type UserUpsertWithoutFeedbacksInput = {
    update: XOR<UserUpdateWithoutFeedbacksInput, UserUncheckedUpdateWithoutFeedbacksInput>
    create: XOR<UserCreateWithoutFeedbacksInput, UserUncheckedCreateWithoutFeedbacksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFeedbacksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFeedbacksInput, UserUncheckedUpdateWithoutFeedbacksInput>
  }

  export type UserUpdateWithoutFeedbacksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    farmerCardNumber?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    krishiStars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cropFeeds?: CropFeedUpdateManyWithoutUserNestedInput
    soilTestRequests?: SoilTestRequestUpdateManyWithoutFarmerNestedInput
    soilTestReports?: SoilTestReportUpdateManyWithoutSoilTesterNestedInput
    givenFeedbacks?: FeedbackUpdateManyWithoutGiverNestedInput
    marketPrices?: MarketPriceUpdateManyWithoutAgentNestedInput
    biddings?: BiddingUpdateManyWithoutUserNestedInput
    bids?: BidUpdateManyWithoutUserNestedInput
    solutions?: SolutionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFeedbacksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    farmerCardNumber?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    krishiStars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cropFeeds?: CropFeedUncheckedUpdateManyWithoutUserNestedInput
    soilTestRequests?: SoilTestRequestUncheckedUpdateManyWithoutFarmerNestedInput
    soilTestReports?: SoilTestReportUncheckedUpdateManyWithoutSoilTesterNestedInput
    givenFeedbacks?: FeedbackUncheckedUpdateManyWithoutGiverNestedInput
    marketPrices?: MarketPriceUncheckedUpdateManyWithoutAgentNestedInput
    biddings?: BiddingUncheckedUpdateManyWithoutUserNestedInput
    bids?: BidUncheckedUpdateManyWithoutUserNestedInput
    solutions?: SolutionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutGivenFeedbacksInput = {
    update: XOR<UserUpdateWithoutGivenFeedbacksInput, UserUncheckedUpdateWithoutGivenFeedbacksInput>
    create: XOR<UserCreateWithoutGivenFeedbacksInput, UserUncheckedCreateWithoutGivenFeedbacksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGivenFeedbacksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGivenFeedbacksInput, UserUncheckedUpdateWithoutGivenFeedbacksInput>
  }

  export type UserUpdateWithoutGivenFeedbacksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    farmerCardNumber?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    krishiStars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cropFeeds?: CropFeedUpdateManyWithoutUserNestedInput
    soilTestRequests?: SoilTestRequestUpdateManyWithoutFarmerNestedInput
    soilTestReports?: SoilTestReportUpdateManyWithoutSoilTesterNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    marketPrices?: MarketPriceUpdateManyWithoutAgentNestedInput
    biddings?: BiddingUpdateManyWithoutUserNestedInput
    bids?: BidUpdateManyWithoutUserNestedInput
    solutions?: SolutionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGivenFeedbacksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    farmerCardNumber?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    krishiStars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cropFeeds?: CropFeedUncheckedUpdateManyWithoutUserNestedInput
    soilTestRequests?: SoilTestRequestUncheckedUpdateManyWithoutFarmerNestedInput
    soilTestReports?: SoilTestReportUncheckedUpdateManyWithoutSoilTesterNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    marketPrices?: MarketPriceUncheckedUpdateManyWithoutAgentNestedInput
    biddings?: BiddingUncheckedUpdateManyWithoutUserNestedInput
    bids?: BidUncheckedUpdateManyWithoutUserNestedInput
    solutions?: SolutionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutMarketPricesInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    farmerCardNumber?: string | null
    companyName?: string | null
    address?: string | null
    contactNumber?: string | null
    krishiStars?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    cropFeeds?: CropFeedCreateNestedManyWithoutUserInput
    soilTestRequests?: SoilTestRequestCreateNestedManyWithoutFarmerInput
    soilTestReports?: SoilTestReportCreateNestedManyWithoutSoilTesterInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    givenFeedbacks?: FeedbackCreateNestedManyWithoutGiverInput
    biddings?: BiddingCreateNestedManyWithoutUserInput
    bids?: BidCreateNestedManyWithoutUserInput
    solutions?: SolutionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMarketPricesInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    farmerCardNumber?: string | null
    companyName?: string | null
    address?: string | null
    contactNumber?: string | null
    krishiStars?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    cropFeeds?: CropFeedUncheckedCreateNestedManyWithoutUserInput
    soilTestRequests?: SoilTestRequestUncheckedCreateNestedManyWithoutFarmerInput
    soilTestReports?: SoilTestReportUncheckedCreateNestedManyWithoutSoilTesterInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    givenFeedbacks?: FeedbackUncheckedCreateNestedManyWithoutGiverInput
    biddings?: BiddingUncheckedCreateNestedManyWithoutUserInput
    bids?: BidUncheckedCreateNestedManyWithoutUserInput
    solutions?: SolutionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMarketPricesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMarketPricesInput, UserUncheckedCreateWithoutMarketPricesInput>
  }

  export type UserUpsertWithoutMarketPricesInput = {
    update: XOR<UserUpdateWithoutMarketPricesInput, UserUncheckedUpdateWithoutMarketPricesInput>
    create: XOR<UserCreateWithoutMarketPricesInput, UserUncheckedCreateWithoutMarketPricesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMarketPricesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMarketPricesInput, UserUncheckedUpdateWithoutMarketPricesInput>
  }

  export type UserUpdateWithoutMarketPricesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    farmerCardNumber?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    krishiStars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cropFeeds?: CropFeedUpdateManyWithoutUserNestedInput
    soilTestRequests?: SoilTestRequestUpdateManyWithoutFarmerNestedInput
    soilTestReports?: SoilTestReportUpdateManyWithoutSoilTesterNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    givenFeedbacks?: FeedbackUpdateManyWithoutGiverNestedInput
    biddings?: BiddingUpdateManyWithoutUserNestedInput
    bids?: BidUpdateManyWithoutUserNestedInput
    solutions?: SolutionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMarketPricesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    farmerCardNumber?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    krishiStars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cropFeeds?: CropFeedUncheckedUpdateManyWithoutUserNestedInput
    soilTestRequests?: SoilTestRequestUncheckedUpdateManyWithoutFarmerNestedInput
    soilTestReports?: SoilTestReportUncheckedUpdateManyWithoutSoilTesterNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    givenFeedbacks?: FeedbackUncheckedUpdateManyWithoutGiverNestedInput
    biddings?: BiddingUncheckedUpdateManyWithoutUserNestedInput
    bids?: BidUncheckedUpdateManyWithoutUserNestedInput
    solutions?: SolutionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutBiddingsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    farmerCardNumber?: string | null
    companyName?: string | null
    address?: string | null
    contactNumber?: string | null
    krishiStars?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    cropFeeds?: CropFeedCreateNestedManyWithoutUserInput
    soilTestRequests?: SoilTestRequestCreateNestedManyWithoutFarmerInput
    soilTestReports?: SoilTestReportCreateNestedManyWithoutSoilTesterInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    givenFeedbacks?: FeedbackCreateNestedManyWithoutGiverInput
    marketPrices?: MarketPriceCreateNestedManyWithoutAgentInput
    bids?: BidCreateNestedManyWithoutUserInput
    solutions?: SolutionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBiddingsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    farmerCardNumber?: string | null
    companyName?: string | null
    address?: string | null
    contactNumber?: string | null
    krishiStars?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    cropFeeds?: CropFeedUncheckedCreateNestedManyWithoutUserInput
    soilTestRequests?: SoilTestRequestUncheckedCreateNestedManyWithoutFarmerInput
    soilTestReports?: SoilTestReportUncheckedCreateNestedManyWithoutSoilTesterInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    givenFeedbacks?: FeedbackUncheckedCreateNestedManyWithoutGiverInput
    marketPrices?: MarketPriceUncheckedCreateNestedManyWithoutAgentInput
    bids?: BidUncheckedCreateNestedManyWithoutUserInput
    solutions?: SolutionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBiddingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBiddingsInput, UserUncheckedCreateWithoutBiddingsInput>
  }

  export type BidCreateWithoutBiddingInput = {
    id?: string
    amount: number
    status?: $Enums.BidStatus
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutBidsInput
    wonBidding?: BiddingCreateNestedOneWithoutWinningBidInput
  }

  export type BidUncheckedCreateWithoutBiddingInput = {
    id?: string
    amount: number
    status?: $Enums.BidStatus
    createdAt?: Date | string
    userId: string
    wonBidding?: BiddingUncheckedCreateNestedOneWithoutWinningBidInput
  }

  export type BidCreateOrConnectWithoutBiddingInput = {
    where: BidWhereUniqueInput
    create: XOR<BidCreateWithoutBiddingInput, BidUncheckedCreateWithoutBiddingInput>
  }

  export type BidCreateManyBiddingInputEnvelope = {
    data: BidCreateManyBiddingInput | BidCreateManyBiddingInput[]
    skipDuplicates?: boolean
  }

  export type BidCreateWithoutWonBiddingInput = {
    id?: string
    amount: number
    status?: $Enums.BidStatus
    createdAt?: Date | string
    bidding: BiddingCreateNestedOneWithoutBidsInput
    user: UserCreateNestedOneWithoutBidsInput
  }

  export type BidUncheckedCreateWithoutWonBiddingInput = {
    id?: string
    amount: number
    status?: $Enums.BidStatus
    createdAt?: Date | string
    biddingId: string
    userId: string
  }

  export type BidCreateOrConnectWithoutWonBiddingInput = {
    where: BidWhereUniqueInput
    create: XOR<BidCreateWithoutWonBiddingInput, BidUncheckedCreateWithoutWonBiddingInput>
  }

  export type UserUpsertWithoutBiddingsInput = {
    update: XOR<UserUpdateWithoutBiddingsInput, UserUncheckedUpdateWithoutBiddingsInput>
    create: XOR<UserCreateWithoutBiddingsInput, UserUncheckedCreateWithoutBiddingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBiddingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBiddingsInput, UserUncheckedUpdateWithoutBiddingsInput>
  }

  export type UserUpdateWithoutBiddingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    farmerCardNumber?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    krishiStars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cropFeeds?: CropFeedUpdateManyWithoutUserNestedInput
    soilTestRequests?: SoilTestRequestUpdateManyWithoutFarmerNestedInput
    soilTestReports?: SoilTestReportUpdateManyWithoutSoilTesterNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    givenFeedbacks?: FeedbackUpdateManyWithoutGiverNestedInput
    marketPrices?: MarketPriceUpdateManyWithoutAgentNestedInput
    bids?: BidUpdateManyWithoutUserNestedInput
    solutions?: SolutionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBiddingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    farmerCardNumber?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    krishiStars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cropFeeds?: CropFeedUncheckedUpdateManyWithoutUserNestedInput
    soilTestRequests?: SoilTestRequestUncheckedUpdateManyWithoutFarmerNestedInput
    soilTestReports?: SoilTestReportUncheckedUpdateManyWithoutSoilTesterNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    givenFeedbacks?: FeedbackUncheckedUpdateManyWithoutGiverNestedInput
    marketPrices?: MarketPriceUncheckedUpdateManyWithoutAgentNestedInput
    bids?: BidUncheckedUpdateManyWithoutUserNestedInput
    solutions?: SolutionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BidUpsertWithWhereUniqueWithoutBiddingInput = {
    where: BidWhereUniqueInput
    update: XOR<BidUpdateWithoutBiddingInput, BidUncheckedUpdateWithoutBiddingInput>
    create: XOR<BidCreateWithoutBiddingInput, BidUncheckedCreateWithoutBiddingInput>
  }

  export type BidUpdateWithWhereUniqueWithoutBiddingInput = {
    where: BidWhereUniqueInput
    data: XOR<BidUpdateWithoutBiddingInput, BidUncheckedUpdateWithoutBiddingInput>
  }

  export type BidUpdateManyWithWhereWithoutBiddingInput = {
    where: BidScalarWhereInput
    data: XOR<BidUpdateManyMutationInput, BidUncheckedUpdateManyWithoutBiddingInput>
  }

  export type BidUpsertWithoutWonBiddingInput = {
    update: XOR<BidUpdateWithoutWonBiddingInput, BidUncheckedUpdateWithoutWonBiddingInput>
    create: XOR<BidCreateWithoutWonBiddingInput, BidUncheckedCreateWithoutWonBiddingInput>
    where?: BidWhereInput
  }

  export type BidUpdateToOneWithWhereWithoutWonBiddingInput = {
    where?: BidWhereInput
    data: XOR<BidUpdateWithoutWonBiddingInput, BidUncheckedUpdateWithoutWonBiddingInput>
  }

  export type BidUpdateWithoutWonBiddingInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumBidStatusFieldUpdateOperationsInput | $Enums.BidStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bidding?: BiddingUpdateOneRequiredWithoutBidsNestedInput
    user?: UserUpdateOneRequiredWithoutBidsNestedInput
  }

  export type BidUncheckedUpdateWithoutWonBiddingInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumBidStatusFieldUpdateOperationsInput | $Enums.BidStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    biddingId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type BiddingCreateWithoutBidsInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    basePrice: number
    address: string
    contactNumber: string
    status?: $Enums.BiddingStatus
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBiddingsInput
    winningBid?: BidCreateNestedOneWithoutWonBiddingInput
  }

  export type BiddingUncheckedCreateWithoutBidsInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    basePrice: number
    address: string
    contactNumber: string
    status?: $Enums.BiddingStatus
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    winningBidId?: string | null
  }

  export type BiddingCreateOrConnectWithoutBidsInput = {
    where: BiddingWhereUniqueInput
    create: XOR<BiddingCreateWithoutBidsInput, BiddingUncheckedCreateWithoutBidsInput>
  }

  export type UserCreateWithoutBidsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    farmerCardNumber?: string | null
    companyName?: string | null
    address?: string | null
    contactNumber?: string | null
    krishiStars?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    cropFeeds?: CropFeedCreateNestedManyWithoutUserInput
    soilTestRequests?: SoilTestRequestCreateNestedManyWithoutFarmerInput
    soilTestReports?: SoilTestReportCreateNestedManyWithoutSoilTesterInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    givenFeedbacks?: FeedbackCreateNestedManyWithoutGiverInput
    marketPrices?: MarketPriceCreateNestedManyWithoutAgentInput
    biddings?: BiddingCreateNestedManyWithoutUserInput
    solutions?: SolutionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBidsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    farmerCardNumber?: string | null
    companyName?: string | null
    address?: string | null
    contactNumber?: string | null
    krishiStars?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    cropFeeds?: CropFeedUncheckedCreateNestedManyWithoutUserInput
    soilTestRequests?: SoilTestRequestUncheckedCreateNestedManyWithoutFarmerInput
    soilTestReports?: SoilTestReportUncheckedCreateNestedManyWithoutSoilTesterInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    givenFeedbacks?: FeedbackUncheckedCreateNestedManyWithoutGiverInput
    marketPrices?: MarketPriceUncheckedCreateNestedManyWithoutAgentInput
    biddings?: BiddingUncheckedCreateNestedManyWithoutUserInput
    solutions?: SolutionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBidsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBidsInput, UserUncheckedCreateWithoutBidsInput>
  }

  export type BiddingCreateWithoutWinningBidInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    basePrice: number
    address: string
    contactNumber: string
    status?: $Enums.BiddingStatus
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBiddingsInput
    bids?: BidCreateNestedManyWithoutBiddingInput
  }

  export type BiddingUncheckedCreateWithoutWinningBidInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    basePrice: number
    address: string
    contactNumber: string
    status?: $Enums.BiddingStatus
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    bids?: BidUncheckedCreateNestedManyWithoutBiddingInput
  }

  export type BiddingCreateOrConnectWithoutWinningBidInput = {
    where: BiddingWhereUniqueInput
    create: XOR<BiddingCreateWithoutWinningBidInput, BiddingUncheckedCreateWithoutWinningBidInput>
  }

  export type BiddingUpsertWithoutBidsInput = {
    update: XOR<BiddingUpdateWithoutBidsInput, BiddingUncheckedUpdateWithoutBidsInput>
    create: XOR<BiddingCreateWithoutBidsInput, BiddingUncheckedCreateWithoutBidsInput>
    where?: BiddingWhereInput
  }

  export type BiddingUpdateToOneWithWhereWithoutBidsInput = {
    where?: BiddingWhereInput
    data: XOR<BiddingUpdateWithoutBidsInput, BiddingUncheckedUpdateWithoutBidsInput>
  }

  export type BiddingUpdateWithoutBidsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    basePrice?: FloatFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    status?: EnumBiddingStatusFieldUpdateOperationsInput | $Enums.BiddingStatus
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBiddingsNestedInput
    winningBid?: BidUpdateOneWithoutWonBiddingNestedInput
  }

  export type BiddingUncheckedUpdateWithoutBidsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    basePrice?: FloatFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    status?: EnumBiddingStatusFieldUpdateOperationsInput | $Enums.BiddingStatus
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    winningBidId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpsertWithoutBidsInput = {
    update: XOR<UserUpdateWithoutBidsInput, UserUncheckedUpdateWithoutBidsInput>
    create: XOR<UserCreateWithoutBidsInput, UserUncheckedCreateWithoutBidsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBidsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBidsInput, UserUncheckedUpdateWithoutBidsInput>
  }

  export type UserUpdateWithoutBidsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    farmerCardNumber?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    krishiStars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cropFeeds?: CropFeedUpdateManyWithoutUserNestedInput
    soilTestRequests?: SoilTestRequestUpdateManyWithoutFarmerNestedInput
    soilTestReports?: SoilTestReportUpdateManyWithoutSoilTesterNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    givenFeedbacks?: FeedbackUpdateManyWithoutGiverNestedInput
    marketPrices?: MarketPriceUpdateManyWithoutAgentNestedInput
    biddings?: BiddingUpdateManyWithoutUserNestedInput
    solutions?: SolutionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBidsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    farmerCardNumber?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    krishiStars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cropFeeds?: CropFeedUncheckedUpdateManyWithoutUserNestedInput
    soilTestRequests?: SoilTestRequestUncheckedUpdateManyWithoutFarmerNestedInput
    soilTestReports?: SoilTestReportUncheckedUpdateManyWithoutSoilTesterNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    givenFeedbacks?: FeedbackUncheckedUpdateManyWithoutGiverNestedInput
    marketPrices?: MarketPriceUncheckedUpdateManyWithoutAgentNestedInput
    biddings?: BiddingUncheckedUpdateManyWithoutUserNestedInput
    solutions?: SolutionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BiddingUpsertWithoutWinningBidInput = {
    update: XOR<BiddingUpdateWithoutWinningBidInput, BiddingUncheckedUpdateWithoutWinningBidInput>
    create: XOR<BiddingCreateWithoutWinningBidInput, BiddingUncheckedCreateWithoutWinningBidInput>
    where?: BiddingWhereInput
  }

  export type BiddingUpdateToOneWithWhereWithoutWinningBidInput = {
    where?: BiddingWhereInput
    data: XOR<BiddingUpdateWithoutWinningBidInput, BiddingUncheckedUpdateWithoutWinningBidInput>
  }

  export type BiddingUpdateWithoutWinningBidInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    basePrice?: FloatFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    status?: EnumBiddingStatusFieldUpdateOperationsInput | $Enums.BiddingStatus
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBiddingsNestedInput
    bids?: BidUpdateManyWithoutBiddingNestedInput
  }

  export type BiddingUncheckedUpdateWithoutWinningBidInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    basePrice?: FloatFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    status?: EnumBiddingStatusFieldUpdateOperationsInput | $Enums.BiddingStatus
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    bids?: BidUncheckedUpdateManyWithoutBiddingNestedInput
  }

  export type UserCreateWithoutSolutionsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    farmerCardNumber?: string | null
    companyName?: string | null
    address?: string | null
    contactNumber?: string | null
    krishiStars?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    cropFeeds?: CropFeedCreateNestedManyWithoutUserInput
    soilTestRequests?: SoilTestRequestCreateNestedManyWithoutFarmerInput
    soilTestReports?: SoilTestReportCreateNestedManyWithoutSoilTesterInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    givenFeedbacks?: FeedbackCreateNestedManyWithoutGiverInput
    marketPrices?: MarketPriceCreateNestedManyWithoutAgentInput
    biddings?: BiddingCreateNestedManyWithoutUserInput
    bids?: BidCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSolutionsInput = {
    id?: string
    name?: string | null
    email: string
    emailVerified?: Date | string | null
    image?: string | null
    password?: string | null
    role?: $Enums.UserRole
    farmerCardNumber?: string | null
    companyName?: string | null
    address?: string | null
    contactNumber?: string | null
    krishiStars?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    cropFeeds?: CropFeedUncheckedCreateNestedManyWithoutUserInput
    soilTestRequests?: SoilTestRequestUncheckedCreateNestedManyWithoutFarmerInput
    soilTestReports?: SoilTestReportUncheckedCreateNestedManyWithoutSoilTesterInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    givenFeedbacks?: FeedbackUncheckedCreateNestedManyWithoutGiverInput
    marketPrices?: MarketPriceUncheckedCreateNestedManyWithoutAgentInput
    biddings?: BiddingUncheckedCreateNestedManyWithoutUserInput
    bids?: BidUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSolutionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSolutionsInput, UserUncheckedCreateWithoutSolutionsInput>
  }

  export type CropFeedCreateWithoutSolutionsInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    isAiQuery?: boolean
    aiResponse?: string | null
    wasHelpful?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutCropFeedsInput
    comments?: CommentCreateNestedManyWithoutCropFeedInput
  }

  export type CropFeedUncheckedCreateWithoutSolutionsInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    isAiQuery?: boolean
    aiResponse?: string | null
    wasHelpful?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    comments?: CommentUncheckedCreateNestedManyWithoutCropFeedInput
  }

  export type CropFeedCreateOrConnectWithoutSolutionsInput = {
    where: CropFeedWhereUniqueInput
    create: XOR<CropFeedCreateWithoutSolutionsInput, CropFeedUncheckedCreateWithoutSolutionsInput>
  }

  export type UserUpsertWithoutSolutionsInput = {
    update: XOR<UserUpdateWithoutSolutionsInput, UserUncheckedUpdateWithoutSolutionsInput>
    create: XOR<UserCreateWithoutSolutionsInput, UserUncheckedCreateWithoutSolutionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSolutionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSolutionsInput, UserUncheckedUpdateWithoutSolutionsInput>
  }

  export type UserUpdateWithoutSolutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    farmerCardNumber?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    krishiStars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cropFeeds?: CropFeedUpdateManyWithoutUserNestedInput
    soilTestRequests?: SoilTestRequestUpdateManyWithoutFarmerNestedInput
    soilTestReports?: SoilTestReportUpdateManyWithoutSoilTesterNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    givenFeedbacks?: FeedbackUpdateManyWithoutGiverNestedInput
    marketPrices?: MarketPriceUpdateManyWithoutAgentNestedInput
    biddings?: BiddingUpdateManyWithoutUserNestedInput
    bids?: BidUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSolutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    farmerCardNumber?: NullableStringFieldUpdateOperationsInput | string | null
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    krishiStars?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cropFeeds?: CropFeedUncheckedUpdateManyWithoutUserNestedInput
    soilTestRequests?: SoilTestRequestUncheckedUpdateManyWithoutFarmerNestedInput
    soilTestReports?: SoilTestReportUncheckedUpdateManyWithoutSoilTesterNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    givenFeedbacks?: FeedbackUncheckedUpdateManyWithoutGiverNestedInput
    marketPrices?: MarketPriceUncheckedUpdateManyWithoutAgentNestedInput
    biddings?: BiddingUncheckedUpdateManyWithoutUserNestedInput
    bids?: BidUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CropFeedUpsertWithoutSolutionsInput = {
    update: XOR<CropFeedUpdateWithoutSolutionsInput, CropFeedUncheckedUpdateWithoutSolutionsInput>
    create: XOR<CropFeedCreateWithoutSolutionsInput, CropFeedUncheckedCreateWithoutSolutionsInput>
    where?: CropFeedWhereInput
  }

  export type CropFeedUpdateToOneWithWhereWithoutSolutionsInput = {
    where?: CropFeedWhereInput
    data: XOR<CropFeedUpdateWithoutSolutionsInput, CropFeedUncheckedUpdateWithoutSolutionsInput>
  }

  export type CropFeedUpdateWithoutSolutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAiQuery?: BoolFieldUpdateOperationsInput | boolean
    aiResponse?: NullableStringFieldUpdateOperationsInput | string | null
    wasHelpful?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCropFeedsNestedInput
    comments?: CommentUpdateManyWithoutCropFeedNestedInput
  }

  export type CropFeedUncheckedUpdateWithoutSolutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAiQuery?: BoolFieldUpdateOperationsInput | boolean
    aiResponse?: NullableStringFieldUpdateOperationsInput | string | null
    wasHelpful?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    comments?: CommentUncheckedUpdateManyWithoutCropFeedNestedInput
  }

  export type CropFeedCreateManyUserInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    isAiQuery?: boolean
    aiResponse?: string | null
    wasHelpful?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SoilTestRequestCreateManyFarmerInput = {
    id?: string
    location: string
    contactNumber: string
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SoilTestReportCreateManySoilTesterInput = {
    id?: string
    reportUrl: string
    soilCollectionUrl: string
    farmerPhotoUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    requestId: string
  }

  export type FeedbackCreateManyUserInput = {
    id?: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    giverId: string
  }

  export type FeedbackCreateManyGiverInput = {
    id?: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type MarketPriceCreateManyAgentInput = {
    id?: string
    cropName: string
    marketName: string
    price: number
    date: Date | string
    cropType: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BiddingCreateManyUserInput = {
    id?: string
    title: string
    description: string
    imageUrl?: string | null
    basePrice: number
    address: string
    contactNumber: string
    status?: $Enums.BiddingStatus
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    winningBidId?: string | null
  }

  export type BidCreateManyUserInput = {
    id?: string
    amount: number
    status?: $Enums.BidStatus
    createdAt?: Date | string
    biddingId: string
  }

  export type SolutionCreateManyUserInput = {
    id?: string
    description: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    cropFeedId: string
  }

  export type CropFeedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAiQuery?: BoolFieldUpdateOperationsInput | boolean
    aiResponse?: NullableStringFieldUpdateOperationsInput | string | null
    wasHelpful?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUpdateManyWithoutCropFeedNestedInput
    solutions?: SolutionUpdateManyWithoutCropFeedNestedInput
  }

  export type CropFeedUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAiQuery?: BoolFieldUpdateOperationsInput | boolean
    aiResponse?: NullableStringFieldUpdateOperationsInput | string | null
    wasHelpful?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUncheckedUpdateManyWithoutCropFeedNestedInput
    solutions?: SolutionUncheckedUpdateManyWithoutCropFeedNestedInput
  }

  export type CropFeedUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isAiQuery?: BoolFieldUpdateOperationsInput | boolean
    aiResponse?: NullableStringFieldUpdateOperationsInput | string | null
    wasHelpful?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SoilTestRequestUpdateWithoutFarmerInput = {
    id?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reports?: SoilTestReportUpdateManyWithoutRequestNestedInput
  }

  export type SoilTestRequestUncheckedUpdateWithoutFarmerInput = {
    id?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reports?: SoilTestReportUncheckedUpdateManyWithoutRequestNestedInput
  }

  export type SoilTestRequestUncheckedUpdateManyWithoutFarmerInput = {
    id?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SoilTestReportUpdateWithoutSoilTesterInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportUrl?: StringFieldUpdateOperationsInput | string
    soilCollectionUrl?: StringFieldUpdateOperationsInput | string
    farmerPhotoUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    request?: SoilTestRequestUpdateOneRequiredWithoutReportsNestedInput
  }

  export type SoilTestReportUncheckedUpdateWithoutSoilTesterInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportUrl?: StringFieldUpdateOperationsInput | string
    soilCollectionUrl?: StringFieldUpdateOperationsInput | string
    farmerPhotoUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requestId?: StringFieldUpdateOperationsInput | string
  }

  export type SoilTestReportUncheckedUpdateManyWithoutSoilTesterInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportUrl?: StringFieldUpdateOperationsInput | string
    soilCollectionUrl?: StringFieldUpdateOperationsInput | string
    farmerPhotoUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requestId?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    giver?: UserUpdateOneRequiredWithoutGivenFeedbacksNestedInput
  }

  export type FeedbackUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    giverId?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    giverId?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackUpdateWithoutGiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFeedbacksNestedInput
  }

  export type FeedbackUncheckedUpdateWithoutGiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackUncheckedUpdateManyWithoutGiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type MarketPriceUpdateWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    cropName?: StringFieldUpdateOperationsInput | string
    marketName?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    cropType?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MarketPriceUncheckedUpdateWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    cropName?: StringFieldUpdateOperationsInput | string
    marketName?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    cropType?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MarketPriceUncheckedUpdateManyWithoutAgentInput = {
    id?: StringFieldUpdateOperationsInput | string
    cropName?: StringFieldUpdateOperationsInput | string
    marketName?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    cropType?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BiddingUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    basePrice?: FloatFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    status?: EnumBiddingStatusFieldUpdateOperationsInput | $Enums.BiddingStatus
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bids?: BidUpdateManyWithoutBiddingNestedInput
    winningBid?: BidUpdateOneWithoutWonBiddingNestedInput
  }

  export type BiddingUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    basePrice?: FloatFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    status?: EnumBiddingStatusFieldUpdateOperationsInput | $Enums.BiddingStatus
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    winningBidId?: NullableStringFieldUpdateOperationsInput | string | null
    bids?: BidUncheckedUpdateManyWithoutBiddingNestedInput
  }

  export type BiddingUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    basePrice?: FloatFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    contactNumber?: StringFieldUpdateOperationsInput | string
    status?: EnumBiddingStatusFieldUpdateOperationsInput | $Enums.BiddingStatus
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    winningBidId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BidUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumBidStatusFieldUpdateOperationsInput | $Enums.BidStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bidding?: BiddingUpdateOneRequiredWithoutBidsNestedInput
    wonBidding?: BiddingUpdateOneWithoutWinningBidNestedInput
  }

  export type BidUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumBidStatusFieldUpdateOperationsInput | $Enums.BidStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    biddingId?: StringFieldUpdateOperationsInput | string
    wonBidding?: BiddingUncheckedUpdateOneWithoutWinningBidNestedInput
  }

  export type BidUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumBidStatusFieldUpdateOperationsInput | $Enums.BidStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    biddingId?: StringFieldUpdateOperationsInput | string
  }

  export type SolutionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cropFeed?: CropFeedUpdateOneRequiredWithoutSolutionsNestedInput
  }

  export type SolutionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cropFeedId?: StringFieldUpdateOperationsInput | string
  }

  export type SolutionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cropFeedId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentCreateManyCropFeedInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type SolutionCreateManyCropFeedInput = {
    id?: string
    description: string
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type CommentUpdateWithoutCropFeedInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUncheckedUpdateWithoutCropFeedInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUncheckedUpdateManyWithoutCropFeedInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type SolutionUpdateWithoutCropFeedInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSolutionsNestedInput
  }

  export type SolutionUncheckedUpdateWithoutCropFeedInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type SolutionUncheckedUpdateManyWithoutCropFeedInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type SoilTestReportCreateManyRequestInput = {
    id?: string
    reportUrl: string
    soilCollectionUrl: string
    farmerPhotoUrl: string
    createdAt?: Date | string
    updatedAt?: Date | string
    soilTesterId: string
  }

  export type SoilTestReportUpdateWithoutRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportUrl?: StringFieldUpdateOperationsInput | string
    soilCollectionUrl?: StringFieldUpdateOperationsInput | string
    farmerPhotoUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    soilTester?: UserUpdateOneRequiredWithoutSoilTestReportsNestedInput
  }

  export type SoilTestReportUncheckedUpdateWithoutRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportUrl?: StringFieldUpdateOperationsInput | string
    soilCollectionUrl?: StringFieldUpdateOperationsInput | string
    farmerPhotoUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    soilTesterId?: StringFieldUpdateOperationsInput | string
  }

  export type SoilTestReportUncheckedUpdateManyWithoutRequestInput = {
    id?: StringFieldUpdateOperationsInput | string
    reportUrl?: StringFieldUpdateOperationsInput | string
    soilCollectionUrl?: StringFieldUpdateOperationsInput | string
    farmerPhotoUrl?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    soilTesterId?: StringFieldUpdateOperationsInput | string
  }

  export type BidCreateManyBiddingInput = {
    id?: string
    amount: number
    status?: $Enums.BidStatus
    createdAt?: Date | string
    userId: string
  }

  export type BidUpdateWithoutBiddingInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumBidStatusFieldUpdateOperationsInput | $Enums.BidStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBidsNestedInput
    wonBidding?: BiddingUpdateOneWithoutWinningBidNestedInput
  }

  export type BidUncheckedUpdateWithoutBiddingInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumBidStatusFieldUpdateOperationsInput | $Enums.BidStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    wonBidding?: BiddingUncheckedUpdateOneWithoutWinningBidNestedInput
  }

  export type BidUncheckedUpdateManyWithoutBiddingInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    status?: EnumBidStatusFieldUpdateOperationsInput | $Enums.BidStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}