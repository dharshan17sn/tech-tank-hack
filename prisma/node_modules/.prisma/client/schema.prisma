generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  FARMER
  SOIL_TEST_COMPANY
  SEED_PROVIDER
  MARKET_AGENT
  BUYER
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String    @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  role             UserRole  @default(FARMER)
  farmerCardNumber String?   @unique
  companyName      String?
  address          String?
  contactNumber    String?
  krishiStars      Int       @default(0)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  cropFeeds        CropFeed[]
  soilTestRequests SoilTestRequest[] @relation("FarmerRequests")
  soilTestReports  SoilTestReport[]  @relation("SoilTesterReports")
  feedbacks        Feedback[]        @relation("ReceivedFeedbacks")
  givenFeedbacks   Feedback[]        @relation("GivenFeedbacks")
  marketPrices     MarketPrice[]
  biddings         Bidding[]         @relation("UserBiddings")
  bids             Bid[]             @relation("UserBids")
  solutions        Solution[]
}

model CropFeed {
  id          String   @id @default(uuid())
  title       String
  description String
  imageUrl    String?
  isAiQuery   Boolean  @default(false)
  aiResponse  String?
  wasHelpful  Boolean?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]
  solutions Solution[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cropFeedId String
  cropFeed   CropFeed @relation(fields: [cropFeedId], references: [id], onDelete: Cascade)
  userId     String
}

model SoilTestRequest {
  id            String   @id @default(uuid())
  location      String
  contactNumber String
  status        String   @default("PENDING") // PENDING, ACCEPTED, COMPLETED
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  farmerId String
  farmer   User             @relation("FarmerRequests", fields: [farmerId], references: [id], onDelete: Cascade)
  reports  SoilTestReport[]
}

model SoilTestReport {
  id                String   @id @default(uuid())
  reportUrl         String
  soilCollectionUrl String
  farmerPhotoUrl    String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  requestId    String
  request      SoilTestRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  soilTesterId String
  soilTester   User            @relation("SoilTesterReports", fields: [soilTesterId], references: [id])
}

model Feedback {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId  String
  user    User   @relation("ReceivedFeedbacks", fields: [userId], references: [id], onDelete: Cascade)
  giverId String
  giver   User   @relation("GivenFeedbacks", fields: [giverId], references: [id])
}

model MarketPrice {
  id         String   @id @default(uuid())
  cropName   String
  marketName String
  price      Float
  date       DateTime
  cropType   String
  imageUrl   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  agentId String
  agent   User   @relation(fields: [agentId], references: [id], onDelete: Cascade)
}

model Bidding {
  id            String        @id @default(cuid())
  title         String
  description   String
  imageUrl      String?
  basePrice     Float
  address       String
  contactNumber String
  status        BiddingStatus @default(ACTIVE)
  endDate       DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  userId        String
  user          User          @relation("UserBiddings", fields: [userId], references: [id])
  bids          Bid[]         @relation("BiddingBids")
  winningBid    Bid?          @relation("WinningBid", fields: [winningBidId], references: [id])
  winningBidId  String?       @unique

  @@index([userId])
}

model Bid {
  id         String    @id @default(cuid())
  amount     Float
  status     BidStatus @default(PENDING)
  createdAt  DateTime  @default(now())
  biddingId  String
  userId     String
  bidding    Bidding   @relation("BiddingBids", fields: [biddingId], references: [id])
  user       User      @relation("UserBids", fields: [userId], references: [id])
  wonBidding Bidding?  @relation("WinningBid")

  @@index([biddingId])
  @@index([userId])
}

model Solution {
  id          String   @id @default(cuid())
  description String
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  cropFeedId  String
  user        User     @relation(fields: [userId], references: [id])
  cropFeed    CropFeed @relation(fields: [cropFeedId], references: [id])

  @@index([userId])
  @@index([cropFeedId])
}

enum BiddingStatus {
  ACTIVE
  CLOSED
  SOLD
}

enum BidStatus {
  PENDING
  ACCEPTED
  REJECTED
}
